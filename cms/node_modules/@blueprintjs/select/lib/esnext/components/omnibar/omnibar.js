/*
 * Copyright 2017 Palantir Technologies, Inc. All rights reserved.
 *
 * Licensed under the terms of the LICENSE file distributed with this project.
 */
import classNames from "classnames";
import * as React from "react";
import { DISPLAYNAME_PREFIX, InputGroup, Overlay, Utils, } from "@blueprintjs/core";
import { Classes } from "../../common";
import { QueryList } from "../query-list/queryList";
export class Omnibar extends React.PureComponent {
    constructor() {
        super(...arguments);
        this.TypedQueryList = QueryList.ofType();
        this.refHandlers = {
            queryList: (ref) => (this.queryList = ref),
        };
        this.renderQueryList = (listProps) => {
            const { inputProps = {}, isOpen, overlayProps = {} } = this.props;
            const { handleKeyDown, handleKeyUp } = listProps;
            const handlers = isOpen ? { onKeyDown: handleKeyDown, onKeyUp: handleKeyUp } : {};
            return (React.createElement(Overlay, Object.assign({ hasBackdrop: true }, overlayProps, { isOpen: isOpen, className: classNames(Classes.OMNIBAR_OVERLAY, overlayProps.className), onClose: this.handleOverlayClose }),
                React.createElement("div", Object.assign({ className: classNames(Classes.OMNIBAR, listProps.className) }, handlers),
                    React.createElement(InputGroup, Object.assign({ autoFocus: true, large: true, leftIcon: "search", placeholder: "Search..." }, inputProps, { onChange: listProps.handleQueryChange, value: listProps.query })),
                    listProps.itemList)));
        };
        this.handleOverlayClose = (event) => {
            const { overlayProps = {} } = this.props;
            Utils.safeInvoke(overlayProps.onClose, event);
            Utils.safeInvoke(this.props.onClose, event);
        };
    }
    static ofType() {
        return Omnibar;
    }
    render() {
        // omit props specific to this component, spread the rest.
        const { initialContent = null, isOpen, inputProps, overlayProps, ...restProps } = this.props;
        return (React.createElement(this.TypedQueryList, Object.assign({}, restProps, { initialContent: initialContent, ref: this.refHandlers.queryList, renderer: this.renderQueryList })));
    }
}
Omnibar.displayName = `${DISPLAYNAME_PREFIX}.Omnibar`;
//# sourceMappingURL=omnibar.js.map
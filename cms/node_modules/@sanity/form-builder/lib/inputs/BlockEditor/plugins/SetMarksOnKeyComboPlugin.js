"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SetMarksOnKeyComboPlugin;
exports.keyMaps = void 0;

var _isHotkey = _interopRequireWildcard(require("is-hotkey"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

// This plugin makes keyboard shortcuts for decorators
const isStrongHotkey = (0, _isHotkey.default)('mod+b');
const isEmphasisHotkey = (0, _isHotkey.default)('mod+i');
const isUnderlinedHotkey = (0, _isHotkey.default)('mod+u');
const isCodeHotKey = (0, _isHotkey.default)("mod+'");
const modKeyPlatformName = (0, _isHotkey.toKeyName)('mod');
const keyMaps = {
  strong: `${modKeyPlatformName} + b`,
  em: `${modKeyPlatformName} + i`,
  underline: `${modKeyPlatformName} + u`,
  code: `${modKeyPlatformName} + '`
};
exports.keyMaps = keyMaps;

function SetMarksOnKeyComboPlugin(options = {}) {
  const decorators = options.decorators || [];
  return {
    onKeyDown(event, editor, next) {
      let mark;

      if (isStrongHotkey(event)) {
        mark = 'strong';
      } else if (isEmphasisHotkey(event)) {
        mark = 'em';
      } else if (isUnderlinedHotkey(event)) {
        mark = 'underline';
      } else if (isCodeHotKey(event)) {
        mark = 'code';
      } else {
        return next();
      } // Return if not supported by schema


      if (!decorators.includes(mark)) {
        return next();
      }

      event.preventDefault();
      return editor.toggleMark(mark);
    }

  };
}
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _react = _interopRequireDefault(require("react"));

var _formatBoldIcon = _interopRequireDefault(require("part:@sanity/base/format-bold-icon"));

var _formatItalicIcon = _interopRequireDefault(require("part:@sanity/base/format-italic-icon"));

var _formatStrikethroughIcon = _interopRequireDefault(require("part:@sanity/base/format-strikethrough-icon"));

var _formatUnderlinedIcon = _interopRequireDefault(require("part:@sanity/base/format-underlined-icon"));

var _formatCodeIcon = _interopRequireDefault(require("part:@sanity/base/format-code-icon"));

var _sanityLogoIcon = _interopRequireDefault(require("part:@sanity/base/sanity-logo-icon"));

var _button = _interopRequireDefault(require("part:@sanity/components/toggles/button"));

var _SetMarksOnKeyComboPlugin = require("../plugins/SetMarksOnKeyComboPlugin");

var _ToolbarClickAction = _interopRequireDefault(require("./ToolbarClickAction"));

var _DecoratorButtons = _interopRequireDefault(require("./styles/DecoratorButtons.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getIcon(type) {
  switch (type) {
    case 'strong':
      return _formatBoldIcon.default;

    case 'em':
      return _formatItalicIcon.default;

    case 'underline':
      return _formatUnderlinedIcon.default;

    case 'strike-through':
      return _formatStrikethroughIcon.default;

    case 'code':
      return _formatCodeIcon.default;

    default:
      return _sanityLogoIcon.default;
  }
}

const NOOP = () => {};

class DecoratorButtons extends _react.default.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "handleClick", item => {
      const editor = this.props.editor;
      editor.toggleMark(item.value).focus();
    });

    _defineProperty(this, "renderDecoratorButton", item => {
      const editor = this.props.editor;
      const icon = item.blockEditor ? item.blockEditor.icon : null;
      const Icon = icon || getIcon(item.value); // We must not do a click-event here, because that messes with the editor focus!

      const onAction = () => {
        this.handleClick(item);
      };

      const shortCut = _SetMarksOnKeyComboPlugin.keyMaps[item.value] ? `(${_SetMarksOnKeyComboPlugin.keyMaps[item.value]})` : '';
      const title = `${item.title} ${shortCut}`;
      return _react.default.createElement("span", {
        className: _DecoratorButtons.default.buttonWrapper,
        key: item.value
      }, _react.default.createElement(_ToolbarClickAction.default, {
        onAction: onAction,
        editor: editor,
        key: `decoratorButton${item.value}`
      }, _react.default.createElement(_button.default, {
        selected: !!item.active,
        disabled: item.disabled,
        onClick: NOOP,
        title: title,
        className: _DecoratorButtons.default.button,
        icon: Icon
      })));
    });
  }

  shouldComponentUpdate(nextProps) {
    const nextMarks = nextProps.editorValue.marks.map(mrk => mrk.type);
    const currentMarks = this.props.editorValue.marks.map(mrk => mrk.type);

    if ((0, _isEqual2.default)(nextMarks, currentMarks)) {
      return false;
    }

    return true;
  }

  getItems() {
    const _this$props = this.props,
          editor = _this$props.editor,
          blockContentFeatures = _this$props.blockContentFeatures;
    const focusBlock = editor.value.focusBlock;
    const disabled = focusBlock ? editor.query('isVoid', focusBlock) : false;
    return blockContentFeatures.decorators.map(decorator => {
      return _objectSpread({}, decorator, {
        active: editor.query('hasMark', decorator.value),
        disabled
      });
    });
  }

  render() {
    const items = this.getItems();
    return _react.default.createElement("div", {
      className: _DecoratorButtons.default.root
    }, items.map(this.renderDecoratorButton));
  }

}

exports.default = DecoratorButtons;
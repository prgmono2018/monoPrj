"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _extractFiles = require("../util/extractFiles");

var _upload = _interopRequireDefault(require("../actions/upload"));

var _secrets = require("../actions/secrets");

var _default2 = _interopRequireDefault(require("part:@sanity/components/formfields/default"));

var _button = _interopRequireDefault(require("part:@sanity/components/fileinput/button"));

var _buttonCollection = _interopRequireDefault(require("part:@sanity/components/buttons/button-collection"));

var _default3 = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _default4 = _interopRequireDefault(require("part:@sanity/components/dialogs/default"));

var _content = _interopRequireDefault(require("part:@sanity/components/dialogs/content"));

var _bar = _interopRequireDefault(require("part:@sanity/components/progress/bar"));

var _UploadPlaceholder = _interopRequireDefault(require("./UploadPlaceholder"));

var _uploadIcon = _interopRequireDefault(require("part:@sanity/base/upload-icon"));

var _Uploader = _interopRequireDefault(require("./Uploader.css"));

var _lodash = require("lodash");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// eslint-disable-next-line complexity
function isValidVideoSource(source, callback) {
  // Handle file input
  if (typeof window !== 'undefined' && source instanceof window.File) {
    var fileOptions = optionsFromFile({}, source);
    return callback(null, fileOptions);
  } // Test string for url validity


  if ((0, _lodash.isString)(source)) {
    var test;
    var msg;

    try {
      test = new URL(source);
    } catch (err) {
      msg = 'Not a valid URL';
      test = false;
    }

    if (test && !test.protocol.match(/http:|https:/)) {
      msg = 'Not a valid URL';
      test = false;
    }

    if (test && test.host.match(/^localhost/g)) {
      msg = "Invalid host ('".concat(test.host, "')");
      test = false;
    }

    if (!test) {
      return callback(new Error(msg));
    }

    return callback(null, source);
  }

  return callback(new Error('Could not identify source'), null);
}

function optionsFromFile(opts, file) {
  if (typeof window === 'undefined' || !(file instanceof window.File)) {
    return opts;
  }

  var fileOpts = {
    filename: opts.preserveFilename === false ? undefined : file.name,
    contentType: file.type
  };
  return _objectSpread({}, {
    filename: opts.preserveFilename === false ? undefined : file.name,
    contentType: file.type
  }, {
    fileOpts: fileOpts
  });
}

var ctrlKey = 17;
var cmdKey = 91;
var propTypes = {
  hasFocus: _propTypes.default.bool,
  onFocus: _propTypes.default.func,
  onBlur: _propTypes.default.func,
  onBrowse: _propTypes.default.func.isRequired,
  onSetupButtonClicked: _propTypes.default.func.isRequired,
  onUploadComplete: _propTypes.default.func,
  secrets: _propTypes.default.shape({
    token: _propTypes.default.string,
    secretKey: _propTypes.default.string
  }),
  buttons: _propTypes.default.node,
  children: _propTypes.default.node
};

var MuxVideoInputUploader =
/*#__PURE__*/
function (_Component) {
  _inherits(MuxVideoInputUploader, _Component);

  function MuxVideoInputUploader() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, MuxVideoInputUploader);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MuxVideoInputUploader)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
      isDraggingOver: false,
      invalidPaste: false,
      invalidFile: false,
      isComplete: false,
      uploadState: null
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "dragEnteredEls", []);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "upload", null);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "ctrlDown", false);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "cancelUploadButton", _react.default.createRef());

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "hiddenTextField", _react.default.createRef());

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "container", _react.default.createRef());

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "subscribeToUpload", function (upload, callback) {
      _this.setState({
        invalidFile: false,
        invalidPaste: false,
        error: null
      });

      _this.unSubscribeToUpload();

      _this.upload = upload.pipe((0, _operators.takeUntil)(_this.$cancel)).subscribe({
        next: function next(event) {
          _this.handleUploadEvent(event, callback);
        },
        error: function error(err) {
          return _this.handleUploadError(err, callback);
        }
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "trackProgress", function (evt) {
      _this.setState({
        uploadState: evt.percent
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleUploadFiles", function (files) {
      _this.setState({
        uploadState: 0
      });

      _this.uploadSource(files[0], files[0].name, function (err, subscription) {
        if (err) {
          _this.setState({
            invalidFile: true,
            error: err,
            uploadState: null
          });

          return null;
        }

        return _this.setState({
          uploadState: 0
        }, function () {
          _this.$cancel = (0, _rxjs.fromEvent)(_this.cancelUploadButton.current, 'click');

          _this.subscribeToUpload(subscription);
        });
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleUploadResponse", function (response, callback) {
      if (response.statusCode !== 200) {
        var msg = response.body && response.body.message || response.statusCode;
        return _this.handleUploadError(new Error(msg), callback);
      }

      return _this.handleUploadSuccess(response, callback);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleUploadEvent", function (event, callback) {
      switch (event.type) {
        case 'response':
          return _this.handleUploadResponse(event, callback);

        case 'progress':
          return _this.trackProgress(event);

        default:
          return null;
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleUploadSuccess", function (response, callback) {
      var asset = response.body.results[0];

      _this.props.onUploadComplete(asset);

      if (_this.upload && !_this.upload.closed) {
        _this.setState({
          isComplete: false,
          uploadState: null,
          asset: asset
        });
      }

      if (callback) {
        return callback(null, response);
      }

      return true;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleUploadError", function (error, callback) {
      if (error) {
        _this.setState({
          error: error,
          isComplete: true
        });
      }

      if (callback) {
        return callback(error);
      }

      return true;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handlePaste", function (event) {
      if (_this.state.uploadState) {
        return;
      }

      var clipboardData = event.clipboardData || window.clipboardData;
      var url = clipboardData.getData('text');

      var cbFn = function cbFn(err) {
        if (err) {
          _this.setState({
            invalidPaste: true,
            error: err
          });
        }

        setTimeout(function () {
          _this.setState({
            invalidPaste: false
          });
        }, 2000);
      };

      _this.uploadSource(url, url.split('/').slice(-1)[0], function (err, subscription) {
        if (err) {
          return _this.handleUploadError(err, cbFn);
        }

        return _this.setState({
          error: null,
          uploadState: 0
        }, function () {
          _this.$cancel = (0, _rxjs.fromEvent)(_this.cancelUploadButton.current, 'click');

          _this.subscribeToUpload(subscription, cbFn);
        });
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleDrop", function (event) {
      _this.setState({
        isDraggingOver: false
      });

      event.preventDefault();
      event.stopPropagation();
      (0, _extractFiles.extractDroppedFiles)(event.nativeEvent.dataTransfer).then(function (files) {
        if (files) {
          _this.handleUploadFiles(files);
        }
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleDragOver", function (event) {
      event.preventDefault();
      event.stopPropagation();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleDragEnter", function (event) {
      event.stopPropagation();

      _this.dragEnteredEls.push(event.target);

      _this.setState({
        isDraggingOver: true
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleDragLeave", function (event) {
      event.stopPropagation();

      var idx = _this.dragEnteredEls.indexOf(event.target);

      if (idx > -1) {
        _this.dragEnteredEls.splice(idx, 1);
      }

      if (_this.dragEnteredEls.length === 0) {
        _this.setState({
          isDraggingOver: false
        });
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleCancelUploadButtonClicked", function (event) {
      _this.setState({
        uploadState: null,
        error: null
      });

      _this.container.current.focus();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleErrorClose", function (event) {
      if (event) {
        event.preventDefault();
      }

      if (_this.state.uploadState !== null) {
        return;
      }

      _this.setState({
        invalidFile: false,
        invalidPaste: false,
        error: null,
        uploadState: null
      });

      _this.container.current.focus();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleSetupButtonClicked", function (event) {
      _this.handleErrorClose(event);

      _this.props.onSetupButtonClicked();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleKeyDown", function (event) {
      if (event.keyCode == ctrlKey || event.keyCode == cmdKey) {
        _this.ctrlDown = true;
      }

      var vKey = 86;

      if (_this.ctrlDown && event.keyCode == vKey) {
        _this.hiddenTextField.current.focus();
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleKeyUp", function (event) {
      if (event.keyCode == ctrlKey || event.keyCode == cmdKey) {
        _this.ctrlDown = false;
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleFocus", function (event) {
      _this.props.onFocus(event);
    });

    return _this;
  }

  _createClass(MuxVideoInputUploader, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unSubscribeToUpload();
    }
  }, {
    key: "unSubscribeToUpload",
    value: function unSubscribeToUpload() {
      if (this.upload && !this.upload.closed) {
        this.upload.unsubscribe();
      }
    }
  }, {
    key: "uploadSource",
    value: function uploadSource(source, filename, callback) {
      var _this2 = this;

      isValidVideoSource(source, function (error, result) {
        if (error) {
          return callback(error);
        }

        _this2.setState({
          uploadState: 0
        });

        return (0, _secrets.testSecrets)().then(function (testResult) {
          if (testResult.status) {
            return callback(null, (0, _upload.default)(source, {
              filename: filename
            }));
          }

          return callback(new Error('Invalid credentials'), null);
        }).catch(function (err) {
          return callback(err, null);
        });
      });
    }
  }, {
    key: "renderUploadPlaceHolder",
    value: function renderUploadPlaceHolder() {
      if (this.props.children) {
        return null;
      }

      if (this.state.uploadState !== null) {
        return null;
      }

      var _this$state = this.state,
          invalidFile = _this$state.invalidFile,
          invalidPaste = _this$state.invalidPaste;
      return _react.default.createElement("div", null, _react.default.createElement(_default2.default, {
        level: 0
      }, _react.default.createElement(_UploadPlaceholder.default, {
        invalidPaste: invalidPaste,
        invalidFile: invalidFile
      })), _react.default.createElement(_buttonCollection.default, null, _react.default.createElement(_button.default, {
        inverted: true,
        icon: _uploadIcon.default,
        onSelect: this.handleUploadFiles,
        accept: 'video/*'
      }, "Select file"), _react.default.createElement(_default3.default, {
        inverted: true,
        onClick: this.props.onBrowse
      }, "Browse")));
    }
  }, {
    key: "renderUploadProgress",
    value: function renderUploadProgress() {
      var uploadState = this.state.uploadState;

      if (uploadState === null) {
        return null;
      }

      var text = uploadState < 100 ? 'Uploading' : 'Waiting for MUX to complete the file';

      if (this.state.error) {
        text = this.state.error.message;
      }

      return _react.default.createElement("div", {
        className: _Uploader.default.uploadProgress
      }, _react.default.createElement("div", {
        className: _Uploader.default.progressBar
      }, _react.default.createElement(_bar.default, {
        percent: uploadState,
        text: text,
        isInProgress: uploadState === 100 && !this.state.error,
        showPercent: true,
        animation: true,
        color: "primary"
      })), (uploadState < 100 || this.state.error) && _react.default.createElement("div", {
        ref: this.cancelUploadButton
      }, _react.default.createElement(_default3.default, {
        color: "danger",
        onClick: this.handleCancelUploadButtonClicked
      }, "Cancel upload")));
    }
  }, {
    key: "renderError",
    value: function renderError() {
      var _this$state2 = this.state,
          uploadState = _this$state2.uploadState,
          error = _this$state2.error;

      if (!error) {
        return null;
      }

      if (uploadState !== null) {
        return null;
      }

      var message = this.state.error.message;

      if (message === 'Invalid credentials') {
        message = _react.default.createElement("div", null, _react.default.createElement("h3", null, "Invalid credentials"), _react.default.createElement("p", null, "You need to check your Mux access token and secret key.", _react.default.createElement(_default3.default, {
          color: "primary",
          onClick: this.handleSetupButtonClicked,
          kind: "simple"
        }, "Run setup")));
      }

      return _react.default.createElement(_default4.default, {
        title: "Upload failed",
        color: "danger",
        useOverlay: true,
        onClose: this.handleErrorClose,
        onEscape: this.handleErrorClose,
        onClickOutside: this.handleErrorClose
      }, _react.default.createElement(_content.default, {
        size: "small"
      }, message));
    }
  }, {
    key: "renderButtons",
    value: function renderButtons() {
      if (this.state.uploadState === null && this.props.buttons) {
        return _react.default.createElement(_buttonCollection.default, null, _react.default.createElement(_button.default, {
          inverted: true,
          icon: _uploadIcon.default,
          onSelect: this.handleUploadFiles,
          accept: 'video/*'
        }, "Upload"), this.props.buttons);
      }

      return null;
    }
  }, {
    key: "renderChildren",
    value: function renderChildren() {
      if (this.state.uploadState !== null) {
        return null;
      }

      return this.props.children;
    }
  }, {
    key: "render",
    value: function render() {
      return _react.default.createElement("div", {
        className: _Uploader.default.root,
        tabIndex: 0,
        onBlur: this.props.onBlur,
        onFocus: this.props.onFocus,
        onDrop: this.handleDrop,
        onPaste: this.handlePaste,
        onKeyDown: this.handleKeyDown,
        onDragOver: this.handleDragOver,
        onDragLeave: this.handleDragLeave,
        onDragEnter: this.handleDragEnter,
        ref: this.container
      }, _react.default.createElement("input", {
        ref: this.hiddenTextField,
        className: _Uploader.default.hiddenTextField,
        type: "text",
        onPaste: this.handlePaste
      }), this.renderError(), this.renderUploadProgress(), this.renderUploadPlaceHolder(), this.renderChildren(), this.renderButtons());
    }
  }]);

  return MuxVideoInputUploader;
}(_react.Component);

MuxVideoInputUploader.propTypes = propTypes;
var _default = MuxVideoInputUploader;
exports.default = _default;
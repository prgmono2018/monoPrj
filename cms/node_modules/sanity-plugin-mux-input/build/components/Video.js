"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _hls = _interopRequireDefault(require("hls.js"));

var _bar = _interopRequireDefault(require("part:@sanity/components/progress/bar"));

var _assets = require("../actions/assets");

var _getPosterSrc = _interopRequireDefault(require("../util/getPosterSrc"));

var _Video = _interopRequireDefault(require("./Video.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var NOOP = function NOOP() {};

var propTypes = {
  assetDocument: _propTypes.default.object.isRequired,
  autoload: _propTypes.default.bool
};

var MuxVideo =
/*#__PURE__*/
function (_Component) {
  _inherits(MuxVideo, _Component);

  function MuxVideo() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, MuxVideo);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MuxVideo)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
      posterUrl: null,
      source: null,
      isLoading: true,
      error: null,
      isDeletedOnMux: false
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "videoContainer", _react.default.createRef());

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "hls", null);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleVideoClick", function (event) {
      _this.setState({
        showControls: true
      });

      _this.hls.startLoad(0);

      if (_this.props.onReady) {
        _this.props.onReady();
      }
    });

    return _this;
  }

  _createClass(MuxVideo, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.video = _react.default.createRef();
      this.setState(MuxVideo.getDerivedStateFromProps(this.props));
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      if (this.state.source !== null && this.video.current && !this.video.current.src) {
        this.setState({
          error: null
        });
        this.attachVideo();
      }

      if (this.state.source !== null && this.state.source !== prevState.source) {
        this.setState({
          error: null,
          showControls: false
        });

        if (this.hls) {
          this.hls.destroy();
        }

        this.attachVideo();
      }
    }
  }, {
    key: "getVideoElement",
    value: function getVideoElement() {
      return this.video && this.video.current;
    }
  }, {
    key: "attachVideo",
    value: function attachVideo() {
      var _this2 = this;

      var _this$props = this.props,
          assetDocument = _this$props.assetDocument,
          autoload = _this$props.autoload;

      if (_hls.default.isSupported()) {
        this.hls = new _hls.default({
          autoStartLoad: autoload
        });
        this.hls.loadSource(this.state.source);
        this.hls.attachMedia(this.video.current);
        this.hls.on(_hls.default.Events.MANIFEST_PARSED, function () {
          if (_this2.videoContainer.current) {
            _this2.videoContainer.current.style.display = 'block';
          }

          if (_this2.props.onReady) {
            _this2.props.onReady();
          }
        });
        this.hls.on(_hls.default.Events.ERROR, function (event, data) {
          switch (data.type) {
            case _hls.default.ErrorTypes.NETWORK_ERROR:
              _this2.videoContainer.current.style.display = 'none';

              _this2.setState({
                error: data
              });

              (0, _assets.getAsset)(assetDocument.assetId).then(function (response) {
                _this2.setState({
                  isDeletedOnMux: false
                });
              }).catch(function (err) {
                if (err.message.match(/404/)) {
                  _this2.setState({
                    isDeletedOnMux: true
                  });

                  return;
                }

                console.error(data, err); // eslint-disable-line no-console
              });
              break;

            default:
              console.error(data);
            // eslint-disable-line no-console
          }
        });
      } else if (this.video.current.canPlayType('application/vnd.apple.mpegurl')) {
        this.video.current.src = this.state.source;
        this.video.current.addEventListener('loadedmetadata', function () {
          _this2.hls.loadSource(_this2.state.source);

          _this2.hls.attachMedia(_this2.video.current);
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state = this.state,
          posterUrl = _this$state.posterUrl,
          isLoading = _this$state.isLoading,
          error = _this$state.error;
      var _this$props2 = this.props,
          assetDocument = _this$props2.assetDocument,
          autoload = _this$props2.autoload;

      if (!assetDocument || !assetDocument.status) {
        return null;
      }

      if (isLoading) {
        return _react.default.createElement("div", {
          className: _Video.default.progressBar
        }, _react.default.createElement(_bar.default, {
          percent: 100,
          text: "Waiting for MUX to complete the file",
          isInProgress: true,
          showPercent: true,
          animation: true,
          color: "primary"
        }));
      }

      var showControls = autoload || this.state.showControls;
      return _react.default.createElement("div", null, _react.default.createElement("div", {
        ref: this.videoContainer,
        className: _Video.default.videoContainer
      }, _react.default.createElement("video", {
        className: _Video.default.root,
        onClick: autoload ? NOOP : this.handleVideoClick,
        controls: showControls,
        ref: this.video,
        poster: posterUrl
      })), error && _react.default.createElement("div", {
        className: [_Video.default.videoContainer, _Video.default.videoError].join(' ')
      }, _react.default.createElement("p", null, "There was an error loading this video (", error.type, ")."), this.state.isDeletedOnMux && _react.default.createElement("p", null, _react.default.createElement("strong", null, "The video is deleted on MUX.com"))));
    }
  }], [{
    key: "getDerivedStateFromProps",
    // eslint-disable-next-line complexity
    value: function getDerivedStateFromProps(nextProps) {
      var source = null;
      var posterUrl = null;
      var isLoading = true;
      var assetDocument = nextProps.assetDocument;

      if (assetDocument && assetDocument.status === 'preparing') {
        isLoading = 'MUX is processing the video';
      }

      if (assetDocument && assetDocument.status === 'ready') {
        isLoading = false;
      }

      if (assetDocument && assetDocument.playbackId) {
        source = "https://stream.mux.com/".concat(assetDocument.playbackId, ".m3u8");
        posterUrl = (0, _getPosterSrc.default)(assetDocument.playbackId, {
          time: assetDocument.thumbTime || 1,
          fitMode: 'preserve'
        });
      }

      if (assetDocument && typeof assetDocument.status === 'undefined') {
        isLoading = false;
      }

      return {
        isLoading: isLoading,
        source: source,
        posterUrl: posterUrl
      };
    }
  }]);

  return MuxVideo;
}(_react.Component);

_defineProperty(MuxVideo, "defaultProps", {
  autoload: true
});

MuxVideo.propTypes = propTypes;
var _default = MuxVideo;
exports.default = _default;
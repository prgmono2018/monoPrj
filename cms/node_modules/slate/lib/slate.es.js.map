{"version":3,"file":"slate.es.js","sources":["../src/utils/key-utils.js","../src/models/data.js","../src/models/document.js","../src/models/inline.js","../src/models/mark.js","../src/models/leaf.js","../src/utils/memoize.js","../src/models/text.js","../src/models/node.js","../src/models/block.js","../src/utils/path-utils.js","../src/models/point.js","../src/models/decoration.js","../src/utils/is-object.js","../src/models/range.js","../src/models/selection.js","../src/models/value.js","../src/operations/apply.js","../src/operations/invert.js","../src/models/operation.js","../src/models/change.js","../src/plugins/commands.js","../src/utils/text-utils.js","../src/commands/at-range.js","../src/commands/by-path.js","../src/commands/on-history.js","../src/commands/on-selection.js","../src/commands/on-value.js","../src/plugins/queries.js","../src/utils/slate-error.js","../src/plugins/schema.js","../src/commands/with-intent.js","../src/plugins/core.js","../src/controllers/editor.js","../src/utils/mixin.js","../src/interfaces/object.js","../src/interfaces/model.js","../src/interfaces/node.js","../src/interfaces/element.js","../src/interfaces/range.js","../src/index.js"],"sourcesContent":["/**\n * An auto-incrementing index for generating keys.\n *\n * @type {Number}\n */\n\nlet n\n\n/**\n * The global key generating function.\n *\n * @type {Function}\n */\n\nlet generate\n\n/**\n * Create a key, using a provided key if available.\n *\n * @param {String|Void} key\n * @return {String}\n */\n\nfunction create(key) {\n  if (key == null) {\n    return generate()\n  }\n\n  if (typeof key === 'string') {\n    return key\n  }\n\n  throw new Error(`Keys must be strings, but you passed: ${key}`)\n}\n\n/**\n * Set a different unique ID generating `function`.\n *\n * @param {Function} func\n */\n\nfunction setGenerator(func) {\n  generate = func\n}\n\n/**\n * Reset the key generating function to its initial state.\n */\n\nfunction resetGenerator() {\n  n = 0\n  generate = () => `${n++}`\n}\n\n/**\n * Set the initial state.\n */\n\nresetGenerator()\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default {\n  create,\n  setGenerator,\n  resetGenerator,\n}\n","import isPlainObject from 'is-plain-object'\nimport { Map } from 'immutable'\n\n/**\n * Data.\n *\n * This isn't an immutable record, it's just a thin wrapper around `Map` so that\n * we can allow for more convenient creation.\n *\n * @type {Object}\n */\n\nclass Data {\n  /**\n   * Create a new `Data` with `attrs`.\n   *\n   * @param {Object|Data|Map} attrs\n   * @return {Data} data\n   */\n\n  static create(attrs = {}) {\n    if (Map.isMap(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Data.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Data.create\\` only accepts objects or maps, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Data` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Data}\n   */\n\n  static fromJSON(object) {\n    return new Map(object)\n  }\n\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS = Data.fromJSON\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Data\n","import isPlainObject from 'is-plain-object'\nimport { List, Map, Record } from 'immutable'\n\nimport KeyUtils from '../utils/key-utils'\nimport Node from './node'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: undefined,\n  key: undefined,\n  nodes: undefined,\n}\n\n/**\n * Document.\n *\n * @type {Document}\n */\n\nclass Document extends Record(DEFAULTS) {\n  /**\n   * Create a new `Document` with `attrs`.\n   *\n   * @param {Object|Array|List|Text} attrs\n   * @return {Document}\n   */\n\n  static create(attrs = {}) {\n    if (Document.isDocument(attrs)) {\n      return attrs\n    }\n\n    if (List.isList(attrs) || Array.isArray(attrs)) {\n      attrs = { nodes: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Document.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Document.create\\` only accepts objects, arrays, lists or documents, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Document` from a JSON `object`.\n   *\n   * @param {Object|Document} object\n   * @return {Document}\n   */\n\n  static fromJSON(object) {\n    if (Document.isDocument(object)) {\n      return object\n    }\n\n    const { data = {}, key = KeyUtils.create(), nodes = [] } = object\n\n    const document = new Document({\n      key,\n      data: new Map(data),\n      nodes: Node.createList(nodes),\n    })\n\n    return document\n  }\n\n  /**\n   * Return a JSON representation of the document.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      data: this.data.toJSON(),\n      nodes: this.nodes.toArray().map(n => n.toJSON(options)),\n    }\n\n    if (options.preserveKeys) {\n      object.key = this.key\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Document}\n */\n\nexport default Document\n","import isPlainObject from 'is-plain-object'\nimport { List, Map, Record } from 'immutable'\n\nimport KeyUtils from '../utils/key-utils'\nimport Node from './node'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: undefined,\n  key: undefined,\n  nodes: undefined,\n  type: undefined,\n}\n\n/**\n * Inline.\n *\n * @type {Inline}\n */\n\nclass Inline extends Record(DEFAULTS) {\n  /**\n   * Create a new `Inline` with `attrs`.\n   *\n   * @param {Object|String|Inline} attrs\n   * @return {Inline}\n   */\n\n  static create(attrs = {}) {\n    if (Inline.isInline(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs == 'string') {\n      attrs = { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Inline.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Inline.create\\` only accepts objects, strings or inlines, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Inlines` from an array.\n   *\n   * @param {Array<Inline|Object>|List<Inline|Object>} elements\n   * @return {List<Inline>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Inline.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Inline.createList\\` only accepts arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a `Inline` from a JSON `object`.\n   *\n   * @param {Object|Inline} object\n   * @return {Inline}\n   */\n\n  static fromJSON(object) {\n    if (Inline.isInline(object)) {\n      return object\n    }\n\n    const { data = {}, key = KeyUtils.create(), nodes = [], type } = object\n\n    if (typeof type != 'string') {\n      throw new Error('`Inline.fromJS` requires a `type` string.')\n    }\n\n    const inline = new Inline({\n      key,\n      type,\n      data: new Map(data),\n      nodes: Node.createList(nodes),\n    })\n\n    return inline\n  }\n\n  /**\n   * Check if `any` is a list of inlines.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isInlineList(any) {\n    return List.isList(any) && any.every(item => Inline.isInline(item))\n  }\n\n  /**\n   * Return a JSON representation of the inline.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      type: this.type,\n      data: this.data.toJSON(),\n      nodes: this.nodes.toArray().map(n => n.toJSON(options)),\n    }\n\n    if (options.preserveKeys) {\n      object.key = this.key\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Inline}\n */\n\nexport default Inline\n","import isPlainObject from 'is-plain-object'\nimport { Map, Record, Set } from 'immutable'\n\nimport Data from './data'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: undefined,\n  type: undefined,\n}\n\n/**\n * Mark.\n *\n * @type {Mark}\n */\n\nclass Mark extends Record(DEFAULTS) {\n  /**\n   * Create a new `Mark` with `attrs`.\n   *\n   * @param {Object|Mark} attrs\n   * @return {Mark}\n   */\n\n  static create(attrs = {}) {\n    if (Mark.isMark(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs == 'string') {\n      attrs = { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Mark.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Mark.create\\` only accepts objects, strings or marks, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a set of marks.\n   *\n   * @param {Array<Object|Mark>} elements\n   * @return {Set<Mark>}\n   */\n\n  static createSet(elements) {\n    if (Set.isSet(elements) || Array.isArray(elements)) {\n      const marks = new Set(elements.map(Mark.create))\n      return marks\n    }\n\n    if (elements == null) {\n      return Set()\n    }\n\n    throw new Error(\n      `\\`Mark.createSet\\` only accepts sets, arrays or null, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable mark properties from `attrs`.\n   *\n   * @param {Object|String|Mark} attrs\n   * @return {Object}\n   */\n\n  static createProperties(attrs = {}) {\n    if (Mark.isMark(attrs)) {\n      return {\n        data: attrs.data,\n        type: attrs.type,\n      }\n    }\n\n    if (typeof attrs == 'string') {\n      return { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      const props = {}\n      if ('type' in attrs) props.type = attrs.type\n      if ('data' in attrs) props.data = Data.create(attrs.data)\n      return props\n    }\n\n    throw new Error(\n      `\\`Mark.createProperties\\` only accepts objects, strings or marks, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Mark` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Mark}\n   */\n\n  static fromJSON(object) {\n    const { data = {}, type } = object\n\n    if (typeof type != 'string') {\n      throw new Error('`Mark.fromJS` requires a `type` string.')\n    }\n\n    const mark = new Mark({\n      type,\n      data: new Map(data),\n    })\n\n    return mark\n  }\n\n  /**\n   * Check if `any` is a set of marks.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isMarkSet(any) {\n    return Set.isSet(any) && any.every(item => Mark.isMark(item))\n  }\n\n  /**\n   * Return a JSON representation of the mark.\n   *\n   * @return {Object}\n   */\n\n  toJSON() {\n    const object = {\n      object: this.object,\n      type: this.type,\n      data: this.data.toJSON(),\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Mark}\n */\n\nexport default Mark\n","import isPlainObject from 'is-plain-object'\nimport { List, Record, Set } from 'immutable'\n\nimport Mark from './mark'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  marks: undefined,\n  text: undefined,\n}\n\n/**\n * Leaf.\n *\n * @type {Leaf}\n */\n\nclass Leaf extends Record(DEFAULTS) {\n  /**\n   * Create a new `Leaf` with `attrs`.\n   *\n   * @param {Object|Leaf} attrs\n   * @return {Leaf}\n   */\n\n  static create(attrs = {}) {\n    if (Leaf.isLeaf(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs == 'string') {\n      attrs = { text: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Leaf.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Leaf.create\\` only accepts objects, strings or leaves, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a valid List of `Leaf` from `leaves`\n   *\n   * @param {List<Leaf>} leaves\n   * @return {List<Leaf>}\n   */\n\n  static createLeaves(leaves) {\n    if (leaves.size <= 1) return leaves\n\n    let invalid = false\n\n    // TODO: we can make this faster with [List] and then flatten\n    const result = List().withMutations(cache => {\n      // Search from the leaves left end to find invalid node;\n      leaves.findLast((leaf, index) => {\n        const firstLeaf = cache.first()\n\n        // If the first leaf of cache exist, check whether the first leaf is connectable with the current leaf\n        if (firstLeaf) {\n          // If marks equals, then the two leaves can be connected\n          if (firstLeaf.marks.equals(leaf.marks)) {\n            invalid = true\n            cache.set(0, firstLeaf.set('text', `${leaf.text}${firstLeaf.text}`))\n            return\n          }\n\n          // If the cached leaf is empty, drop the empty leaf with the upcoming leaf\n          if (firstLeaf.text === '') {\n            invalid = true\n            cache.set(0, leaf)\n            return\n          }\n\n          // If the current leaf is empty, drop the leaf\n          if (leaf.text === '') {\n            invalid = true\n            return\n          }\n        }\n\n        cache.unshift(leaf)\n      })\n    })\n\n    if (!invalid) return leaves\n    return result\n  }\n\n  /**\n   * Split a list of leaves to two lists; if the leaves are valid leaves, the returned leaves are also valid\n   * Corner Cases:\n   *   1. if offset is smaller than 0, then return [List(), leaves]\n   *   2. if offset is bigger than the text length, then return [leaves, List()]\n   *\n   * @param {List<Leaf> leaves\n   * @return {Array<List<Leaf>>}\n   */\n\n  static splitLeaves(leaves, offset) {\n    if (offset < 0) return [List(), leaves]\n\n    if (leaves.size === 0) {\n      return [List(), List()]\n    }\n\n    let endOffset = 0\n    let index = -1\n    let left, right\n\n    leaves.find(leaf => {\n      index++\n      const startOffset = endOffset\n      const { text } = leaf\n      endOffset += text.length\n\n      if (endOffset < offset) return false\n      if (startOffset > offset) return false\n\n      const length = offset - startOffset\n      left = leaf.set('text', text.slice(0, length))\n      right = leaf.set('text', text.slice(length))\n      return true\n    })\n\n    if (!left) return [leaves, List()]\n\n    if (left.text === '') {\n      if (index === 0) {\n        return [List.of(left), leaves]\n      }\n\n      return [leaves.take(index), leaves.skip(index)]\n    }\n\n    if (right.text === '') {\n      if (index === leaves.size - 1) {\n        return [leaves, List.of(right)]\n      }\n\n      return [leaves.take(index + 1), leaves.skip(index + 1)]\n    }\n\n    return [\n      leaves.take(index).push(left),\n      leaves.skip(index + 1).unshift(right),\n    ]\n  }\n\n  /**\n   * Create a `Leaf` list from `attrs`.\n   *\n   * @param {Array<Leaf|Object>|List<Leaf|Object>} attrs\n   * @return {List<Leaf>}\n   */\n\n  static createList(attrs = []) {\n    if (List.isList(attrs) || Array.isArray(attrs)) {\n      const list = new List(attrs.map(Leaf.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Leaf.createList\\` only accepts arrays or lists, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Leaf` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Leaf}\n   */\n\n  static fromJSON(object) {\n    const { text = '', marks = [] } = object\n\n    const leaf = new Leaf({\n      text,\n      marks: Set(marks.map(Mark.fromJSON)),\n    })\n\n    return leaf\n  }\n\n  /**\n   * Check if `any` is a list of leaves.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isLeafList(any) {\n    return List.isList(any) && any.every(item => Leaf.isLeaf(item))\n  }\n\n  /**\n   * Update a `mark` at leaf, replace with newMark\n   *\n   * @param {Mark} mark\n   * @param {Mark} newMark\n   * @returns {Leaf}\n   */\n\n  updateMark(mark, newMark) {\n    const { marks } = this\n    if (newMark.equals(mark)) return this\n    if (!marks.has(mark)) return this\n    const newMarks = marks.withMutations(collection => {\n      collection.remove(mark).add(newMark)\n    })\n    return this.set('marks', newMarks)\n  }\n\n  /**\n   * Add a `mark` to the leaf.\n   *\n   * @param {Mark} mark\n   * @returns {Text}\n   */\n\n  addMark(mark) {\n    const { marks } = this\n    return this.set('marks', marks.add(mark))\n  }\n\n  /**\n   * Add a `set` of marks to the leaf.\n   *\n   * @param {Set<Mark>} set\n   * @returns {Text}\n   */\n\n  addMarks(set) {\n    const { marks } = this\n    return this.set('marks', marks.union(set))\n  }\n\n  /**\n   * Insert a text `string` into the leaf at `offset`.\n   *\n   * @param {Number} offset\n   * @param {String} string\n   * @return {Leaf}\n   */\n\n  insertText(offset, string) {\n    const { text } = this\n    const next = text.slice(0, offset) + string + text.slice(offset)\n    return this.set('text', next)\n  }\n\n  /**\n   * Remove a `mark` from the leaf.\n   *\n   * @param {Mark} mark\n   * @returns {Text}\n   */\n\n  removeMark(mark) {\n    const { marks } = this\n    return this.set('marks', marks.remove(mark))\n  }\n\n  /**\n   * Return a JSON representation of the leaf.\n   *\n   * @return {Object}\n   */\n\n  toJSON() {\n    const object = {\n      object: this.object,\n      text: this.text,\n      marks: this.marks.toArray().map(m => m.toJSON()),\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Leaf}\n */\n\nexport default Leaf\n","/* global WeakMap, Map, Symbol */\n\n/**\n * GLOBAL: True if memoization should is enabled.\n *\n * @type {Boolean}\n */\n\nlet ENABLED = true\n\n/**\n * The leaf node of a cache tree. Used to support variable argument length. A\n * unique object, so that native Maps will key it by reference.\n *\n * @type {Symbol}\n */\n\nconst LEAF = Symbol('LEAF')\n\n/**\n * The node of a cache tree for a WeakMap to store cache visited by objects\n *\n * @type {Symbol}\n */\n\nconst STORE_KEY = Symbol('STORE_KEY')\n\n/**\n * Values to represent a memoized undefined and null value. Allows efficient value\n * retrieval using Map.get only.\n *\n * @type {Symbol}\n */\n\nconst UNDEFINED = Symbol('undefined')\nconst NULL = Symbol('null')\n\n/**\n * Default value for unset keys in native Maps\n *\n * @type {Undefined}\n */\n\nconst UNSET = undefined\n\n/**\n * Global Store for all cached values\n *\n * @type {WeakMap}\n */\n\nlet memoizeStore = new WeakMap()\n\n/**\n * Memoize all of the `properties` on a `object`.\n *\n * @param {Object} object\n * @param {Array} properties\n * @return {Record}\n */\n\nfunction memoize(object, properties) {\n  for (const property of properties) {\n    const original = object[property]\n\n    if (!original) {\n      throw new Error(`Object does not have a property named \"${property}\".`)\n    }\n\n    object[property] = function(...args) {\n      // If memoization is disabled, call into the original method.\n      if (!ENABLED) return original.apply(this, args)\n\n      if (!memoizeStore.has(this)) {\n        memoizeStore.set(this, {\n          noArgs: {},\n          hasArgs: {},\n        })\n      }\n\n      const { noArgs, hasArgs } = memoizeStore.get(this)\n\n      const takesArguments = args.length !== 0\n\n      let cachedValue\n      let keys\n\n      if (takesArguments) {\n        keys = [property, ...args]\n        cachedValue = getIn(hasArgs, keys)\n      } else {\n        cachedValue = noArgs[property]\n      }\n\n      // If we've got a result already, return it.\n      if (cachedValue !== UNSET) {\n        return cachedValue === UNDEFINED ? undefined : cachedValue\n      }\n\n      // Otherwise calculate what it should be once and cache it.\n      const value = original.apply(this, args)\n      const v = value === undefined ? UNDEFINED : value\n\n      if (takesArguments) {\n        setIn(hasArgs, keys, v)\n      } else {\n        noArgs[property] = v\n      }\n\n      return value\n    }\n  }\n}\n\n/**\n * Get a value at a key path in a tree of Map.\n *\n * If not set, returns UNSET.\n * If the set value is undefined, returns UNDEFINED.\n *\n * @param {Map} map\n * @param {Array} keys\n * @return {Any|UNSET|UNDEFINED}\n */\n\nfunction getIn(map, keys) {\n  for (let key of keys) {\n    if (key === undefined) {\n      key = UNDEFINED\n    } else if (key === null) {\n      key = NULL\n    }\n\n    if (typeof key === 'object') {\n      map = map[STORE_KEY] && map[STORE_KEY].get(key)\n    } else {\n      map = map[key]\n    }\n\n    if (map === UNSET) return UNSET\n  }\n\n  return map[LEAF]\n}\n\n/**\n * Set a value at a key path in a tree of Map, creating Maps on the go.\n *\n * @param {Map} map\n * @param {Array} keys\n * @param {Any} value\n * @return {Map}\n */\n\nfunction setIn(map, keys, value) {\n  let child = map\n\n  for (let key of keys) {\n    if (key === undefined) {\n      key = UNDEFINED\n    } else if (key === null) {\n      key = NULL\n    }\n\n    if (typeof key !== 'object') {\n      if (!child[key]) {\n        child[key] = {}\n      }\n\n      child = child[key]\n      continue\n    }\n\n    if (!child[STORE_KEY]) {\n      child[STORE_KEY] = new WeakMap()\n    }\n\n    if (!child[STORE_KEY].has(key)) {\n      const newChild = {}\n      child[STORE_KEY].set(key, newChild)\n      child = newChild\n      continue\n    }\n\n    child = child[STORE_KEY].get(key)\n  }\n\n  // The whole path has been created, so set the value to the bottom most map.\n  child[LEAF] = value\n  return map\n}\n\n/**\n * In DEV mode, clears the previously memoized values, globally.\n *\n * @return {Void}\n */\n\nfunction resetMemoization() {\n  memoizeStore = new WeakMap()\n}\n\n/**\n * In DEV mode, enable or disable the use of memoize values, globally.\n *\n * @param {Boolean} enabled\n * @return {Void}\n */\n\nfunction useMemoization(enabled) {\n  ENABLED = enabled\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default memoize\nexport { resetMemoization, useMemoization }\n","import isPlainObject from 'is-plain-object'\nimport warning from 'tiny-warning'\nimport { List, OrderedSet, Record, Set } from 'immutable'\n\nimport Leaf from './leaf'\nimport KeyUtils from '../utils/key-utils'\nimport memoize from '../utils/memoize'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  leaves: undefined,\n  key: undefined,\n}\n\n/**\n * Text.\n *\n * @type {Text}\n */\n\nclass Text extends Record(DEFAULTS) {\n  /**\n   * Create a new `Text` with `attrs`.\n   *\n   * @param {Object|Array|List|String|Text} attrs\n   * @return {Text}\n   */\n\n  static create(attrs = '') {\n    if (Text.isText(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs == 'string') {\n      attrs = { leaves: [{ text: attrs }] }\n    }\n\n    if (isPlainObject(attrs)) {\n      if (attrs.text) {\n        const { text, marks, key } = attrs\n        attrs = { key, leaves: [{ text, marks }] }\n      }\n\n      return Text.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Text.create\\` only accepts objects, arrays, strings or texts, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Texts` from `elements`.\n   *\n   * @param {Array<Text|Object>|List<Text|Object>} elements\n   * @return {List<Text>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Text.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Text.createList\\` only accepts arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a `Text` from a JSON `object`.\n   *\n   * @param {Object|Text} object\n   * @return {Text}\n   */\n\n  static fromJSON(object) {\n    if (Text.isText(object)) {\n      return object\n    }\n\n    const { key = KeyUtils.create() } = object\n    let { leaves } = object\n\n    if (!leaves) {\n      if (object.ranges) {\n        warning(\n          false,\n          'As of slate@0.27.0, the `ranges` property of Slate objects has been renamed to `leaves`.'\n        )\n\n        leaves = object.ranges\n      } else {\n        leaves = List()\n      }\n    }\n\n    if (Array.isArray(leaves)) {\n      leaves = List(leaves.map(x => Leaf.create(x)))\n    } else if (List.isList(leaves)) {\n      leaves = leaves.map(x => Leaf.create(x))\n    } else {\n      throw new Error('leaves must be either Array or Immutable.List')\n    }\n\n    if (leaves.size === 0) {\n      leaves = leaves.push(Leaf.create())\n    }\n\n    const node = new Text({\n      leaves: Leaf.createLeaves(leaves),\n      key,\n    })\n\n    return node\n  }\n\n  /**\n   * Check if `any` is a list of texts.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isTextList(any) {\n    return List.isList(any) && any.every(item => Text.isText(item))\n  }\n\n  /**\n   * Find the 'first' leaf at offset; By 'first' the alorighthm prefers `endOffset === offset` than `startOffset === offset`\n   * Corner Cases:\n   *   1. if offset is negative, return the first leaf;\n   *   2. if offset is larger than text length, the leaf is null, startOffset, endOffset and index is of the last leaf\n   *\n   * @param {number}\n   * @returns {Object}\n   *   @property {number} startOffset\n   *   @property {number} endOffset\n   *   @property {number} index\n   *   @property {Leaf} leaf\n   */\n\n  searchLeafAtOffset(offset) {\n    let endOffset = 0\n    let startOffset = 0\n    let index = -1\n\n    const leaf = this.leaves.find(l => {\n      index++\n      startOffset = endOffset\n      endOffset = startOffset + l.text.length\n      return endOffset >= offset\n    })\n\n    return {\n      leaf,\n      endOffset,\n      index,\n      startOffset,\n    }\n  }\n\n  /**\n   * Add a `mark` at `index` and `length`.\n   *\n   * @param {Number} index\n   * @param {Number} length\n   * @param {Mark} mark\n   * @return {Text}\n   */\n\n  addMark(index, length, mark) {\n    const marks = Set.of(mark)\n    return this.addMarks(index, length, marks)\n  }\n\n  /**\n   * Add a `set` of marks at `index` and `length`.\n   * Corner Cases:\n   *   1. If empty text, and if length === 0 and index === 0, will make sure the text contain an empty leaf with the given mark.\n   *\n   * @param {Number} index\n   * @param {Number} length\n   * @param {Set<Mark>} set\n   * @return {Text}\n   */\n\n  addMarks(index, length, set) {\n    if (this.text === '' && length === 0 && index === 0) {\n      const { leaves } = this\n      const first = leaves.first()\n\n      if (!first) {\n        return this.set(\n          'leaves',\n          List.of(Leaf.fromJSON({ text: '', marks: set }))\n        )\n      }\n\n      const newFirst = first.addMarks(set)\n      if (newFirst === first) return this\n      return this.set('leaves', List.of(newFirst))\n    }\n\n    if (this.text === '') return this\n    if (length === 0) return this\n    if (index >= this.text.length) return this\n\n    const [before, bundle] = Leaf.splitLeaves(this.leaves, index)\n    const [middle, after] = Leaf.splitLeaves(bundle, length)\n    const leaves = before.concat(middle.map(x => x.addMarks(set)), after)\n    return this.setLeaves(leaves)\n  }\n\n  /**\n   * Derive the leaves for a list of `decorations`.\n   *\n   * @param {List} decorations (optional)\n   * @return {List<Leaf>}\n   */\n\n  getLeaves(decorations) {\n    let { leaves } = this\n\n    // PERF: We can exit early without decorations.\n    if (!decorations || decorations.size === 0) return leaves\n\n    // HACK: We shouldn't need this, because text nodes should never be in a\n    // position of not having any leaves...\n    if (leaves.size === 0) {\n      const marks = decorations.map(d => d.mark)\n      const leaf = Leaf.create({ marks })\n      return List([leaf])\n    }\n\n    // HACK: this shouldn't be necessary, because the loop below should handle\n    // the `0` case without failures. It may already even, not sure.\n    if (this.text.length === 0) {\n      const marks = decorations.map(d => d.mark)\n      const leaf = Leaf.create({ marks })\n      return List([leaf])\n    }\n\n    const { key, text } = this\n\n    decorations.forEach(dec => {\n      const { start, end, mark } = dec\n      const hasStart = start.key == key\n      const hasEnd = end.key == key\n\n      if (hasStart && hasEnd) {\n        const index = hasStart ? start.offset : 0\n        const length = hasEnd ? end.offset - index : text.length - index\n\n        if (length < 1) return\n        if (index >= text.length) return\n\n        if (index !== 0 || length < text.length) {\n          const [before, bundle] = Leaf.splitLeaves(leaves, index)\n          const [middle, after] = Leaf.splitLeaves(bundle, length)\n          leaves = before.concat(middle.map(x => x.addMark(mark)), after)\n          return\n        }\n      }\n\n      leaves = leaves.map(x => x.addMark(mark))\n    })\n\n    if (leaves === this.leaves) return leaves\n    return Leaf.createLeaves(leaves)\n  }\n\n  /**\n   * Get all of the active marks on between two offsets\n   * Corner Cases:\n   *   1. if startOffset is equal or bigger than endOffset, then return Set();\n   *   2. If no text is selected between start and end, then return Set()\n   *\n   * @return {Set<Mark>}\n   */\n\n  getActiveMarksBetweenOffsets(startOffset, endOffset) {\n    if (startOffset <= 0 && endOffset >= this.text.length) {\n      return this.getActiveMarks()\n    }\n\n    if (startOffset >= endOffset) return Set()\n    // For empty text in a paragraph, use getActiveMarks;\n    if (this.text === '') return this.getActiveMarks()\n\n    let result = null\n    let leafEnd = 0\n\n    this.leaves.forEach(leaf => {\n      const leafStart = leafEnd\n      leafEnd = leafStart + leaf.text.length\n\n      if (leafEnd <= startOffset) return\n      if (leafStart >= endOffset) return false\n\n      if (!result) {\n        result = leaf.marks\n        return\n      }\n\n      result = result.intersect(leaf.marks)\n      if (result && result.size === 0) return false\n      return false\n    })\n\n    return result || Set()\n  }\n\n  /**\n   * Get all of the active marks on the text\n   *\n   * @return {Set<Mark>}\n   */\n\n  getActiveMarks() {\n    if (this.leaves.size === 0) return Set()\n\n    const result = this.leaves.first().marks\n    if (result.size === 0) return result\n\n    return result.toOrderedSet().withMutations(x => {\n      this.leaves.forEach(c => {\n        x.intersect(c.marks)\n        if (x.size === 0) return false\n      })\n    })\n  }\n\n  /**\n   * Get all of the marks on between two offsets\n   * Corner Cases:\n   *   1. if startOffset is equal or bigger than endOffset, then return Set();\n   *   2. If no text is selected between start and end, then return Set()\n   *\n   * @return {OrderedSet<Mark>}\n   */\n\n  getMarksBetweenOffsets(startOffset, endOffset) {\n    if (startOffset <= 0 && endOffset >= this.text.length) {\n      return this.getMarks()\n    }\n\n    if (startOffset >= endOffset) return Set()\n    // For empty text in a paragraph, use getActiveMarks;\n    if (this.text === '') return this.getActiveMarks()\n\n    let result = null\n    let leafEnd = 0\n\n    this.leaves.forEach(leaf => {\n      const leafStart = leafEnd\n      leafEnd = leafStart + leaf.text.length\n\n      if (leafEnd <= startOffset) return\n      if (leafStart >= endOffset) return false\n\n      if (!result) {\n        result = leaf.marks\n        return\n      }\n\n      result = result.union(leaf.marks)\n    })\n\n    return result || Set()\n  }\n\n  /**\n   * Get all of the marks on the text.\n   *\n   * @return {OrderedSet<Mark>}\n   */\n\n  getMarks() {\n    const array = this.getMarksAsArray()\n    return new OrderedSet(array)\n  }\n\n  /**\n   * Get all of the marks on the text as an array\n   *\n   * @return {Array}\n   */\n\n  getMarksAsArray() {\n    if (this.leaves.size === 0) return []\n    const first = this.leaves.first().marks\n    if (this.leaves.size === 1) return first.toArray()\n\n    const result = []\n\n    this.leaves.forEach(leaf => {\n      result.push(leaf.marks.toArray())\n    })\n\n    return Array.prototype.concat.apply(first.toArray(), result)\n  }\n\n  /**\n   * Get the marks on the text at `index`.\n   * Corner Cases:\n   *   1. if no text is before the index, and index !== 0, then return Set()\n   *   2. (for insert after split node or mark at range) if index === 0, and text === '', then return the leaf.marks\n   *   3. if index === 0, text !== '', return Set()\n   *\n   *\n   * @param {Number} index\n   * @return {Set<Mark>}\n   */\n\n  getMarksAtIndex(index) {\n    const { leaf } = this.searchLeafAtOffset(index)\n    if (!leaf) return Set()\n    return leaf.marks\n  }\n\n  /**\n   * Insert `text` at `index`.\n   *\n   * @param {Numbder} offset\n   * @param {String} text\n   * @param {Set} marks (optional)\n   * @return {Text}\n   */\n\n  insertText(offset, text, marks) {\n    if (this.text === '') {\n      return this.set('leaves', List.of(Leaf.create({ text, marks })))\n    }\n\n    if (text.length === 0) return this\n    if (!marks) marks = Set()\n\n    const { startOffset, leaf, index } = this.searchLeafAtOffset(offset)\n    const delta = offset - startOffset\n    const beforeText = leaf.text.slice(0, delta)\n    const afterText = leaf.text.slice(delta)\n    const { leaves } = this\n\n    if (leaf.marks.equals(marks)) {\n      return this.set(\n        'leaves',\n        leaves.set(index, leaf.set('text', beforeText + text + afterText))\n      )\n    }\n\n    const nextLeaves = leaves.splice(\n      index,\n      1,\n      leaf.set('text', beforeText),\n      Leaf.create({ text, marks }),\n      leaf.set('text', afterText)\n    )\n\n    return this.setLeaves(nextLeaves)\n  }\n\n  /**\n   * Remove a `mark` at `index` and `length`.\n   *\n   * @param {Number} index\n   * @param {Number} length\n   * @param {Mark} mark\n   * @return {Text}\n   */\n\n  removeMark(index, length, mark) {\n    if (this.text === '' && index === 0 && length === 0) {\n      const first = this.leaves.first()\n      if (!first) return this\n      const newFirst = first.removeMark(mark)\n      if (newFirst === first) return this\n      return this.set('leaves', List.of(newFirst))\n    }\n\n    if (length <= 0) return this\n    if (index >= this.text.length) return this\n    const [before, bundle] = Leaf.splitLeaves(this.leaves, index)\n    const [middle, after] = Leaf.splitLeaves(bundle, length)\n    const leaves = before.concat(middle.map(x => x.removeMark(mark)), after)\n    return this.setLeaves(leaves)\n  }\n\n  /**\n   * Remove text from the text node at `start` for `length`.\n   *\n   * @param {Number} start\n   * @param {Number} length\n   * @return {Text}\n   */\n\n  removeText(start, length) {\n    if (length <= 0) return this\n    if (start >= this.text.length) return this\n\n    // PERF: For simple backspace, we can operate directly on the leaf\n    if (length === 1) {\n      const { leaf, index, startOffset } = this.searchLeafAtOffset(start + 1)\n      const offset = start - startOffset\n\n      if (leaf) {\n        if (leaf.text.length === 1) {\n          const leaves = this.leaves.remove(index)\n          return this.setLeaves(leaves)\n        }\n\n        const beforeText = leaf.text.slice(0, offset)\n        const afterText = leaf.text.slice(offset + length)\n        const text = beforeText + afterText\n\n        if (text.length > 0) {\n          return this.set(\n            'leaves',\n            this.leaves.set(index, leaf.set('text', text))\n          )\n        }\n      }\n    }\n\n    const [before, bundle] = Leaf.splitLeaves(this.leaves, start)\n    const after = Leaf.splitLeaves(bundle, length)[1]\n    const leaves = Leaf.createLeaves(before.concat(after))\n\n    if (leaves.size === 1) {\n      const first = leaves.first()\n\n      if (first.text === '') {\n        return this.set(\n          'leaves',\n          List.of(first.set('marks', this.getActiveMarks()))\n        )\n      }\n    }\n\n    return this.set('leaves', leaves)\n  }\n\n  /**\n   * Return a JSON representation of the text.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      leaves: this.getLeaves()\n        .toArray()\n        .map(r => r.toJSON()),\n    }\n\n    if (options.preserveKeys) {\n      object.key = this.key\n    }\n\n    return object\n  }\n\n  /**\n   * Update a `mark` at `index` and `length` with `properties`.\n   *\n   * @param {Number} index\n   * @param {Number} length\n   * @param {Mark} mark\n   * @param {Object} properties\n   * @return {Text}\n   */\n\n  updateMark(index, length, mark, properties) {\n    const newMark = mark.merge(properties)\n\n    if (this.text === '' && length === 0 && index === 0) {\n      const { leaves } = this\n      const first = leaves.first()\n      if (!first) return this\n      const newFirst = first.updateMark(mark, newMark)\n      if (newFirst === first) return this\n      return this.set('leaves', List.of(newFirst))\n    }\n\n    if (length <= 0) return this\n    if (index >= this.text.length) return this\n\n    const [before, bundle] = Leaf.splitLeaves(this.leaves, index)\n    const [middle, after] = Leaf.splitLeaves(bundle, length)\n\n    const leaves = before.concat(\n      middle.map(x => x.updateMark(mark, newMark)),\n      after\n    )\n\n    return this.setLeaves(leaves)\n  }\n\n  /**\n   * Split this text and return two different texts\n   * @param {Number} position\n   * @returns {Array<Text>}\n   */\n\n  splitText(offset) {\n    const splitted = Leaf.splitLeaves(this.leaves, offset)\n    const one = this.set('leaves', splitted[0])\n    const two = this.set('leaves', splitted[1]).regenerateKey()\n    return [one, two]\n  }\n\n  /**\n   * merge this text and another text at the end\n   * @param {Text} text\n   * @returns {Text}\n   */\n\n  mergeText(text) {\n    const leaves = this.leaves.concat(text.leaves)\n    return this.setLeaves(leaves)\n  }\n\n  /**\n   * Set leaves with normalized `leaves`\n   *\n   * @param {List} leaves\n   * @returns {Text}\n   */\n\n  setLeaves(leaves) {\n    leaves = Leaf.createLeaves(leaves)\n\n    if (leaves.size === 1) {\n      const first = leaves.first()\n\n      if (!first.marks || first.marks.size === 0) {\n        if (first.text === '') {\n          return this.set('leaves', List([Leaf.create()]))\n        }\n      }\n    }\n\n    if (leaves.size === 0) {\n      leaves = leaves.push(Leaf.create())\n    }\n\n    return this.set('leaves', leaves)\n  }\n}\n\n/**\n * Memoize read methods.\n */\n\nmemoize(Text.prototype, ['getActiveMarks', 'getMarks', 'getMarksAsArray'])\n\n/**\n * Export.\n *\n * @type {Text}\n */\n\nexport default Text\n","import isPlainObject from 'is-plain-object'\nimport warning from 'tiny-warning'\nimport { List } from 'immutable'\n\nimport Block from './block'\nimport Data from './data'\nimport Document from './document'\nimport Inline from './inline'\nimport Text from './text'\n\n/**\n * A pseudo-model that is used for its static methods only.\n *\n * @type {Node}\n */\n\nclass Node {\n  /**\n   * Create a new `Node` with `attrs`.\n   *\n   * @param {Object|Node} attrs\n   * @return {Node}\n   */\n\n  static create(attrs = {}) {\n    if (Node.isNode(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      let { object } = attrs\n\n      if (!object && attrs.kind) {\n        warning(\n          false,\n          'As of slate@0.32.0, the `kind` property of Slate objects has been renamed to `object`.'\n        )\n\n        object = attrs.kind\n      }\n\n      switch (object) {\n        case 'block':\n          return Block.create(attrs)\n        case 'document':\n          return Document.create(attrs)\n        case 'inline':\n          return Inline.create(attrs)\n        case 'text':\n          return Text.create(attrs)\n\n        default: {\n          throw new Error('`Node.create` requires a `object` string.')\n        }\n      }\n    }\n\n    throw new Error(\n      `\\`Node.create\\` only accepts objects or nodes but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Nodes` from an array.\n   *\n   * @param {Array<Object|Node>} elements\n   * @return {List<Node>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = List(elements.map(Node.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Node.createList\\` only accepts lists or arrays, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable node properties from `attrs`.\n   *\n   * @param {Object|String|Node} attrs\n   * @return {Object}\n   */\n\n  static createProperties(attrs = {}) {\n    if (Block.isBlock(attrs) || Inline.isInline(attrs)) {\n      return {\n        data: attrs.data,\n        type: attrs.type,\n      }\n    }\n\n    if (typeof attrs == 'string') {\n      return { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      const props = {}\n      if ('type' in attrs) props.type = attrs.type\n      if ('data' in attrs) props.data = Data.create(attrs.data)\n      return props\n    }\n\n    throw new Error(\n      `\\`Node.createProperties\\` only accepts objects, strings, blocks or inlines, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Node` from a JSON `value`.\n   *\n   * @param {Object} value\n   * @return {Node}\n   */\n\n  static fromJSON(value) {\n    let { object } = value\n\n    if (!object && value.kind) {\n      warning(\n        false,\n        'As of slate@0.32.0, the `kind` property of Slate objects has been renamed to `object`.'\n      )\n\n      object = value.kind\n    }\n\n    switch (object) {\n      case 'block':\n        return Block.fromJSON(value)\n      case 'document':\n        return Document.fromJSON(value)\n      case 'inline':\n        return Inline.fromJSON(value)\n      case 'text':\n        return Text.fromJSON(value)\n\n      default: {\n        throw new Error(\n          `\\`Node.fromJSON\\` requires an \\`object\\` of either 'block', 'document', 'inline' or 'text', but you passed: ${value}`\n        )\n      }\n    }\n  }\n\n  /**\n   * Check if `any` is a `Node`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isNode(any) {\n    return (\n      Block.isBlock(any) ||\n      Document.isDocument(any) ||\n      Inline.isInline(any) ||\n      Text.isText(any)\n    )\n  }\n\n  /**\n   * Check if `any` is a list of nodes.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isNodeList(any) {\n    return List.isList(any) && any.every(item => Node.isNode(item))\n  }\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Node\n","import isPlainObject from 'is-plain-object'\nimport { List, Map, Record } from 'immutable'\n\nimport KeyUtils from '../utils/key-utils'\nimport Node from './node'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: undefined,\n  key: undefined,\n  nodes: undefined,\n  type: undefined,\n}\n\n/**\n * Block.\n *\n * @type {Block}\n */\n\nclass Block extends Record(DEFAULTS) {\n  /**\n   * Create a new `Block` from `attrs`.\n   *\n   * @param {Object|String|Block} attrs\n   * @return {Block}\n   */\n\n  static create(attrs = {}) {\n    if (Block.isBlock(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs == 'string') {\n      attrs = { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Block.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Block.create\\` only accepts objects, strings or blocks, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Blocks` from `attrs`.\n   *\n   * @param {Array<Block|Object>|List<Block|Object>} attrs\n   * @return {List<Block>}\n   */\n\n  static createList(attrs = []) {\n    if (List.isList(attrs) || Array.isArray(attrs)) {\n      const list = new List(attrs.map(Block.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Block.createList\\` only accepts arrays or lists, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Block` from a JSON `object`.\n   *\n   * @param {Object|Block} object\n   * @return {Block}\n   */\n\n  static fromJSON(object) {\n    if (Block.isBlock(object)) {\n      return object\n    }\n\n    const { data = {}, key = KeyUtils.create(), nodes = [], type } = object\n\n    if (typeof type != 'string') {\n      throw new Error('`Block.fromJSON` requires a `type` string.')\n    }\n\n    const block = new Block({\n      key,\n      type,\n      data: Map(data),\n      nodes: Node.createList(nodes),\n    })\n\n    return block\n  }\n\n  /**\n   * Check if `any` is a block list.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isBlockList(any) {\n    return List.isList(any) && any.every(item => Block.isBlock(item))\n  }\n\n  /**\n   * Return a JSON representation of the block.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      type: this.type,\n      data: this.data.toJSON(),\n      nodes: this.nodes.toArray().map(n => n.toJSON(options)),\n    }\n\n    if (options.preserveKeys) {\n      object.key = this.key\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Block}\n */\n\nexport default Block\n","import { List } from 'immutable'\n\n/**\n * Compare paths `path` and `target` to see which is before or after.\n *\n * @param {List} path\n * @param {List} target\n * @return {Number|Null}\n */\n\nfunction compare(path, target) {\n  const m = min(path, target)\n\n  for (let i = 0; i < m; i++) {\n    const pv = path.get(i)\n    const tv = target.get(i)\n\n    // If the path's value is ever less than the target's, it's before.\n    if (pv < tv) return -1\n\n    // If the target's value is ever less than the path's, it's after.\n    if (pv > tv) return 1\n  }\n\n  // Paths should now be equal, otherwise something is wrong\n  return path.size === target.size ? 0 : null\n}\n\n/**\n * Create a path from `attrs`.\n *\n * @param {Array|List} attrs\n * @return {List}\n */\n\nfunction create(attrs) {\n  if (attrs == null) {\n    return null\n  }\n\n  if (List.isList(attrs)) {\n    return attrs\n  }\n\n  if (Array.isArray(attrs)) {\n    return List(attrs)\n  }\n\n  throw new Error(\n    `Paths can only be created from arrays or lists, but you passed: ${attrs}`\n  )\n}\n\n/**\n * Crop paths `a` and `b` to an equal size, defaulting to the shortest.\n *\n * @param {List} a\n * @param {List} b\n */\n\nfunction crop(a, b, size = min(a, b)) {\n  const ca = a.slice(0, size)\n  const cb = b.slice(0, size)\n  return [ca, cb]\n}\n\n/**\n * Decrement a `path` by `n` at `index`, defaulting to the last index.\n *\n * @param {List} path\n * @param {Number} n\n * @param {Number} index\n */\n\nfunction decrement(path, n = 1, index = path.size - 1) {\n  return increment(path, 0 - n, index)\n}\n\n/**\n * Get all ancestor paths of th given path.\n *\n * @param {List} path\n * @returns {List}\n */\n\nfunction getAncestors(path) {\n  let ancestors = new List()\n\n  for (let i = 0; i < path.size; i++) {\n    ancestors = ancestors.push(path.slice(0, i))\n  }\n\n  return ancestors\n}\n\n/**\n * Increment a `path` by `n` at `index`, defaulting to the last index.\n *\n * @param {List} path\n * @param {Number} n\n * @param {Number} index\n */\n\nfunction increment(path, n = 1, index = path.size - 1) {\n  const value = path.get(index)\n  const newValue = value + n\n  const newPath = path.set(index, newValue)\n  return newPath\n}\n\n/**\n * Is a `path` above another `target` path?\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\nfunction isAbove(path, target) {\n  const [p, t] = crop(path, target)\n  return path.size < target.size && compare(p, t) === 0\n}\n\n/**\n * Is a `path` after another `target` path in a document?\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\nfunction isAfter(path, target) {\n  const [p, t] = crop(path, target)\n  return compare(p, t) === 1\n}\n\n/**\n * Is a `path` before another `target` path in a document?\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\nfunction isBefore(path, target) {\n  const [p, t] = crop(path, target)\n  return compare(p, t) === -1\n}\n\n/**\n * Is a `path` equal to another `target` path in a document?\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\nfunction isEqual(path, target) {\n  return path.equals(target)\n}\n\n/**\n * Is a `path` older than a `target` path? Meaning that it ends as an older\n * sibling of one of the indexes in the target.\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\nfunction isOlder(path, target) {\n  const index = path.size - 1\n  const [p, t] = crop(path, target, index)\n  const pl = path.get(index)\n  const tl = target.get(index)\n  return isEqual(p, t) && pl > tl\n}\n\n/**\n * Is a `path` a sibling of a `target` path?\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\nfunction isSibling(path, target) {\n  if (path.size !== target.size) return false\n  const p = path.butLast()\n  const t = target.butLast()\n  return p.equals(t)\n}\n\n/**\n * Is a `path` younger than a `target` path? Meaning that it ends as a younger\n * sibling of one of the indexes in the target.\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\nfunction isYounger(path, target) {\n  const index = path.size - 1\n  const [p, t] = crop(path, target, index)\n  const pl = path.get(index)\n  const tl = target.get(index)\n  return isEqual(p, t) && pl < tl\n}\n\n/**\n * Lift a `path` to refer to its parent.\n *\n * @param {List} path\n * @return {Array}\n */\n\nfunction lift(path) {\n  const parent = path.slice(0, -1)\n  return parent\n}\n\n/**\n * Get the maximum length of paths `a` and `b`.\n *\n * @param {List} path\n * @param {List} path\n * @return {Number}\n */\n\nfunction max(a, b) {\n  const n = Math.max(a.size, b.size)\n  return n\n}\n\n/**\n * Get the minimum length of paths `a` and `b`.\n *\n * @param {List} path\n * @param {List} path\n * @return {Number}\n */\n\nfunction min(a, b) {\n  const n = Math.min(a.size, b.size)\n  return n\n}\n\n/**\n * Get the common ancestor path of path `a` and path `b`.\n *\n * @param {List} a\n * @param {List} b\n * @return {List}\n */\n\nfunction relate(a, b) {\n  const array = []\n\n  for (let i = 0; i < a.size && i < b.size; i++) {\n    const av = a.get(i)\n    const bv = b.get(i)\n\n    // If the values aren't equal, they've diverged and don't share an ancestor.\n    if (av !== bv) break\n\n    // Otherwise, the current value is still a common ancestor.\n    array.push(av)\n  }\n\n  const path = create(array)\n  return path\n}\n\n/**\n * Transform a `path` by an `operation`, adjusting it to stay current.\n *\n * @param {List} path\n * @param {Operation} operation\n * @return {List<List>}\n */\n\nfunction transform(path, operation) {\n  const { type, position, path: p } = operation\n\n  if (\n    type === 'add_mark' ||\n    type === 'insert_text' ||\n    type === 'remove_mark' ||\n    type === 'remove_text' ||\n    type === 'set_mark' ||\n    type === 'set_node' ||\n    type === 'set_selection' ||\n    type === 'set_value' ||\n    path.size === 0\n  ) {\n    return List([path])\n  }\n\n  const pIndex = p.size - 1\n  const pEqual = isEqual(p, path)\n  const pYounger = isYounger(p, path)\n  const pAbove = isAbove(p, path)\n\n  if (type === 'insert_node') {\n    if (pEqual || pYounger || pAbove) {\n      path = increment(path, 1, pIndex)\n    }\n  }\n\n  if (type === 'remove_node') {\n    if (pYounger) {\n      path = decrement(path, 1, pIndex)\n    } else if (pEqual || pAbove) {\n      path = []\n    }\n  }\n\n  if (type === 'merge_node') {\n    if (pEqual || pYounger) {\n      path = decrement(path, 1, pIndex)\n    } else if (pAbove) {\n      path = decrement(path, 1, pIndex)\n      path = increment(path, position, pIndex + 1)\n    }\n  }\n\n  if (type === 'split_node') {\n    if (pEqual) {\n      path = [path, increment(path)]\n    } else if (pYounger) {\n      path = increment(path, 1, pIndex)\n    } else if (pAbove) {\n      if (path.get(pIndex + 1) >= position) {\n        path = increment(path, 1, pIndex)\n        path = decrement(path, position, pIndex + 1)\n      }\n    }\n  }\n\n  if (type === 'move_node') {\n    const { newPath: np } = operation\n    const npIndex = np.size - 1\n    const npEqual = isEqual(np, path)\n\n    if (isEqual(p, np)) {\n      return List([path])\n    }\n\n    const npYounger = isYounger(np, path)\n    const npAbove = isAbove(np, path)\n\n    if (pAbove) {\n      path = np.concat(path.slice(p.size))\n    } else if (pEqual) {\n      path = np\n    } else {\n      if (pYounger) {\n        path = decrement(path, 1, pIndex)\n      }\n\n      if (npEqual || npYounger || npAbove) {\n        path = increment(path, 1, npIndex)\n      }\n    }\n  }\n\n  const paths = Array.isArray(path) ? path : [path]\n  return List(paths)\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default {\n  compare,\n  create,\n  crop,\n  decrement,\n  getAncestors,\n  increment,\n  isAbove,\n  isAfter,\n  isBefore,\n  isEqual,\n  isOlder,\n  isSibling,\n  isYounger,\n  lift,\n  max,\n  min,\n  relate,\n  transform,\n}\n","import isPlainObject from 'is-plain-object'\nimport warning from 'tiny-warning'\nimport { Record } from 'immutable'\n\nimport KeyUtils from '../utils/key-utils'\nimport PathUtils from '../utils/path-utils'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  key: undefined,\n  offset: undefined,\n  path: undefined,\n}\n\n/**\n * Point.\n *\n * @type {Point}\n */\n\nclass Point extends Record(DEFAULTS) {\n  /**\n   * Create a new `Point` with `attrs`.\n   *\n   * @param {Object|Point} attrs\n   * @return {Point}\n   */\n\n  static create(attrs = {}) {\n    if (Point.isPoint(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Point.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Point.create\\` only accepts objects or points, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable point properties from `attrs`.\n   *\n   * @param {Object|Point} attrs\n   * @return {Object}\n   */\n\n  static createProperties(a = {}) {\n    if (Point.isPoint(a)) {\n      return {\n        key: a.key,\n        offset: a.offset,\n        path: a.path,\n      }\n    }\n\n    if (isPlainObject(a)) {\n      const p = {}\n      if ('key' in a) p.key = a.key\n      if ('offset' in a) p.offset = a.offset\n      if ('path' in a) p.path = PathUtils.create(a.path)\n\n      // If only a path is set, or only a key is set, ensure that the other is\n      // set to null so that it can be normalized back to the right value.\n      // Otherwise we won't realize that the path and key don't match anymore.\n      if ('path' in a && !('key' in a)) p.key = null\n      if ('key' in a && !('path' in a)) p.path = null\n\n      return p\n    }\n\n    throw new Error(\n      `\\`Point.createProperties\\` only accepts objects or points, but you passed it: ${a}`\n    )\n  }\n\n  /**\n   * Create a `Point` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Point}\n   */\n\n  static fromJSON(object) {\n    const { key = null, offset = null, path = null } = object\n\n    const point = new Point({\n      key,\n      offset,\n      path: PathUtils.create(path),\n    })\n\n    return point\n  }\n\n  /**\n   * Check whether all properties of the point are set.\n   *\n   * @return {Boolean}\n   */\n\n  get isSet() {\n    return this.key != null && this.offset != null && this.path != null\n  }\n\n  /**\n   * Check whether any property of the point is not set.\n   *\n   * @return {Boolean}\n   */\n\n  get isUnset() {\n    return !this.isSet\n  }\n\n  /**\n   * Check whether the point is after another `point`.\n   *\n   * @return {Boolean}\n   */\n\n  isAfterPoint(point) {\n    if (this.isUnset) return false\n    const is =\n      (this.key === point.key && this.offset > point.offset) ||\n      PathUtils.compare(this.path, point.path) === 1\n    return is\n  }\n\n  /**\n   * Check whether the point is after a `range`.\n   *\n   * @return {Boolean}\n   */\n\n  isAfterRange(range) {\n    if (this.isUnset) return false\n    const is = this.isAfterPoint(range.end)\n    return is\n  }\n\n  /**\n   * Check whether the point is at the end of a `range`.\n   *\n   * @return {Boolean}\n   */\n\n  isAtEndOfRange(range) {\n    if (this.isUnset) return false\n    const is = this.equals(range.end)\n    return is\n  }\n\n  /**\n   * Check whether the point is at the start of a `range`.\n   *\n   * @return {Boolean}\n   */\n\n  isAtStartOfRange(range) {\n    if (this.isUnset) return false\n    const is = this.equals(range.start)\n    return is\n  }\n\n  /**\n   * Check whether the point is before another `point`.\n   *\n   * @return {Boolean}\n   */\n\n  isBeforePoint(point) {\n    if (this.isUnset) return false\n    const is =\n      (this.key === point.key && this.offset < point.offset) ||\n      PathUtils.compare(this.path, point.path) === -1\n    return is\n  }\n\n  /**\n   * Check whether the point is before a `range`.\n   *\n   * @return {Boolean}\n   */\n\n  isBeforeRange(range) {\n    if (this.isUnset) return false\n    const is = this.isBeforePoint(range.start)\n    return is\n  }\n\n  /**\n   * Check whether the point is inside a `range`.\n   *\n   * @return {Boolean}\n   */\n\n  isInRange(range) {\n    if (this.isUnset) return false\n    const is =\n      this.equals(range.start) ||\n      this.equals(range.end) ||\n      (this.isAfterPoint(range.start) && this.isBeforePoint(range.end))\n    return is\n  }\n\n  /**\n   * Check whether the point is at the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  isAtEndOfNode(node) {\n    if (this.isUnset) return false\n    const last = node.getLastText()\n    const is = this.key === last.key && this.offset === last.text.length\n    return is\n  }\n\n  /**\n   * Check whether the point is at the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  isAtStartOfNode(node) {\n    if (this.isUnset) return false\n\n    // PERF: Do a check for a `0` offset first since it's quickest.\n    if (this.offset != 0) return false\n\n    const first = node.getFirstText()\n    const is = this.key === first.key\n    return is\n  }\n\n  /**\n   * Check whether the point is in a `node`.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  isInNode(node) {\n    if (this.isUnset) return false\n    if (node.object === 'text' && node.key === this.key) return true\n    if (node.hasNode(this.key)) return true\n    return false\n  }\n\n  /**\n   * Move the point's offset backward `n` characters.\n   *\n   * @param {Number} n (optional)\n   * @return {Point}\n   */\n\n  moveBackward(n = 1) {\n    if (n === 0) return this\n    if (n < 0) return this.moveForward(-n)\n    const point = this.setOffset(this.offset - n)\n    return point\n  }\n\n  /**\n   * Move the point's offset forward `n` characters.\n   *\n   * @param {Number} n (optional)\n   * @return {Point}\n   */\n\n  moveForward(n = 1) {\n    if (n === 0) return this\n    if (n < 0) return this.moveBackward(-n)\n    const point = this.setOffset(this.offset + n)\n    return point\n  }\n\n  /**\n   * Move the point's anchor point to a new `path` and `offset`.\n   *\n   * Optionally, the `path` can be a key string, or omitted entirely in which\n   * case it would be the offset number.\n   *\n   * @param {List|String|Number} path\n   * @param {Number} offset\n   * @return {Point}\n   */\n\n  moveTo(path, offset = 0) {\n    let key = this.key\n\n    if (typeof path === 'number') {\n      offset = path\n      path = this.path\n    } else if (typeof path === 'string') {\n      key = path\n      path = key === this.key ? this.path : null\n    } else {\n      key = path.equals(this.path) ? this.key : null\n    }\n\n    const point = this.merge({ key, path, offset })\n    return point\n  }\n\n  /**\n   * Move the point's anchor point to the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Point}\n   */\n\n  moveToStartOfNode(node) {\n    const first = node.getFirstText()\n    const point = this.moveTo(first.key, 0)\n    return point\n  }\n\n  /**\n   * Move the point's anchor point to the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Point}\n   */\n\n  moveToEndOfNode(node) {\n    const last = node.getLastText()\n    const point = this.moveTo(last.key, last.text.length)\n    return point\n  }\n\n  /**\n   * Normalize the point relative to a `node`, ensuring that its key and path\n   * reference a text node, or that it gets unset.\n   *\n   * @param {Node} node\n   * @return {Point}\n   */\n\n  normalize(node) {\n    // If both the key and path are null, there's no reference to a node, so\n    // make sure it is entirely unset.\n    if (this.key == null && this.path == null) {\n      return this.setOffset(null)\n    }\n\n    const { key, offset, path } = this\n    const target = node.getNode(key || path)\n\n    if (!target) {\n      warning(false, \"A point's `path` or `key` invalid and was reset!\")\n\n      const text = node.getFirstText()\n      if (!text) return Point.create()\n\n      const point = this.merge({\n        key: text.key,\n        offset: 0,\n        path: node.getPath(text.key),\n      })\n\n      return point\n    }\n\n    if (target.object !== 'text') {\n      warning(false, 'A point should not reference a non-text node!')\n\n      const text = target.getTextAtOffset(offset)\n      const before = target.getOffset(text.key)\n      const point = this.merge({\n        offset: offset - before,\n        key: text.key,\n        path: node.getPath(text.key),\n      })\n\n      return point\n    }\n\n    if (target && path && key && key !== target.key) {\n      warning(false, \"A point's `key` did not match its `path`!\")\n    }\n\n    const point = this.merge({\n      key: target.key,\n      path: path == null ? node.getPath(target.key) : path,\n      offset: offset == null ? 0 : Math.min(offset, target.text.length),\n    })\n\n    return point\n  }\n\n  /**\n   * Set the point's key to a new `key`.\n   *\n   * @param {String} key\n   * @return {Point}\n   */\n\n  setKey(key) {\n    if (key !== null) {\n      key = KeyUtils.create(key)\n    }\n\n    const point = this.set('key', key)\n    return point\n  }\n\n  /**\n   * Set the point's offset to a new `offset`.\n   *\n   * @param {Number} offset\n   * @return {Point}\n   */\n\n  setOffset(offset) {\n    const point = this.set('offset', offset)\n    return point\n  }\n\n  /**\n   * Set the point's path to a new `path`.\n   *\n   * @param {List|Array} path\n   * @return {Point}\n   */\n\n  setPath(path) {\n    if (path !== null) {\n      path = PathUtils.create(path)\n    }\n\n    const point = this.set('path', path)\n    return point\n  }\n\n  /**\n   * Return a JSON representation of the point.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      key: this.key,\n      offset: this.offset,\n      path: this.path && this.path.toArray(),\n    }\n\n    if (!options.preserveKeys) {\n      delete object.key\n    }\n\n    return object\n  }\n\n  /**\n   * Unset the point.\n   *\n   * @return {Point}\n   */\n\n  unset() {\n    return this.merge({\n      key: null,\n      offset: null,\n      path: null,\n    })\n  }\n}\n\n/**\n * Export.\n *\n * @type {Point}\n */\n\nexport default Point\n","import isPlainObject from 'is-plain-object'\nimport { List, Record } from 'immutable'\n\nimport Mark from './mark'\nimport Point from './point'\nimport Range from './range'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  anchor: undefined,\n  focus: undefined,\n  mark: undefined,\n}\n\n/**\n * Decoration.\n *\n * @type {Decoration}\n */\n\nclass Decoration extends Record(DEFAULTS) {\n  /**\n   * Create a new `Decoration` with `attrs`.\n   *\n   * @param {Object|Decoration} attrs\n   * @return {Decoration}\n   */\n\n  static create(attrs = {}) {\n    if (Decoration.isDecoration(attrs)) {\n      return attrs\n    }\n\n    if (Range.isRange(attrs)) {\n      return Decoration.fromJSON(Range.createProperties(attrs))\n    }\n\n    if (isPlainObject(attrs)) {\n      return Decoration.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Decoration.create\\` only accepts objects or decorations, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Ranges` from `elements`.\n   *\n   * @param {Array<Decoration|Object>|List<Decoration|Object>} elements\n   * @return {List<Decoration>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Decoration.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Decoration.createList\\` only accepts arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable decoration properties from `attrs`.\n   *\n   * @param {Object|String|Decoration} attrs\n   * @return {Object}\n   */\n\n  static createProperties(a = {}) {\n    if (Decoration.isDecoration(a)) {\n      return {\n        anchor: Point.createProperties(a.anchor),\n        focus: Point.createProperties(a.focus),\n        mark: Mark.create(a.mark),\n      }\n    }\n\n    if (isPlainObject(a)) {\n      const p = {}\n      if ('anchor' in a) p.anchor = Point.create(a.anchor)\n      if ('focus' in a) p.focus = Point.create(a.focus)\n      if ('mark' in a) p.mark = Mark.create(a.mark)\n      return p\n    }\n\n    throw new Error(\n      `\\`Decoration.createProperties\\` only accepts objects or decorations, but you passed it: ${a}`\n    )\n  }\n\n  /**\n   * Create a `Decoration` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Decoration}\n   */\n\n  static fromJSON(object) {\n    const { anchor, focus, mark } = object\n\n    if (!mark) {\n      throw new Error(\n        `Decorations must be created with a \\`mark\\`, but you passed: ${JSON.stringify(\n          object\n        )}`\n      )\n    }\n\n    const decoration = new Decoration({\n      anchor: Point.fromJSON(anchor || {}),\n      focus: Point.fromJSON(focus || {}),\n      mark: Mark.fromJSON(mark),\n    })\n\n    return decoration\n  }\n\n  /**\n   * Set new `properties` on the decoration.\n   *\n   * @param {Object|Range|Selection} properties\n   * @return {Range}\n   */\n\n  setProperties(properties) {\n    properties = Decoration.createProperties(properties)\n    const { anchor, focus, mark } = properties\n    const props = {}\n\n    if (anchor) {\n      props.anchor = Point.create(anchor)\n    }\n\n    if (focus) {\n      props.focus = Point.create(focus)\n    }\n\n    if (mark) {\n      props.mark = Mark.create(mark)\n    }\n\n    const decoration = this.merge(props)\n    return decoration\n  }\n\n  /**\n   * Return a JSON representation of the decoration.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      anchor: this.anchor.toJSON(options),\n      focus: this.focus.toJSON(options),\n      mark: this.mark.toJSON(options),\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Decoration}\n */\n\nexport default Decoration\n","/**\n * Slate-specific object types.\n *\n * @type {Object}\n */\n\nexport const TYPES = {\n  block: '@@__SLATE_BLOCK__@@',\n  change: '@@__SLATE_CHANGE__@@',\n  decoration: '@@__SLATE_DECORATION__@@',\n  document: '@@__SLATE_DOCUMENT__@@',\n  editor: '@@__SLATE_EDITOR__@@',\n  inline: '@@__SLATE_INLINE__@@',\n  leaf: '@@__SLATE_LEAF__@@',\n  mark: '@@__SLATE_MARK__@@',\n  operation: '@@__SLATE_OPERATION__@@',\n  point: '@@__SLATE_POINT__@@',\n  range: '@@__SLATE_RANGE__@@',\n  selection: '@@__SLATE_SELECTION__@@',\n  text: '@@__SLATE_TEXT__@@',\n  value: '@@__SLATE_VALUE__@@',\n}\n\n/**\n * Determine whether a `value` is of `type`.\n *\n * @param {string} type\n * @param {any} value\n * @return {boolean}\n */\n\nexport default function isObject(type, value) {\n  return !!(value && value[TYPES[type]])\n}\n","import isPlainObject from 'is-plain-object'\nimport { List, Record } from 'immutable'\n\nimport Decoration from './decoration'\nimport Point from './point'\nimport Selection from './selection'\nimport isObject from '../utils/is-object'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  anchor: undefined,\n  focus: undefined,\n}\n\n/**\n * Range.\n *\n * @type {Range}\n */\n\nclass Range extends Record(DEFAULTS) {\n  /**\n   * Create a new `Range` with `attrs`.\n   *\n   * @param {Object|Range} attrs\n   * @return {Range}\n   */\n\n  static create(attrs = {}) {\n    if (Range.isRange(attrs)) {\n      if (attrs.object === 'range') {\n        return attrs\n      } else {\n        return Range.fromJSON(Range.createProperties(attrs))\n      }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Range.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Range.create\\` only accepts objects or ranges, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Ranges` from `elements`.\n   *\n   * @param {Array<Range|Object>|List<Range|Object>} elements\n   * @return {List<Range>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Range.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Range.createList\\` only accepts arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable range properties from `attrs`.\n   *\n   * @param {Object|String|Range} attrs\n   * @return {Object}\n   */\n\n  static createProperties(a = {}) {\n    if (Range.isRange(a)) {\n      return {\n        anchor: Point.createProperties(a.anchor),\n        focus: Point.createProperties(a.focus),\n      }\n    }\n\n    if (isPlainObject(a)) {\n      const p = {}\n      if ('anchor' in a) p.anchor = Point.create(a.anchor)\n      if ('focus' in a) p.focus = Point.create(a.focus)\n      return p\n    }\n\n    throw new Error(\n      `\\`Range.createProperties\\` only accepts objects, decorations, ranges or selections, but you passed it: ${a}`\n    )\n  }\n\n  /**\n   * Create a `Range` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Range}\n   */\n\n  static fromJSON(object) {\n    const { anchor, focus } = object\n    const range = new Range({\n      anchor: Point.fromJSON(anchor || {}),\n      focus: Point.fromJSON(focus || {}),\n    })\n\n    return range\n  }\n\n  /**\n   * Check if a `value` is a `Range`, or is range-like.\n   *\n   * @param {Any} value\n   * @return {Boolean}\n   */\n\n  static isRange(value) {\n    return (\n      isObject('range', value) ||\n      Decoration.isDecoration(value) ||\n      Selection.isSelection(value)\n    )\n  }\n\n  /**\n   * Return a JSON representation of the range.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      anchor: this.anchor.toJSON(options),\n      focus: this.focus.toJSON(options),\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Range}\n */\n\nexport default Range\n","import isPlainObject from 'is-plain-object'\nimport { Record, Set } from 'immutable'\n\nimport Mark from './mark'\nimport Point from './point'\nimport Range from './range'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  anchor: undefined,\n  focus: undefined,\n  isFocused: undefined,\n  marks: undefined,\n}\n\n/**\n * Selection.\n *\n * @type {Selection}\n */\n\nclass Selection extends Record(DEFAULTS) {\n  /**\n   * Create a new `Selection` with `attrs`.\n   *\n   * @param {Object|Selection} attrs\n   * @return {Selection}\n   */\n\n  static create(attrs = {}) {\n    if (Selection.isSelection(attrs)) {\n      return attrs\n    }\n\n    if (Range.isRange(attrs)) {\n      return Selection.fromJSON(Range.createProperties(attrs))\n    }\n\n    if (isPlainObject(attrs)) {\n      return Selection.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Selection.create\\` only accepts objects, ranges or selections, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable selection properties from `attrs`.\n   *\n   * @param {Object|String|Selection} attrs\n   * @return {Object}\n   */\n\n  static createProperties(a = {}) {\n    if (Selection.isSelection(a)) {\n      return {\n        anchor: Point.createProperties(a.anchor),\n        focus: Point.createProperties(a.focus),\n        isFocused: a.isFocused,\n        marks: a.marks,\n      }\n    }\n\n    if (Range.isRange(a)) {\n      return {\n        anchor: Point.createProperties(a.anchor),\n        focus: Point.createProperties(a.focus),\n      }\n    }\n\n    if (isPlainObject(a)) {\n      const p = {}\n      if ('anchor' in a) p.anchor = Point.create(a.anchor)\n      if ('focus' in a) p.focus = Point.create(a.focus)\n      if ('isFocused' in a) p.isFocused = a.isFocused\n      if ('marks' in a)\n        p.marks = a.marks == null ? null : Mark.createSet(a.marks)\n      return p\n    }\n\n    throw new Error(\n      `\\`Selection.createProperties\\` only accepts objects, ranges or selections, but you passed it: ${a}`\n    )\n  }\n\n  /**\n   * Create a `Selection` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Selection}\n   */\n\n  static fromJSON(object) {\n    const { anchor, focus, isFocused = false, marks = null } = object\n    const selection = new Selection({\n      anchor: Point.fromJSON(anchor || {}),\n      focus: Point.fromJSON(focus || {}),\n      isFocused,\n      marks: marks == null ? null : new Set(marks.map(Mark.fromJSON)),\n    })\n\n    return selection\n  }\n\n  /**\n   * Check whether the selection is blurred.\n   *\n   * @return {Boolean}\n   */\n\n  get isBlurred() {\n    return !this.isFocused\n  }\n\n  /**\n   * Set the `isFocused` property to a new `value`.\n   *\n   * @param {Boolean} value\n   * @return {Selection}\n   */\n\n  setIsFocused(value) {\n    const selection = this.set('isFocused', value)\n    return selection\n  }\n\n  /**\n   * Set the `marks` property to a new set of `marks`.\n   *\n   * @param {Set} marks\n   * @return {Selection}\n   */\n\n  setMarks(marks) {\n    const selection = this.set('marks', marks)\n    return selection\n  }\n\n  /**\n   * Set new `properties` on the selection.\n   *\n   * @param {Object|Range|Selection} properties\n   * @return {Range}\n   */\n\n  setProperties(properties) {\n    properties = Selection.createProperties(properties)\n    const { anchor, focus, ...props } = properties\n\n    if (anchor) {\n      props.anchor = Point.create(anchor)\n    }\n\n    if (focus) {\n      props.focus = Point.create(focus)\n    }\n\n    const selection = this.merge(props)\n    return selection\n  }\n\n  /**\n   * Return a JSON representation of the selection.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      anchor: this.anchor.toJSON(options),\n      focus: this.focus.toJSON(options),\n      isFocused: this.isFocused,\n      marks:\n        this.marks == null ? null : this.marks.toArray().map(m => m.toJSON()),\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Selection}\n */\n\nexport default Selection\n","import isPlainObject from 'is-plain-object'\nimport invariant from 'tiny-invariant'\nimport { Record, Set, List } from 'immutable'\n\nimport PathUtils from '../utils/path-utils'\nimport Data from './data'\nimport Decoration from './decoration'\nimport Document from './document'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: undefined,\n  decorations: undefined,\n  document: undefined,\n  selection: undefined,\n}\n\n/**\n * Value.\n *\n * @type {Value}\n */\n\nclass Value extends Record(DEFAULTS) {\n  /**\n   * Create a new `Value` with `attrs`.\n   *\n   * @param {Object|Value} attrs\n   * @param {Object} options\n   * @return {Value}\n   */\n\n  static create(attrs = {}, options = {}) {\n    if (Value.isValue(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Value.fromJSON(attrs, options)\n    }\n\n    throw new Error(\n      `\\`Value.create\\` only accepts objects or values, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable value properties from `attrs`.\n   *\n   * @param {Object|Value} attrs\n   * @return {Object}\n   */\n\n  static createProperties(a = {}) {\n    if (Value.isValue(a)) {\n      return {\n        data: a.data,\n        decorations: a.decorations,\n      }\n    }\n\n    if (isPlainObject(a)) {\n      const p = {}\n      if ('data' in a) p.data = Data.create(a.data)\n      if ('decorations' in a)\n        p.decorations = Decoration.createList(a.decorations)\n      return p\n    }\n\n    throw new Error(\n      `\\`Value.createProperties\\` only accepts objects or values, but you passed it: ${a}`\n    )\n  }\n\n  /**\n   * Create a `Value` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @param {Object} options\n   *   @property {Boolean} normalize\n   *   @property {Array} plugins\n   * @return {Value}\n   */\n\n  static fromJSON(object, options = {}) {\n    let { data = {}, decorations = [], document = {}, selection = {} } = object\n    data = Data.fromJSON(data)\n    document = Document.fromJSON(document)\n    selection = document.createSelection(selection)\n    decorations = List(decorations.map(d => Decoration.fromJSON(d)))\n\n    if (selection.isUnset) {\n      const text = document.getFirstText()\n      if (text) selection = selection.moveToStartOfNode(text)\n      selection = document.createSelection(selection)\n    }\n\n    const value = new Value({\n      data,\n      decorations,\n      document,\n      selection,\n    })\n\n    return value\n  }\n\n  /**\n   * Get the current start text node's closest block parent.\n   *\n   * @return {Block}\n   */\n\n  get startBlock() {\n    return (\n      this.selection.start.key &&\n      this.document.getClosestBlock(this.selection.start.key)\n    )\n  }\n\n  /**\n   * Get the current end text node's closest block parent.\n   *\n   * @return {Block}\n   */\n\n  get endBlock() {\n    return (\n      this.selection.end.key &&\n      this.document.getClosestBlock(this.selection.end.key)\n    )\n  }\n\n  /**\n   * Get the current anchor text node's closest block parent.\n   *\n   * @return {Block}\n   */\n\n  get anchorBlock() {\n    return (\n      this.selection.anchor.key &&\n      this.document.getClosestBlock(this.selection.anchor.key)\n    )\n  }\n\n  /**\n   * Get the current focus text node's closest block parent.\n   *\n   * @return {Block}\n   */\n\n  get focusBlock() {\n    return (\n      this.selection.focus.key &&\n      this.document.getClosestBlock(this.selection.focus.key)\n    )\n  }\n\n  /**\n   * Get the current start text node's closest inline parent.\n   *\n   * @return {Inline}\n   */\n\n  get startInline() {\n    return (\n      this.selection.start.key &&\n      this.document.getClosestInline(this.selection.start.key)\n    )\n  }\n\n  /**\n   * Get the current end text node's closest inline parent.\n   *\n   * @return {Inline}\n   */\n\n  get endInline() {\n    return (\n      this.selection.end.key &&\n      this.document.getClosestInline(this.selection.end.key)\n    )\n  }\n\n  /**\n   * Get the current anchor text node's closest inline parent.\n   *\n   * @return {Inline}\n   */\n\n  get anchorInline() {\n    return (\n      this.selection.anchor.key &&\n      this.document.getClosestInline(this.selection.anchor.key)\n    )\n  }\n\n  /**\n   * Get the current focus text node's closest inline parent.\n   *\n   * @return {Inline}\n   */\n\n  get focusInline() {\n    return (\n      this.selection.focus.key &&\n      this.document.getClosestInline(this.selection.focus.key)\n    )\n  }\n\n  /**\n   * Get the current start text node.\n   *\n   * @return {Text}\n   */\n\n  get startText() {\n    return (\n      this.selection.start.key &&\n      this.document.getDescendant(this.selection.start.key)\n    )\n  }\n\n  /**\n   * Get the current end node.\n   *\n   * @return {Text}\n   */\n\n  get endText() {\n    return (\n      this.selection.end.key &&\n      this.document.getDescendant(this.selection.end.key)\n    )\n  }\n\n  /**\n   * Get the current anchor node.\n   *\n   * @return {Text}\n   */\n\n  get anchorText() {\n    return (\n      this.selection.anchor.key &&\n      this.document.getDescendant(this.selection.anchor.key)\n    )\n  }\n\n  /**\n   * Get the current focus node.\n   *\n   * @return {Text}\n   */\n\n  get focusText() {\n    return (\n      this.selection.focus.key &&\n      this.document.getDescendant(this.selection.focus.key)\n    )\n  }\n\n  /**\n   * Get the next block node.\n   *\n   * @return {Block}\n   */\n\n  get nextBlock() {\n    return (\n      this.selection.end.key &&\n      this.document.getNextBlock(this.selection.end.key)\n    )\n  }\n\n  /**\n   * Get the previous block node.\n   *\n   * @return {Block}\n   */\n\n  get previousBlock() {\n    return (\n      this.selection.start.key &&\n      this.document.getPreviousBlock(this.selection.start.key)\n    )\n  }\n\n  /**\n   * Get the next inline node.\n   *\n   * @return {Inline}\n   */\n\n  get nextInline() {\n    return (\n      this.selection.end.key &&\n      this.document.getNextInline(this.selection.end.key)\n    )\n  }\n\n  /**\n   * Get the previous inline node.\n   *\n   * @return {Inline}\n   */\n\n  get previousInline() {\n    return (\n      this.selection.start.key &&\n      this.document.getPreviousInline(this.selection.start.key)\n    )\n  }\n\n  /**\n   * Get the next text node.\n   *\n   * @return {Text}\n   */\n\n  get nextText() {\n    return (\n      this.selection.end.key &&\n      this.document.getNextText(this.selection.end.key)\n    )\n  }\n\n  /**\n   * Get the previous text node.\n   *\n   * @return {Text}\n   */\n\n  get previousText() {\n    return (\n      this.selection.start.key &&\n      this.document.getPreviousText(this.selection.start.key)\n    )\n  }\n\n  /**\n   * Get the marks of the current selection.\n   *\n   * @return {Set<Mark>}\n   */\n\n  get marks() {\n    return this.selection.isUnset\n      ? new Set()\n      : this.selection.marks || this.document.getMarksAtRange(this.selection)\n  }\n\n  /**\n   * Get the active marks of the current selection.\n   *\n   * @return {Set<Mark>}\n   */\n\n  get activeMarks() {\n    return this.selection.isUnset\n      ? new Set()\n      : this.selection.marks ||\n          this.document.getActiveMarksAtRange(this.selection)\n  }\n\n  /**\n   * Get the block nodes in the current selection.\n   *\n   * @return {List<Block>}\n   */\n\n  get blocks() {\n    return this.selection.isUnset\n      ? new List()\n      : this.document.getLeafBlocksAtRange(this.selection)\n  }\n\n  /**\n   * Get the fragment of the current selection.\n   *\n   * @return {Document}\n   */\n\n  get fragment() {\n    return this.selection.isUnset\n      ? Document.create()\n      : this.document.getFragmentAtRange(this.selection)\n  }\n\n  /**\n   * Get the bottom-most inline nodes in the current selection.\n   *\n   * @return {List<Inline>}\n   */\n\n  get inlines() {\n    return this.selection.isUnset\n      ? new List()\n      : this.document.getLeafInlinesAtRange(this.selection)\n  }\n\n  /**\n   * Get the text nodes in the current selection.\n   *\n   * @return {List<Text>}\n   */\n\n  get texts() {\n    return this.selection.isUnset\n      ? new List()\n      : this.document.getTextsAtRange(this.selection)\n  }\n\n  /**\n   * Add mark to text at `offset` and `length` in node by `path`.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {Number} length\n   * @param {Mark} mark\n   * @return {Value}\n   */\n\n  addMark(path, offset, length, mark) {\n    let value = this\n    let { document } = value\n    document = document.addMark(path, offset, length, mark)\n    value = this.set('document', document)\n    return value\n  }\n\n  /**\n   * Insert a `node`.\n   *\n   * @param {List|String} path\n   * @param {Node} node\n   * @return {Value}\n   */\n\n  insertNode(path, node) {\n    let value = this\n    let { document } = value\n    document = document.insertNode(path, node)\n    value = value.set('document', document)\n\n    value = value.mapRanges(range =>\n      range.updatePoints(point => point.setPath(null))\n    )\n\n    return value\n  }\n\n  /**\n   * Insert `text` at `offset` in node by `path`.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {String} text\n   * @param {Set} marks\n   * @return {Value}\n   */\n\n  insertText(path, offset, text, marks) {\n    let value = this\n    let { document } = value\n    const node = document.assertNode(path)\n    document = document.insertText(path, offset, text, marks)\n    value = value.set('document', document)\n\n    value = value.mapRanges(range => {\n      return range.updatePoints(point => {\n        return point.key === node.key && point.offset >= offset\n          ? point.setOffset(point.offset + text.length)\n          : point\n      })\n    })\n\n    return value\n  }\n\n  /**\n   * Merge a node backwards its previous sibling.\n   *\n   * @param {List|Key} path\n   * @return {Value}\n   */\n\n  mergeNode(path) {\n    let value = this\n    const { document } = value\n    const newDocument = document.mergeNode(path)\n    path = document.resolvePath(path)\n    const withPath = PathUtils.decrement(path)\n    const one = document.getNode(withPath)\n    const two = document.getNode(path)\n    value = value.set('document', newDocument)\n\n    value = value.mapRanges(range => {\n      if (two.object === 'text') {\n        const max = one.text.length\n\n        if (range.anchor.key === two.key) {\n          range = range.moveAnchorTo(one.key, max + range.anchor.offset)\n        }\n\n        if (range.focus.key === two.key) {\n          range = range.moveFocusTo(one.key, max + range.focus.offset)\n        }\n      }\n\n      range = range.updatePoints(point => point.setPath(null))\n\n      return range\n    })\n\n    return value\n  }\n\n  /**\n   * Move a node by `path` to `newPath`.\n   *\n   * A `newIndex` can be provided when move nodes by `key`, to account for not\n   * being able to have a key for a location in the tree that doesn't exist yet.\n   *\n   * @param {List|Key} path\n   * @param {List|Key} newPath\n   * @param {Number} newIndex\n   * @return {Value}\n   */\n\n  moveNode(path, newPath, newIndex = 0) {\n    let value = this\n    let { document } = value\n    document = document.moveNode(path, newPath, newIndex)\n    value = value.set('document', document)\n\n    value = value.mapRanges(range =>\n      range.updatePoints(point => point.setPath(null))\n    )\n\n    return value\n  }\n\n  /**\n   * Remove mark from text at `offset` and `length` in node.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {Number} length\n   * @param {Mark} mark\n   * @return {Value}\n   */\n\n  removeMark(path, offset, length, mark) {\n    let value = this\n    let { document } = value\n    document = document.removeMark(path, offset, length, mark)\n    value = this.set('document', document)\n    return value\n  }\n\n  /**\n   * Remove a node by `path`.\n   *\n   * @param {List|String} path\n   * @return {Value}\n   */\n\n  removeNode(path) {\n    let value = this\n    let { document } = value\n    const node = document.assertNode(path)\n    const first = node.object == 'text' ? node : node.getFirstText() || node\n    const last = node.object == 'text' ? node : node.getLastText() || node\n    const prev = document.getPreviousText(first.key)\n    const next = document.getNextText(last.key)\n\n    document = document.removeNode(path)\n    value = value.set('document', document)\n\n    value = value.mapRanges(range => {\n      const { start, end } = range\n\n      if (node.hasNode(start.key)) {\n        range = prev\n          ? range.moveStartTo(prev.key, prev.text.length)\n          : next ? range.moveStartTo(next.key, 0) : range.unset()\n      }\n\n      if (node.hasNode(end.key)) {\n        range = prev\n          ? range.moveEndTo(prev.key, prev.text.length)\n          : next ? range.moveEndTo(next.key, 0) : range.unset()\n      }\n\n      range = range.updatePoints(point => point.setPath(null))\n\n      return range\n    })\n\n    return value\n  }\n\n  /**\n   * Remove `text` at `offset` in node by `path`.\n   *\n   * @param {List|Key} path\n   * @param {Number} offset\n   * @param {String} text\n   * @return {Value}\n   */\n\n  removeText(path, offset, text) {\n    let value = this\n    let { document } = value\n    const node = document.assertNode(path)\n    document = document.removeText(path, offset, text)\n    value = value.set('document', document)\n\n    const { length } = text\n    const start = offset\n    const end = offset + length\n\n    value = value.mapRanges(range => {\n      return range.updatePoints(point => {\n        if (point.key !== node.key) {\n          return point\n        }\n\n        if (point.offset >= end) {\n          return point.setOffset(point.offset - length)\n        }\n\n        if (point.offset > start) {\n          return point.setOffset(start)\n        }\n\n        return point\n      })\n    })\n\n    return value\n  }\n\n  /**\n   * Set `properties` on a node.\n   *\n   * @param {List|String} path\n   * @param {Object} properties\n   * @return {Value}\n   */\n\n  setNode(path, properties) {\n    let value = this\n    let { document } = value\n    document = document.setNode(path, properties)\n    value = value.set('document', document)\n    return value\n  }\n\n  /**\n   * Set `properties` on `mark` on text at `offset` and `length` in node.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {Number} length\n   * @param {Mark} mark\n   * @param {Object} properties\n   * @return {Value}\n   */\n\n  setMark(path, offset, length, mark, properties) {\n    let value = this\n    let { document } = value\n    document = document.setMark(path, offset, length, mark, properties)\n    value = value.set('document', document)\n    return value\n  }\n\n  /**\n   * Set `properties` on the value.\n   *\n   * @param {Object} properties\n   * @return {Value}\n   */\n\n  setProperties(properties) {\n    let value = this\n    const { document } = value\n    const { data, decorations } = properties\n    const props = {}\n\n    if (data) {\n      props.data = data\n    }\n\n    if (decorations) {\n      props.decorations = decorations.map(d => {\n        return d.isSet ? d : document.resolveDecoration(d)\n      })\n    }\n\n    value = value.merge(props)\n    return value\n  }\n\n  /**\n   * Set `properties` on the selection.\n   *\n   * @param {Value} value\n   * @param {Operation} operation\n   * @return {Value}\n   */\n\n  setSelection(properties) {\n    let value = this\n    let { document, selection } = value\n    const next = selection.setProperties(properties)\n    selection = document.resolveSelection(next)\n    value = value.set('selection', selection)\n    return value\n  }\n\n  /**\n   * Split a node by `path` at `position` with optional `properties` to apply\n   * to the newly split node.\n   *\n   * @param {List|String} path\n   * @param {Number} position\n   * @param {Object} properties\n   * @return {Value}\n   */\n\n  splitNode(path, position, properties) {\n    let value = this\n    const { document } = value\n    const newDocument = document.splitNode(path, position, properties)\n    const node = document.assertNode(path)\n    value = value.set('document', newDocument)\n\n    value = value.mapRanges(range => {\n      const next = newDocument.getNextText(node.key)\n      const { start, end } = range\n\n      // If the start was after the split, move it to the next node.\n      if (node.key === start.key && position <= start.offset) {\n        range = range.moveStartTo(next.key, start.offset - position)\n      }\n\n      // If the end was after the split, move it to the next node.\n      if (node.key === end.key && position <= end.offset) {\n        range = range.moveEndTo(next.key, end.offset - position)\n      }\n\n      range = range.updatePoints(point => point.setPath(null))\n\n      return range\n    })\n\n    return value\n  }\n\n  /**\n   * Map all range objects to apply adjustments with an `iterator`.\n   *\n   * @param {Function} iterator\n   * @return {Value}\n   */\n\n  mapRanges(iterator) {\n    let value = this\n    const { document, selection, decorations } = value\n\n    let sel = selection.isSet ? iterator(selection) : selection\n    if (!sel) sel = selection.unset()\n    if (sel !== selection) sel = document.createSelection(sel)\n    value = value.set('selection', sel)\n\n    let decs = decorations.map(decoration => {\n      let n = decoration.isSet ? iterator(decoration) : decoration\n      if (n && n !== decoration) n = document.createDecoration(n)\n      return n\n    })\n\n    decs = decs.filter(decoration => !!decoration)\n    value = value.set('decorations', decs)\n    return value\n  }\n\n  /**\n   * Return a JSON representation of the value.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      document: this.document.toJSON(options),\n    }\n\n    if (options.preserveData) {\n      object.data = this.data.toJSON(options)\n    }\n\n    if (options.preserveDecorations) {\n      object.decorations = this.decorations\n        .toArray()\n        .map(d => d.toJSON(options))\n    }\n\n    if (options.preserveSelection) {\n      object.selection = this.selection.toJSON(options)\n    }\n\n    return object\n  }\n\n  /**\n   * Deprecated.\n   */\n\n  get history() {\n    invariant(\n      false,\n      'As of Slate 0.42.0, the `value.history` model no longer exists, and the history is stored in `value.data` instead using plugins.'\n    )\n  }\n\n  change() {\n    invariant(\n      false,\n      'As of Slate 0.42.0, value object are no longer schema-aware, and the `value.change()` method is no longer available. Use the `editor.change()` method on the new `Editor` controller instead.'\n    )\n  }\n}\n\n/**\n * Export.\n */\n\nexport default Value\n","import Debug from 'debug'\n\nimport Operation from '../models/operation'\nimport PathUtils from '../utils/path-utils'\n\n/**\n * Debug.\n *\n * @type {Function}\n */\n\nconst debug = Debug('slate:operation:apply')\n\n/**\n * Apply an `op` to a `value`.\n *\n * @param {Value} value\n * @param {Object|Operation} op\n * @return {Value} value\n */\n\nfunction applyOperation(value, op) {\n  op = Operation.create(op)\n  const { type } = op\n  debug(type, op)\n\n  switch (type) {\n    case 'add_mark': {\n      const { path, offset, length, mark } = op\n      const next = value.addMark(path, offset, length, mark)\n      return next\n    }\n\n    case 'insert_node': {\n      const { path, node } = op\n      const next = value.insertNode(path, node)\n      return next\n    }\n\n    case 'insert_text': {\n      const { path, offset, text, marks } = op\n      const next = value.insertText(path, offset, text, marks)\n      return next\n    }\n\n    case 'merge_node': {\n      const { path } = op\n      const next = value.mergeNode(path)\n      return next\n    }\n\n    case 'move_node': {\n      const { path, newPath } = op\n\n      if (PathUtils.isEqual(path, newPath)) {\n        return value\n      }\n\n      const next = value.moveNode(path, newPath)\n      return next\n    }\n\n    case 'remove_mark': {\n      const { path, offset, length, mark } = op\n      const next = value.removeMark(path, offset, length, mark)\n      return next\n    }\n\n    case 'remove_node': {\n      const { path } = op\n      const next = value.removeNode(path)\n      return next\n    }\n\n    case 'remove_text': {\n      const { path, offset, text } = op\n      const next = value.removeText(path, offset, text)\n      return next\n    }\n\n    case 'set_mark': {\n      const { path, offset, length, mark, properties } = op\n      const next = value.setMark(path, offset, length, mark, properties)\n      return next\n    }\n\n    case 'set_node': {\n      const { path, properties } = op\n      const next = value.setNode(path, properties)\n      return next\n    }\n\n    case 'set_selection': {\n      const { properties } = op\n      const next = value.setSelection(properties)\n      return next\n    }\n\n    case 'set_value': {\n      const { properties } = op\n      const next = value.setProperties(properties)\n      return next\n    }\n\n    case 'split_node': {\n      const { path, position, properties } = op\n      const next = value.splitNode(path, position, properties)\n      return next\n    }\n\n    default: {\n      throw new Error(`Unknown operation type: \"${type}\".`)\n    }\n  }\n}\n\n/**\n * Export.\n *\n * @type {Function}\n */\n\nexport default applyOperation\n","import Debug from 'debug'\nimport pick from 'lodash/pick'\n\nimport Operation from '../models/operation'\nimport PathUtils from '../utils/path-utils'\n\n/**\n * Debug.\n *\n * @type {Function}\n */\n\nconst debug = Debug('slate:operation:invert')\n\n/**\n * Invert an `op`.\n *\n * @param {Object} op\n * @return {Object}\n */\n\nfunction invertOperation(op) {\n  op = Operation.create(op)\n  const { type } = op\n  debug(type, op)\n\n  switch (type) {\n    case 'insert_node': {\n      const inverse = op.set('type', 'remove_node')\n      return inverse\n    }\n\n    case 'remove_node': {\n      const inverse = op.set('type', 'insert_node')\n      return inverse\n    }\n\n    case 'move_node': {\n      const { newPath, path } = op\n\n      if (PathUtils.isEqual(newPath, path)) {\n        return op\n      }\n\n      let inversePath = newPath\n      let inverseNewPath = path\n\n      const pathLast = path.size - 1\n      const newPathLast = newPath.size - 1\n\n      // If the node's old position was a left sibling of an ancestor of\n      // its new position, we need to adjust part of the path by -1.\n      if (\n        path.size < inversePath.size &&\n        path.slice(0, pathLast).every((e, i) => e == inversePath.get(i)) &&\n        path.last() < inversePath.get(pathLast)\n      ) {\n        inversePath = inversePath\n          .slice(0, pathLast)\n          .concat(inversePath.get(pathLast) - 1)\n          .concat(inversePath.slice(pathLast + 1, inversePath.size))\n      }\n\n      // If the node's new position is an ancestor of the old position,\n      // or a left sibling of an ancestor of its old position, we need\n      // to adjust part of the path by 1.\n      if (\n        newPath.size < inverseNewPath.size &&\n        newPath\n          .slice(0, newPathLast)\n          .every((e, i) => e == inverseNewPath.get(i)) &&\n        newPath.last() <= inverseNewPath.get(newPathLast)\n      ) {\n        inverseNewPath = inverseNewPath\n          .slice(0, newPathLast)\n          .concat(inverseNewPath.get(newPathLast) + 1)\n          .concat(inverseNewPath.slice(newPathLast + 1, inverseNewPath.size))\n      }\n\n      const inverse = op.set('path', inversePath).set('newPath', inverseNewPath)\n      return inverse\n    }\n\n    case 'merge_node': {\n      const { path } = op\n      const inversePath = PathUtils.decrement(path)\n      const inverse = op.set('type', 'split_node').set('path', inversePath)\n      return inverse\n    }\n\n    case 'split_node': {\n      const { path } = op\n      const inversePath = PathUtils.increment(path)\n      const inverse = op.set('type', 'merge_node').set('path', inversePath)\n      return inverse\n    }\n\n    case 'set_node': {\n      const { properties, node } = op\n      const inverseNode = node.merge(properties)\n      const inverseProperties = pick(node, Object.keys(properties))\n      const inverse = op\n        .set('node', inverseNode)\n        .set('properties', inverseProperties)\n      return inverse\n    }\n\n    case 'insert_text': {\n      const inverse = op.set('type', 'remove_text')\n      return inverse\n    }\n\n    case 'remove_text': {\n      const inverse = op.set('type', 'insert_text')\n      return inverse\n    }\n\n    case 'add_mark': {\n      const inverse = op.set('type', 'remove_mark')\n      return inverse\n    }\n\n    case 'remove_mark': {\n      const inverse = op.set('type', 'add_mark')\n      return inverse\n    }\n\n    case 'set_mark': {\n      const { properties, mark } = op\n      const inverseMark = mark.merge(properties)\n      const inverseProperties = pick(mark, Object.keys(properties))\n      const inverse = op\n        .set('mark', inverseMark)\n        .set('properties', inverseProperties)\n      return inverse\n    }\n\n    case 'set_selection': {\n      const { properties, selection } = op\n      const inverseSelection = selection.merge(properties)\n      const inverseProps = pick(selection, Object.keys(properties))\n      const inverse = op\n        .set('selection', inverseSelection)\n        .set('properties', inverseProps)\n      return inverse\n    }\n\n    case 'set_value': {\n      const { properties, value } = op\n      const inverseValue = value.merge(properties)\n      const inverseProperties = pick(value, Object.keys(properties))\n      const inverse = op\n        .set('value', inverseValue)\n        .set('properties', inverseProperties)\n      return inverse\n    }\n\n    default: {\n      throw new Error(`Unknown operation type: \"${type}\".`)\n    }\n  }\n}\n\n/**\n * Export.\n *\n * @type {Function}\n */\n\nexport default invertOperation\n","import isPlainObject from 'is-plain-object'\nimport { List, Record, Map } from 'immutable'\n\nimport Mark from './mark'\nimport Node from './node'\nimport PathUtils from '../utils/path-utils'\nimport Selection from './selection'\nimport Value from './value'\nimport apply from '../operations/apply'\nimport invert from '../operations/invert'\n\n/**\n * Operation attributes.\n *\n * @type {Array}\n */\n\nconst OPERATION_ATTRIBUTES = {\n  add_mark: ['value', 'path', 'offset', 'length', 'mark', 'data'],\n  insert_node: ['value', 'path', 'node', 'data'],\n  insert_text: ['value', 'path', 'offset', 'text', 'marks', 'data'],\n  merge_node: ['value', 'path', 'position', 'properties', 'target', 'data'],\n  move_node: ['value', 'path', 'newPath', 'data'],\n  remove_mark: ['value', 'path', 'offset', 'length', 'mark', 'data'],\n  remove_node: ['value', 'path', 'node', 'data'],\n  remove_text: ['value', 'path', 'offset', 'text', 'marks', 'data'],\n  set_mark: ['value', 'path', 'offset', 'length', 'mark', 'properties', 'data'],\n  set_node: ['value', 'path', 'node', 'properties', 'data'],\n  set_selection: ['value', 'selection', 'properties', 'data'],\n  set_value: ['value', 'properties', 'data'],\n  split_node: ['value', 'path', 'position', 'properties', 'target', 'data'],\n}\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  length: undefined,\n  mark: undefined,\n  marks: undefined,\n  newPath: undefined,\n  node: undefined,\n  offset: undefined,\n  path: undefined,\n  position: undefined,\n  properties: undefined,\n  selection: undefined,\n  target: undefined,\n  text: undefined,\n  type: undefined,\n  value: undefined,\n  data: undefined,\n}\n\n/**\n * Operation.\n *\n * @type {Operation}\n */\n\nclass Operation extends Record(DEFAULTS) {\n  /**\n   * Create a new `Operation` with `attrs`.\n   *\n   * @param {Object|Array|List|String|Operation} attrs\n   * @return {Operation}\n   */\n\n  static create(attrs = {}) {\n    if (Operation.isOperation(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Operation.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Operation.create\\` only accepts objects or operations, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Operations` from `elements`.\n   *\n   * @param {Array<Operation|Object>|List<Operation|Object>} elements\n   * @return {List<Operation>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Operation.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Operation.createList\\` only accepts arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a `Operation` from a JSON `object`.\n   *\n   * @param {Object|Operation} object\n   * @return {Operation}\n   */\n\n  static fromJSON(object) {\n    if (Operation.isOperation(object)) {\n      return object\n    }\n\n    const { type } = object\n    const ATTRIBUTES = OPERATION_ATTRIBUTES[type]\n    const attrs = { type }\n\n    if (!ATTRIBUTES) {\n      throw new Error(\n        `\\`Operation.fromJSON\\` was passed an unrecognized operation type: \"${type}\"`\n      )\n    }\n\n    for (const key of ATTRIBUTES) {\n      let v = object[key]\n\n      // Default `data` to an empty object.\n      if (key === 'data' && v === undefined) {\n        v = {}\n      }\n\n      if (v === undefined) {\n        // Skip keys for objects that should not be serialized, and are only used\n        // for providing the local-only invert behavior for the history stack.\n        if (key == 'document') continue\n        if (key == 'selection') continue\n        if (key == 'value') continue\n        if (key == 'node' && type != 'insert_node') continue\n\n        throw new Error(\n          `\\`Operation.fromJSON\\` was passed a \"${type}\" operation without the required \"${key}\" attribute.`\n        )\n      }\n\n      if (key === 'path' || key === 'newPath') {\n        v = PathUtils.create(v)\n      }\n\n      if (key === 'mark') {\n        v = Mark.create(v)\n      }\n\n      if (key === 'marks' && v != null) {\n        v = Mark.createSet(v)\n      }\n\n      if (key === 'node') {\n        v = Node.create(v)\n      }\n\n      if (key === 'selection') {\n        v = Selection.create(v)\n      }\n\n      if (key === 'value') {\n        v = Value.create(v)\n      }\n\n      if (key === 'properties' && type === 'merge_node') {\n        v = Node.createProperties(v)\n      }\n\n      if (key === 'properties' && type === 'set_mark') {\n        v = Mark.createProperties(v)\n      }\n\n      if (key === 'properties' && type === 'set_node') {\n        v = Node.createProperties(v)\n      }\n\n      if (key === 'properties' && type === 'set_selection') {\n        v = Selection.createProperties(v)\n      }\n\n      if (key === 'properties' && type === 'set_value') {\n        v = Value.createProperties(v)\n      }\n\n      if (key === 'properties' && type === 'split_node') {\n        v = Node.createProperties(v)\n      }\n\n      if (key === 'data') {\n        v = Map(v)\n      }\n\n      attrs[key] = v\n    }\n\n    const node = new Operation(attrs)\n    return node\n  }\n\n  /**\n   * Check if `any` is a list of operations.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isOperationList(any) {\n    return List.isList(any) && any.every(item => Operation.isOperation(item))\n  }\n\n  /**\n   * Apply the operation to a `value`.\n   *\n   * @param {Value} value\n   * @return {Value}\n   */\n\n  apply(value) {\n    const next = apply(value, this)\n    return next\n  }\n\n  /**\n   * Invert the operation.\n   *\n   * @return {Operation}\n   */\n\n  invert() {\n    const inverted = invert(this)\n    return inverted\n  }\n\n  /**\n   * Return a JSON representation of the operation.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const { object, type } = this\n    const json = { object, type }\n    const ATTRIBUTES = OPERATION_ATTRIBUTES[type]\n\n    for (const key of ATTRIBUTES) {\n      let value = this[key]\n\n      // Skip keys for objects that should not be serialized, and are only used\n      // for providing the local-only invert behavior for the history stack.\n      if (key == 'document') continue\n      if (key == 'selection') continue\n      if (key == 'value') continue\n      if (key == 'node' && type != 'insert_node') continue\n\n      if (\n        key == 'mark' ||\n        key == 'marks' ||\n        key == 'node' ||\n        key == 'path' ||\n        key == 'newPath'\n      ) {\n        value = value.toJSON()\n      }\n\n      if (key == 'properties' && type == 'merge_node') {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('type' in value) v.type = value.type\n        value = v\n      }\n\n      if (key == 'properties' && type == 'set_mark') {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('type' in value) v.type = value.type\n        value = v\n      }\n\n      if (key == 'properties' && type == 'set_node') {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('type' in value) v.type = value.type\n        value = v\n      }\n\n      if (key == 'properties' && type == 'set_selection') {\n        const v = {}\n        if ('anchor' in value) v.anchor = value.anchor.toJSON()\n        if ('focus' in value) v.focus = value.focus.toJSON()\n        if ('isFocused' in value) v.isFocused = value.isFocused\n        if ('marks' in value) v.marks = value.marks && value.marks.toJSON()\n        value = v\n      }\n\n      if (key == 'properties' && type == 'set_value') {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('decorations' in value) v.decorations = value.decorations.toJS()\n        value = v\n      }\n\n      if (key == 'properties' && type == 'split_node') {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('type' in value) v.type = value.type\n        value = v\n      }\n\n      if (key === 'data') {\n        value = value.toJSON()\n      }\n\n      json[key] = value\n    }\n\n    return json\n  }\n}\n\n/**\n * Export.\n *\n * @type {Operation}\n */\n\nexport default Operation\n","import isPlainObject from 'is-plain-object'\nimport { Record } from 'immutable'\n\nimport Operation from './operation'\nimport Value from './value'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  operations: undefined,\n  value: undefined,\n}\n\n/**\n * Change.\n *\n * @type {Change}\n */\n\nclass Change extends Record(DEFAULTS) {\n  /**\n   * Create a new `Change` with `attrs`.\n   *\n   * @param {Object|Change} attrs\n   * @return {Change}\n   */\n\n  static create(attrs = {}) {\n    if (Change.isChange(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Change.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Change.create\\` only accepts objects or changes, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Change` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Change}\n   */\n\n  static fromJSON(object) {\n    const { value, operations = [] } = object\n\n    const change = new Change({\n      value: Value.create(value),\n      operations: Operation.createList(operations),\n    })\n\n    return change\n  }\n\n  /**\n   * Return a JSON representation of the change.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      value: this.value.toJSON(options),\n      operations: this.operations.toArray().map(o => o.toJSON(options)),\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Change}\n */\n\nexport default Change\n","/**\n * A plugin that adds a set of commands to the editor.\n *\n * @param {Object} commands\n * @return {Object}\n */\n\nfunction CommandsPlugin(commands = {}) {\n  /**\n   * On command, if it exists in our list of commands, call it.\n   *\n   * @param {Object} command\n   * @param {Editor} editor\n   * @param {Function} next\n   */\n\n  function onCommand(command, editor, next) {\n    const { type, args } = command\n    const fn = commands[type]\n    if (!fn) return next()\n    editor.command(fn, ...args)\n  }\n\n  /**\n   * On construct, register all the commands.\n   *\n   * @param {Editor} editor\n   * @param {Function} next\n   */\n\n  function onConstruct(editor, next) {\n    for (const command in commands) {\n      editor.registerCommand(command)\n    }\n\n    return next()\n  }\n\n  /**\n   * Return the plugin.\n   *\n   * @type {Object}\n   */\n\n  return {\n    onCommand,\n    onConstruct,\n  }\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default CommandsPlugin\n","import { reverse } from 'esrever'\n\n/**\n * Surrogate pair start and end points.\n *\n * @type {Number}\n */\n\nconst SURROGATE_START = 0xd800\nconst SURROGATE_END = 0xdfff\n\n/**\n * A regex to match space characters.\n *\n * @type {RegExp}\n */\n\nconst SPACE = /\\s/\n\n/**\n * A regex to match chameleon characters, that count as word characters as long\n * as they are inside of a word.\n *\n * @type {RegExp}\n */\n\nconst CHAMELEON = /['\\u2018\\u2019]/\n\n/**\n * A regex that matches punctuation.\n *\n * @type {RegExp}\n */\n\nconst PUNCTUATION = /[\\u0021-\\u0023\\u0025-\\u002A\\u002C-\\u002F\\u003A\\u003B\\u003F\\u0040\\u005B-\\u005D\\u005F\\u007B\\u007D\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E3B\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n\n/**\n * Is a character `code` in a surrogate character.\n *\n * @param {Number} code\n * @return {Boolean}\n */\n\nfunction isSurrogate(code) {\n  return SURROGATE_START <= code && code <= SURROGATE_END\n}\n\n/**\n * Is a character a word character? Needs the `remaining` characters too.\n *\n * @param {String} char\n * @param {String|Void} remaining\n * @return {Boolean}\n */\n\nfunction isWord(char, remaining) {\n  if (SPACE.test(char)) return false\n\n  // If it's a chameleon character, recurse to see if the next one is or not.\n  if (CHAMELEON.test(char)) {\n    let next = remaining.charAt(0)\n    const length = getCharLength(next)\n    next = remaining.slice(0, length)\n    const rest = remaining.slice(length)\n    if (isWord(next, rest)) return true\n  }\n\n  if (PUNCTUATION.test(char)) return false\n  return true\n}\n\n/**\n * Get the length of a `character`.\n *\n * @param {String} char\n * @return {Number}\n */\n\nfunction getCharLength(char) {\n  return isSurrogate(char.charCodeAt(0)) ? 2 : 1\n}\n\n/**\n * Get the offset to the end of the first character in `text`.\n *\n * @param {String} text\n * @return {Number}\n */\n\nfunction getCharOffset(text) {\n  const char = text.charAt(0)\n  return getCharLength(char)\n}\n\n/**\n * Get the offset to the end of the character before an `offset` in `text`.\n *\n * @param {String} text\n * @param {Number} offset\n * @return {Number}\n */\n\nfunction getCharOffsetBackward(text, offset) {\n  text = text.slice(0, offset)\n  text = reverse(text)\n  return getCharOffset(text)\n}\n\n/**\n * Get the offset to the end of the character after an `offset` in `text`.\n *\n * @param {String} text\n * @param {Number} offset\n * @return {Number}\n */\n\nfunction getCharOffsetForward(text, offset) {\n  text = text.slice(offset)\n  return getCharOffset(text)\n}\n\n/**\n * Get the offset to the end of the first word in `text`.\n *\n * @param {String} text\n * @return {Number}\n */\n\nfunction getWordOffset(text) {\n  let length = 0\n  let i = 0\n  let started = false\n  let char\n\n  while ((char = text.charAt(i))) {\n    const l = getCharLength(char)\n    char = text.slice(i, i + l)\n    const rest = text.slice(i + l)\n\n    if (isWord(char, rest)) {\n      started = true\n      length += l\n    } else if (!started) {\n      length += l\n    } else {\n      break\n    }\n\n    i += l\n  }\n\n  return length\n}\n\n/**\n * Get the offset to the end of the word before an `offset` in `text`.\n *\n * @param {String} text\n * @param {Number} offset\n * @return {Number}\n */\n\nfunction getWordOffsetBackward(text, offset) {\n  text = text.slice(0, offset)\n  text = reverse(text)\n  const o = getWordOffset(text)\n  return o\n}\n\n/**\n * Get the offset to the end of the word after an `offset` in `text`.\n *\n * @param {String} text\n * @param {Number} offset\n * @return {Number}\n */\n\nfunction getWordOffsetForward(text, offset) {\n  text = text.slice(offset)\n  const o = getWordOffset(text)\n  return o\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default {\n  getCharLength,\n  getCharOffset,\n  getCharOffsetBackward,\n  getCharOffsetForward,\n  getWordOffset,\n  getWordOffsetBackward,\n  getWordOffsetForward,\n  isSurrogate,\n  isWord,\n}\n","import { List } from 'immutable'\nimport Block from '../models/block'\nimport Inline from '../models/inline'\nimport Mark from '../models/mark'\nimport Node from '../models/node'\nimport TextUtils from '../utils/text-utils'\n\n/**\n * Ensure that an expanded selection is deleted first, and return the updated\n * range to account for the deleted part.\n *\n * @param {Editor}\n */\n\nfunction deleteExpandedAtRange(editor, range) {\n  if (range.isExpanded) {\n    editor.deleteAtRange(range)\n  }\n\n  const { value } = editor\n  const { document } = value\n  const { start, end } = range\n\n  if (document.hasDescendant(start.key)) {\n    range = range.moveToStart()\n  } else {\n    range = range.moveTo(end.key, 0).normalize(document)\n  }\n\n  return range\n}\n\n/**\n * Commands.\n *\n * @type {Object}\n */\n\nconst Commands = {}\n\n/**\n * Add a new `mark` to the characters at `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Mixed} mark\n */\n\nCommands.addMarkAtRange = (editor, range, mark) => {\n  if (range.isCollapsed) return\n\n  const { value } = editor\n  const { document } = value\n  const { start, end } = range\n  const texts = document.getTextsAtRange(range)\n\n  editor.withoutNormalizing(() => {\n    texts.forEach(node => {\n      const { key } = node\n      let index = 0\n      let length = node.text.length\n\n      if (key == start.key) index = start.offset\n      if (key == end.key) length = end.offset\n      if (key == start.key && key == end.key) length = end.offset - start.offset\n\n      editor.addMarkByKey(key, index, length, mark)\n    })\n  })\n}\n\n/**\n * Add a list of `marks` to the characters at `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Array<Mixed>} mark\n */\n\nCommands.addMarksAtRange = (editor, range, marks) => {\n  marks.forEach(mark => editor.addMarkAtRange(range, mark))\n}\n\n/**\n * Delete everything in a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n */\n\nCommands.deleteAtRange = (editor, range) => {\n  // Snapshot the selection, which creates an extra undo save point, so that\n  // when you undo a delete, the expanded selection will be retained.\n  editor.snapshotSelection()\n\n  const { value } = editor\n  const { start, end } = range\n  let startKey = start.key\n  let startOffset = start.offset\n  let endKey = end.key\n  let endOffset = end.offset\n  let { document } = value\n  let isStartVoid = document.hasVoidParent(startKey, editor)\n  let isEndVoid = document.hasVoidParent(endKey, editor)\n  let startBlock = document.getClosestBlock(startKey)\n  let endBlock = document.getClosestBlock(endKey)\n\n  // Check if we have a \"hanging\" selection case where the even though the\n  // selection extends into the start of the end node, we actually want to\n  // ignore that for UX reasons.\n  const isHanging =\n    startOffset == 0 &&\n    endOffset == 0 &&\n    isStartVoid == false &&\n    startKey == startBlock.getFirstText().key &&\n    endKey == endBlock.getFirstText().key\n\n  // If it's a hanging selection, nudge it back to end in the previous text.\n  if (isHanging && isEndVoid) {\n    const prevText = document.getPreviousText(endKey)\n    endKey = prevText.key\n    endOffset = prevText.text.length\n    isEndVoid = document.hasVoidParent(endKey, editor)\n  }\n\n  editor.withoutNormalizing(() => {\n    // If the start node is inside a void node, remove the void node and update\n    // the starting point to be right after it, continuously until the start point\n    // is not a void, or until the entire range is handled.\n    while (isStartVoid) {\n      const startVoid = document.getClosestVoid(startKey, editor)\n      const nextText = document.getNextText(startKey)\n      editor.removeNodeByKey(startVoid.key)\n\n      // If the start and end keys are the same, we're done.\n      if (startKey == endKey) return\n\n      // If there is no next text node, we're done.\n      if (!nextText) return\n\n      // Continue...\n      document = editor.value.document\n      startKey = nextText.key\n      startOffset = 0\n      isStartVoid = document.hasVoidParent(startKey, editor)\n    }\n\n    // If the end node is inside a void node, do the same thing but backwards. But\n    // we don't need any aborting checks because if we've gotten this far there\n    // must be a non-void node that will exit the loop.\n    while (isEndVoid) {\n      const endVoid = document.getClosestVoid(endKey, editor)\n      const prevText = document.getPreviousText(endKey)\n      editor.removeNodeByKey(endVoid.key)\n\n      // Continue...\n      document = editor.value.document\n      endKey = prevText.key\n      endOffset = prevText.text.length\n      isEndVoid = document.hasVoidParent(endKey, editor)\n    }\n\n    // If the start and end key are the same, and it was a hanging selection, we\n    // can just remove the entire block.\n    if (startKey == endKey && isHanging) {\n      editor.removeNodeByKey(startBlock.key)\n      return\n    } else if (startKey == endKey) {\n      // Otherwise, if it wasn't hanging, we're inside a single text node, so we can\n      // simply remove the text in the range.\n      const index = startOffset\n      const length = endOffset - startOffset\n      editor.removeTextByKey(startKey, index, length)\n      return\n    } else {\n      // Otherwise, we need to recursively remove text and nodes inside the start\n      // block after the start offset and inside the end block before the end\n      // offset. Then remove any blocks that are in between the start and end\n      // blocks. Then finally merge the start and end nodes.\n      startBlock = document.getClosestBlock(startKey)\n      endBlock = document.getClosestBlock(endKey)\n      const startText = document.getNode(startKey)\n      const endText = document.getNode(endKey)\n      const startLength = startText.text.length - startOffset\n      const endLength = endOffset\n\n      const ancestor = document.getCommonAncestor(startKey, endKey)\n      const startChild = ancestor.getFurthestAncestor(startKey)\n      const endChild = ancestor.getFurthestAncestor(endKey)\n\n      const startParent = document.getParent(startBlock.key)\n      const startParentIndex = startParent.nodes.indexOf(startBlock)\n      const endParentIndex = startParent.nodes.indexOf(endBlock)\n\n      let child\n\n      // Iterate through all of the nodes in the tree after the start text node\n      // but inside the end child, and remove them.\n      child = startText\n\n      while (child.key != startChild.key) {\n        const parent = document.getParent(child.key)\n        const index = parent.nodes.indexOf(child)\n        const afters = parent.nodes.slice(index + 1)\n\n        afters.reverse().forEach(node => {\n          editor.removeNodeByKey(node.key)\n        })\n\n        child = parent\n      }\n\n      // Remove all of the middle children.\n      const startChildIndex = ancestor.nodes.indexOf(startChild)\n      const endChildIndex = ancestor.nodes.indexOf(endChild)\n      const middles = ancestor.nodes.slice(startChildIndex + 1, endChildIndex)\n\n      middles.reverse().forEach(node => {\n        editor.removeNodeByKey(node.key)\n      })\n\n      // Remove the nodes before the end text node in the tree.\n      child = endText\n\n      while (child.key != endChild.key) {\n        const parent = document.getParent(child.key)\n        const index = parent.nodes.indexOf(child)\n        const befores = parent.nodes.slice(0, index)\n\n        befores.reverse().forEach(node => {\n          editor.removeNodeByKey(node.key)\n        })\n\n        child = parent\n      }\n\n      // Remove any overlapping text content from the leaf text nodes.\n      if (startLength != 0) {\n        editor.removeTextByKey(startKey, startOffset, startLength)\n      }\n\n      if (endLength != 0) {\n        editor.removeTextByKey(endKey, 0, endOffset)\n      }\n\n      // If the start and end blocks aren't the same, move and merge the end block\n      // into the start block.\n      if (startBlock.key != endBlock.key) {\n        document = editor.value.document\n        const lonely = document.getFurthestOnlyChildAncestor(endBlock.key)\n\n        // Move the end block to be right after the start block.\n        if (endParentIndex != startParentIndex + 1) {\n          editor.moveNodeByKey(\n            endBlock.key,\n            startParent.key,\n            startParentIndex + 1\n          )\n        }\n\n        // If the selection is hanging, just remove the start block, otherwise\n        // merge the end block into it.\n        if (isHanging) {\n          editor.removeNodeByKey(startBlock.key)\n        } else {\n          editor.mergeNodeByKey(endBlock.key)\n        }\n\n        // If nested empty blocks are left over above the end block, remove them.\n        if (lonely) {\n          editor.removeNodeByKey(lonely.key)\n        }\n      }\n    }\n  })\n}\n\n/**\n * Delete backward `n` characters at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Number} n (optional)\n */\n\nCommands.deleteBackwardAtRange = (editor, range, n = 1) => {\n  if (n === 0) return\n  const { value } = editor\n  const { document } = value\n  const { start, focus } = range\n\n  // If the range is expanded, perform a regular delete instead.\n  if (range.isExpanded) {\n    editor.deleteAtRange(range)\n    return\n  }\n\n  const voidParent = document.getClosestVoid(start.key, editor)\n\n  // If there is a void parent, delete it.\n  if (voidParent) {\n    editor.removeNodeByKey(voidParent.key)\n    return\n  }\n\n  // If the range is at the start of the document, abort.\n  if (start.isAtStartOfNode(document)) {\n    return\n  }\n\n  const block = document.getClosestBlock(start.key)\n\n  // PERF: If the closest block is empty, remove it. This is just a shortcut,\n  // since merging it would result in the same outcome.\n  if (\n    document.nodes.size !== 1 &&\n    block &&\n    block.text === '' &&\n    block.nodes.size === 1\n  ) {\n    editor.removeNodeByKey(block.key)\n    return\n  }\n\n  // If the range is at the start of the text node, we need to figure out what\n  // is behind it to know how to delete...\n  const text = document.getDescendant(start.key)\n\n  if (start.isAtStartOfNode(text)) {\n    let prev = document.getPreviousText(text.key)\n    const inline = document.getClosestInline(text.key)\n\n    // If the range is at the start of the inline node, and previous text node\n    // is empty, take the text node before that, or \"prevBlock\" would be the\n    // same node as \"block\"\n    if (inline && prev.text === '') {\n      prev = document.getPreviousText(prev.key)\n    }\n\n    const prevBlock = document.getClosestBlock(prev.key)\n    const prevVoid = document.getClosestVoid(prev.key, editor)\n\n    // If the previous text node has a void parent, remove it.\n    if (prevVoid) {\n      editor.removeNodeByKey(prevVoid.key)\n      return\n    }\n\n    // If we're deleting by one character and the previous text node is not\n    // inside the current block, we need to merge the two blocks together.\n    if (n == 1 && prevBlock != block) {\n      range = range.moveAnchorTo(prev.key, prev.text.length)\n      editor.deleteAtRange(range)\n      return\n    }\n  }\n\n  // If the focus offset is farther than the number of characters to delete,\n  // just remove the characters backwards inside the current node.\n  if (n < focus.offset) {\n    range = range.moveFocusBackward(n)\n    editor.deleteAtRange(range)\n    return\n  }\n\n  // Otherwise, we need to see how many nodes backwards to go.\n  let node = text\n  let offset = 0\n  let traversed = focus.offset\n\n  while (n > traversed) {\n    node = document.getPreviousText(node.key)\n    const next = traversed + node.text.length\n\n    if (n <= next) {\n      offset = next - n\n      break\n    } else {\n      traversed = next\n    }\n  }\n\n  range = range.moveAnchorTo(node.key, offset)\n  editor.deleteAtRange(range)\n}\n\n/**\n * Delete backward until the character boundary at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n */\n\nCommands.deleteCharBackwardAtRange = (editor, range) => {\n  if (range.isExpanded) {\n    editor.deleteAtRange(range)\n    return\n  }\n\n  const { value } = editor\n  const { document } = value\n  const { start } = range\n  const startBlock = document.getClosestBlock(start.key)\n  const offset = startBlock.getOffset(start.key)\n  const o = offset + start.offset\n  const { text } = startBlock\n  const n = TextUtils.getCharOffsetBackward(text, o)\n  editor.deleteBackwardAtRange(range, n)\n}\n\n/**\n * Delete forward until the character boundary at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n */\n\nCommands.deleteCharForwardAtRange = (editor, range) => {\n  if (range.isExpanded) {\n    editor.deleteAtRange(range)\n    return\n  }\n\n  const { value } = editor\n  const { document } = value\n  const { start } = range\n  const startBlock = document.getClosestBlock(start.key)\n  const offset = startBlock.getOffset(start.key)\n  const o = offset + start.offset\n  const { text } = startBlock\n  const n = TextUtils.getCharOffsetForward(text, o)\n  editor.deleteForwardAtRange(range, n)\n}\n\n/**\n * Delete forward `n` characters at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Number} n (optional)\n */\n\nCommands.deleteForwardAtRange = (editor, range, n = 1) => {\n  if (n === 0) return\n  const { value } = editor\n  const { document } = value\n  const { start, focus } = range\n\n  // If the range is expanded, perform a regular delete instead.\n  if (range.isExpanded) {\n    editor.deleteAtRange(range)\n    return\n  }\n\n  const voidParent = document.getClosestVoid(start.key, editor)\n\n  // If the node has a void parent, delete it.\n  if (voidParent) {\n    editor.removeNodeByKey(voidParent.key)\n    return\n  }\n\n  const block = document.getClosestBlock(start.key)\n\n  // If the closest is not void, but empty, remove it\n  if (\n    block &&\n    !editor.isVoid(block) &&\n    block.text === '' &&\n    document.nodes.size !== 1\n  ) {\n    const nextBlock = document.getNextBlock(block.key)\n    editor.removeNodeByKey(block.key)\n\n    if (nextBlock && nextBlock.key) {\n      editor.moveToStartOfNode(nextBlock)\n    }\n\n    return\n  }\n\n  // If the range is at the start of the document, abort.\n  if (start.isAtEndOfNode(document)) {\n    return\n  }\n\n  // If the range is at the start of the text node, we need to figure out what\n  // is behind it to know how to delete...\n  const text = document.getDescendant(start.key)\n\n  if (start.isAtEndOfNode(text)) {\n    const next = document.getNextText(text.key)\n    const nextBlock = document.getClosestBlock(next.key)\n    const nextVoid = document.getClosestVoid(next.key, editor)\n\n    // If the next text node has a void parent, remove it.\n    if (nextVoid) {\n      editor.removeNodeByKey(nextVoid.key)\n      return\n    }\n\n    // If we're deleting by one character and the previous text node is not\n    // inside the current block, we need to merge the two blocks together.\n    if (n == 1 && nextBlock != block) {\n      range = range.moveFocusTo(next.key, 0)\n      editor.deleteAtRange(range)\n      return\n    }\n  }\n\n  // If the remaining characters to the end of the node is greater than or equal\n  // to the number of characters to delete, just remove the characters forwards\n  // inside the current node.\n  if (n <= text.text.length - focus.offset) {\n    range = range.moveFocusForward(n)\n    editor.deleteAtRange(range)\n    return\n  }\n\n  // Otherwise, we need to see how many nodes forwards to go.\n  let node = text\n  let offset = focus.offset\n  let traversed = text.text.length - focus.offset\n\n  while (n > traversed) {\n    node = document.getNextText(node.key)\n    const next = traversed + node.text.length\n\n    if (n <= next) {\n      offset = n - traversed\n      break\n    } else {\n      traversed = next\n    }\n  }\n\n  range = range.moveFocusTo(node.key, offset)\n  editor.deleteAtRange(range)\n}\n\n/**\n * Delete backward until the line boundary at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n */\n\nCommands.deleteLineBackwardAtRange = (editor, range) => {\n  if (range.isExpanded) {\n    editor.deleteAtRange(range)\n    return\n  }\n\n  const { value } = editor\n  const { document } = value\n  const { start } = range\n  const startBlock = document.getClosestBlock(start.key)\n  const offset = startBlock.getOffset(start.key)\n  const o = offset + start.offset\n  editor.deleteBackwardAtRange(range, o)\n}\n\n/**\n * Delete forward until the line boundary at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n */\n\nCommands.deleteLineForwardAtRange = (editor, range) => {\n  if (range.isExpanded) {\n    editor.deleteAtRange(range)\n    return\n  }\n\n  const { value } = editor\n  const { document } = value\n  const { start } = range\n  const startBlock = document.getClosestBlock(start.key)\n  const offset = startBlock.getOffset(start.key)\n  const o = offset + start.offset\n  editor.deleteForwardAtRange(range, startBlock.text.length - o)\n}\n\n/**\n * Delete backward until the word boundary at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n */\n\nCommands.deleteWordBackwardAtRange = (editor, range) => {\n  if (range.isExpanded) {\n    editor.deleteAtRange(range)\n    return\n  }\n\n  const { value } = editor\n  const { document } = value\n  const { start } = range\n  const startBlock = document.getClosestBlock(start.key)\n  const offset = startBlock.getOffset(start.key)\n  const o = offset + start.offset\n  const { text } = startBlock\n  const n = o === 0 ? 1 : TextUtils.getWordOffsetBackward(text, o)\n  editor.deleteBackwardAtRange(range, n)\n}\n\n/**\n * Delete forward until the word boundary at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n */\n\nCommands.deleteWordForwardAtRange = (editor, range) => {\n  if (range.isExpanded) {\n    editor.deleteAtRange(range)\n    return\n  }\n\n  const { value } = editor\n  const { document } = value\n  const { start } = range\n  const startBlock = document.getClosestBlock(start.key)\n  const offset = startBlock.getOffset(start.key)\n  const o = offset + start.offset\n  const { text } = startBlock\n  const wordOffset = TextUtils.getWordOffsetForward(text, o)\n  const n = wordOffset === 0 ? 1 : wordOffset\n  editor.deleteForwardAtRange(range, n)\n}\n\n/**\n * Insert a `block` node at `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Block|String|Object} block\n */\n\nCommands.insertBlockAtRange = (editor, range, block) => {\n  range = deleteExpandedAtRange(editor, range)\n  block = Block.create(block)\n\n  const { value } = editor\n  const { document } = value\n  const { start } = range\n  let startKey = start.key\n  let startOffset = start.offset\n  const startBlock = document.getClosestBlock(startKey)\n  const startInline = document.getClosestInline(startKey)\n  const parent = document.getParent(startBlock.key)\n  const index = parent.nodes.indexOf(startBlock)\n\n  if (editor.isVoid(startBlock)) {\n    const extra = start.isAtEndOfNode(startBlock) ? 1 : 0\n    editor.insertNodeByKey(parent.key, index + extra, block)\n  } else if (!startInline && startBlock.text === '') {\n    editor.insertNodeByKey(parent.key, index + 1, block)\n  } else if (start.isAtStartOfNode(startBlock)) {\n    editor.insertNodeByKey(parent.key, index, block)\n  } else if (start.isAtEndOfNode(startBlock)) {\n    editor.insertNodeByKey(parent.key, index + 1, block)\n  } else {\n    if (startInline && editor.isVoid(startInline)) {\n      const atEnd = start.isAtEndOfNode(startInline)\n      const siblingText = atEnd\n        ? document.getNextText(startKey)\n        : document.getPreviousText(startKey)\n\n      const splitRange = atEnd\n        ? range.moveToStartOfNode(siblingText)\n        : range.moveToEndOfNode(siblingText)\n\n      startKey = splitRange.start.key\n      startOffset = splitRange.start.offset\n    }\n\n    editor.withoutNormalizing(() => {\n      editor.splitDescendantsByKey(startBlock.key, startKey, startOffset)\n      editor.insertNodeByKey(parent.key, index + 1, block)\n    })\n  }\n}\n\n/**\n * Insert a `fragment` at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Document} fragment\n */\n\nCommands.insertFragmentAtRange = (editor, range, fragment) => {\n  editor.withoutNormalizing(() => {\n    range = deleteExpandedAtRange(editor, range)\n\n    // If the fragment is empty, there's nothing to do after deleting.\n    if (!fragment.nodes.size) return\n\n    // Regenerate the keys for all of the fragments nodes, so that they're\n    // guaranteed not to collide with the existing keys in the document. Otherwise\n    // they will be rengerated automatically and we won't have an easy way to\n    // reference them.\n    fragment = fragment.mapDescendants(child => child.regenerateKey())\n\n    // Calculate a few things...\n    const { start } = range\n    const { value } = editor\n    let { document } = value\n    let startText = document.getDescendant(start.key)\n    let startBlock = document.getClosestBlock(startText.key)\n    let startChild = startBlock.getFurthestAncestor(startText.key)\n    const isAtStart = start.isAtStartOfNode(startBlock)\n    const parent = document.getParent(startBlock.key)\n    const index = parent.nodes.indexOf(startBlock)\n    const blocks = fragment.getBlocks()\n    const firstChild = fragment.nodes.first()\n    const lastChild = fragment.nodes.last()\n    const firstBlock = blocks.first()\n    const lastBlock = blocks.last()\n    const insertionNode = findInsertionNode(fragment, document, startBlock.key)\n\n    // If the fragment only contains a void block, use `insertBlock` instead.\n    if (firstBlock === lastBlock && editor.isVoid(firstBlock)) {\n      editor.insertBlockAtRange(range, firstBlock)\n      return\n    }\n\n    // If inserting the entire fragment and it starts or ends with a single\n    // nested block, e.g. a table, we do not merge it with existing blocks.\n    if (\n      insertionNode === fragment &&\n      (firstChild.hasBlockChildren() || lastChild.hasBlockChildren())\n    ) {\n      fragment.nodes.reverse().forEach(node => {\n        editor.insertBlockAtRange(range, node)\n      })\n      return\n    }\n\n    // If the first and last block aren't the same, we need to insert all of the\n    // nodes after the insertion node's first block at the index.\n    if (firstBlock != lastBlock) {\n      const lonelyParent = insertionNode.getFurthest(\n        firstBlock.key,\n        p => p.nodes.size == 1\n      )\n      const lonelyChild = lonelyParent || firstBlock\n\n      const startIndex = parent.nodes.indexOf(startBlock)\n      const excludingLonelyChild = insertionNode.removeNode(lonelyChild.key)\n\n      excludingLonelyChild.nodes.forEach((node, i) => {\n        const newIndex = startIndex + i + 1\n        editor.insertNodeByKey(parent.key, newIndex, node)\n      })\n    }\n\n    // Check if we need to split the node.\n    if (start.offset != 0) {\n      editor.splitDescendantsByKey(startChild.key, start.key, start.offset)\n    }\n\n    // Update our variables with the new value.\n    document = editor.value.document\n    startText = document.getDescendant(start.key)\n    startBlock = document.getClosestBlock(start.key)\n    startChild = startBlock.getFurthestAncestor(startText.key)\n\n    // If the first and last block aren't the same, we need to move any of the\n    // starting block's children after the split into the last block of the\n    // fragment, which has already been inserted.\n    if (firstBlock != lastBlock) {\n      const nextChild = isAtStart\n        ? startChild\n        : startBlock.getNextSibling(startChild.key)\n      const nextNodes = nextChild\n        ? startBlock.nodes.skipUntil(n => n.key == nextChild.key)\n        : List()\n      const lastIndex = lastBlock.nodes.size\n\n      nextNodes.forEach((node, i) => {\n        const newIndex = lastIndex + i\n        editor.moveNodeByKey(node.key, lastBlock.key, newIndex)\n      })\n    }\n\n    // If the starting block is empty, we replace it entirely with the first block\n    // of the fragment, since this leads to a more expected behavior for the user.\n    if (!editor.isVoid(startBlock) && startBlock.text === '') {\n      editor.removeNodeByKey(startBlock.key)\n      editor.insertNodeByKey(parent.key, index, firstBlock)\n    } else {\n      // Otherwise, we maintain the starting block, and insert all of the first\n      // block's inline nodes into it at the split point.\n      const inlineChild = startBlock.getFurthestAncestor(startText.key)\n      const inlineIndex = startBlock.nodes.indexOf(inlineChild)\n\n      firstBlock.nodes.forEach((inline, i) => {\n        const o = start.offset == 0 ? 0 : 1\n        const newIndex = inlineIndex + i + o\n        editor.insertNodeByKey(startBlock.key, newIndex, inline)\n      })\n    }\n  })\n}\n\nconst findInsertionNode = (fragment, document, startKey) => {\n  const hasSingleNode = object => object && object.nodes.size === 1\n  const firstNode = object => object && object.nodes.first()\n  let node = fragment\n\n  if (hasSingleNode(fragment)) {\n    let fragmentInner = firstNode(fragment)\n\n    const matches = documentNode => documentNode.type === fragmentInner.type\n    let documentInner = document.getFurthest(startKey, matches)\n\n    if (documentInner === document.getParent(startKey)) node = fragmentInner\n\n    while (hasSingleNode(fragmentInner) && hasSingleNode(documentInner)) {\n      fragmentInner = firstNode(fragmentInner)\n      documentInner = firstNode(documentInner)\n\n      if (fragmentInner.type === documentInner.type) {\n        node = fragmentInner\n      } else {\n        break\n      }\n    }\n  }\n\n  return node\n}\n\n/**\n * Insert an `inline` node at `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Inline|String|Object} inline\n */\n\nCommands.insertInlineAtRange = (editor, range, inline) => {\n  inline = Inline.create(inline)\n\n  editor.withoutNormalizing(() => {\n    range = deleteExpandedAtRange(editor, range)\n\n    const { value } = editor\n    const { document } = value\n    const { start } = range\n    const parent = document.getParent(start.key)\n    const startText = document.assertDescendant(start.key)\n    const index = parent.nodes.indexOf(startText)\n\n    if (editor.isVoid(parent)) return\n\n    editor.splitNodeByKey(start.key, start.offset)\n    editor.insertNodeByKey(parent.key, index + 1, inline)\n  })\n}\n\n/**\n * Insert `text` at a `range`, with optional `marks`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {String} text\n * @param {Set<Mark>} marks (optional)\n */\n\nCommands.insertTextAtRange = (editor, range, text, marks) => {\n  range = deleteExpandedAtRange(editor, range)\n\n  const { value } = editor\n  const { document } = value\n  const { start } = range\n  const offset = start.offset\n  const parent = document.getParent(start.key)\n\n  if (editor.isVoid(parent)) {\n    return\n  }\n\n  editor.insertTextByKey(start.key, offset, text, marks)\n}\n\n/**\n * Remove an existing `mark` to the characters at `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Mark|String} mark (optional)\n */\n\nCommands.removeMarkAtRange = (editor, range, mark) => {\n  if (range.isCollapsed) return\n\n  const { value } = editor\n  const { document } = value\n  const texts = document.getTextsAtRange(range)\n  const { start, end } = range\n\n  editor.withoutNormalizing(() => {\n    texts.forEach(node => {\n      const { key } = node\n      let index = 0\n      let length = node.text.length\n\n      if (key == start.key) index = start.offset\n      if (key == end.key) length = end.offset\n      if (key == start.key && key == end.key) length = end.offset - start.offset\n\n      editor.removeMarkByKey(key, index, length, mark)\n    })\n  })\n}\n\n/**\n * Set the `properties` of block nodes in a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Object|String} properties\n */\n\nCommands.setBlocksAtRange = (editor, range, properties) => {\n  const { value } = editor\n  const { document } = value\n  const blocks = document.getLeafBlocksAtRange(range)\n\n  const { start, end, isCollapsed } = range\n  const isStartVoid = document.hasVoidParent(start.key, editor)\n  const startBlock = document.getClosestBlock(start.key)\n  const endBlock = document.getClosestBlock(end.key)\n\n  // Check if we have a \"hanging\" selection case where the even though the\n  // selection extends into the start of the end node, we actually want to\n  // ignore that for UX reasons.\n  const isHanging =\n    isCollapsed == false &&\n    start.offset == 0 &&\n    end.offset == 0 &&\n    isStartVoid == false &&\n    start.key == startBlock.getFirstText().key &&\n    end.key == endBlock.getFirstText().key\n\n  // If it's a hanging selection, ignore the last block.\n  const sets = isHanging ? blocks.slice(0, -1) : blocks\n\n  editor.withoutNormalizing(() => {\n    sets.forEach(block => {\n      editor.setNodeByKey(block.key, properties)\n    })\n  })\n}\n\n/**\n * Set the `properties` of inline nodes in a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Object|String} properties\n */\n\nCommands.setInlinesAtRange = (editor, range, properties) => {\n  const { value } = editor\n  const { document } = value\n  const inlines = document.getLeafInlinesAtRange(range)\n\n  editor.withoutNormalizing(() => {\n    inlines.forEach(inline => {\n      editor.setNodeByKey(inline.key, properties)\n    })\n  })\n}\n\n/**\n * Split the block nodes at a `range`, to optional `height`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Number} height (optional)\n */\n\nCommands.splitBlockAtRange = (editor, range, height = 1) => {\n  range = deleteExpandedAtRange(editor, range)\n\n  const { start, end } = range\n  let { value } = editor\n  let { document } = value\n  let node = document.assertDescendant(start.key)\n  let parent = document.getClosestBlock(node.key)\n  let h = 0\n\n  while (parent && parent.object == 'block' && h < height) {\n    node = parent\n    parent = document.getClosestBlock(parent.key)\n    h++\n  }\n\n  editor.withoutNormalizing(() => {\n    editor.splitDescendantsByKey(node.key, start.key, start.offset)\n\n    value = editor.value\n    document = value.document\n\n    if (range.isExpanded) {\n      if (range.isBackward) range = range.flip()\n      const nextBlock = document.getNextBlock(node.key)\n      range = range.moveAnchorToStartOfNode(nextBlock)\n      range = range.setFocus(range.focus.setPath(null))\n\n      if (start.key === end.key) {\n        range = range.moveFocusTo(range.anchor.key, end.offset - start.offset)\n      }\n\n      range = document.resolveRange(range)\n      editor.deleteAtRange(range)\n    }\n  })\n}\n\n/**\n * Split the inline nodes at a `range`, to optional `height`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Number} height (optional)\n */\n\nCommands.splitInlineAtRange = (editor, range, height = Infinity) => {\n  range = deleteExpandedAtRange(editor, range)\n\n  const { start } = range\n  const { value } = editor\n  const { document } = value\n  let node = document.assertDescendant(start.key)\n  let parent = document.getClosestInline(node.key)\n  let h = 0\n\n  while (parent && parent.object == 'inline' && h < height) {\n    node = parent\n    parent = document.getClosestInline(parent.key)\n    h++\n  }\n\n  editor.splitDescendantsByKey(node.key, start.key, start.offset)\n}\n\n/**\n * Add or remove a `mark` from the characters at `range`, depending on whether\n * it's already there.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Mixed} mark\n */\n\nCommands.toggleMarkAtRange = (editor, range, mark) => {\n  if (range.isCollapsed) return\n\n  mark = Mark.create(mark)\n\n  const { value } = editor\n  const { document } = value\n  const marks = document.getActiveMarksAtRange(range)\n  const exists = marks.some(m => m.equals(mark))\n\n  if (exists) {\n    editor.removeMarkAtRange(range, mark)\n  } else {\n    editor.addMarkAtRange(range, mark)\n  }\n}\n\n/**\n * Unwrap all of the block nodes in a `range` from a block with `properties`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {String|Object} properties\n */\n\nCommands.unwrapBlockAtRange = (editor, range, properties) => {\n  properties = Node.createProperties(properties)\n\n  const { value } = editor\n  let { document } = value\n  const blocks = document.getLeafBlocksAtRange(range)\n  const wrappers = blocks\n    .map(block => {\n      return document.getClosest(block.key, parent => {\n        if (parent.object != 'block') return false\n        if (properties.type != null && parent.type != properties.type)\n          return false\n        if (properties.data != null && !parent.data.isSuperset(properties.data))\n          return false\n        return true\n      })\n    })\n    .filter(exists => exists)\n    .toOrderedSet()\n    .toList()\n\n  editor.withoutNormalizing(() => {\n    wrappers.forEach(block => {\n      const first = block.nodes.first()\n      const last = block.nodes.last()\n      const parent = document.getParent(block.key)\n      const index = parent.nodes.indexOf(block)\n\n      const children = block.nodes.filter(child => {\n        return blocks.some(b => child == b || child.hasDescendant(b.key))\n      })\n\n      const firstMatch = children.first()\n      const lastMatch = children.last()\n\n      if (first == firstMatch && last == lastMatch) {\n        block.nodes.forEach((child, i) => {\n          editor.moveNodeByKey(child.key, parent.key, index + i)\n        })\n\n        editor.removeNodeByKey(block.key)\n      } else if (last == lastMatch) {\n        block.nodes.skipUntil(n => n == firstMatch).forEach((child, i) => {\n          editor.moveNodeByKey(child.key, parent.key, index + 1 + i)\n        })\n      } else if (first == firstMatch) {\n        block.nodes\n          .takeUntil(n => n == lastMatch)\n          .push(lastMatch)\n          .forEach((child, i) => {\n            editor.moveNodeByKey(child.key, parent.key, index + i)\n          })\n      } else {\n        const firstText = firstMatch.getFirstText()\n\n        editor.splitDescendantsByKey(block.key, firstText.key, 0)\n\n        document = editor.value.document\n\n        children.forEach((child, i) => {\n          if (i == 0) {\n            const extra = child\n            child = document.getNextBlock(child.key)\n            editor.removeNodeByKey(extra.key)\n          }\n\n          editor.moveNodeByKey(child.key, parent.key, index + 1 + i)\n        })\n      }\n    })\n  })\n}\n\n/**\n * Unwrap the inline nodes in a `range` from an inline with `properties`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {String|Object} properties\n */\n\nCommands.unwrapInlineAtRange = (editor, range, properties) => {\n  properties = Node.createProperties(properties)\n\n  const { value } = editor\n  const { document } = value\n  const texts = document.getTextsAtRange(range)\n  const inlines = texts\n    .map(text => {\n      return document.getClosest(text.key, parent => {\n        if (parent.object != 'inline') return false\n        if (properties.type != null && parent.type != properties.type)\n          return false\n        if (properties.data != null && !parent.data.isSuperset(properties.data))\n          return false\n        return true\n      })\n    })\n    .filter(exists => exists)\n    .toOrderedSet()\n    .toList()\n\n  editor.withoutNormalizing(() => {\n    inlines.forEach(inline => {\n      const parent = editor.value.document.getParent(inline.key)\n      const index = parent.nodes.indexOf(inline)\n\n      inline.nodes.forEach((child, i) => {\n        editor.moveNodeByKey(child.key, parent.key, index + i)\n      })\n\n      editor.removeNodeByKey(inline.key)\n    })\n  })\n}\n\n/**\n * Wrap all of the blocks in a `range` in a new `block`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Block|Object|String} block\n */\n\nCommands.wrapBlockAtRange = (editor, range, block) => {\n  block = Block.create(block)\n  block = block.set('nodes', block.nodes.clear())\n\n  const { value } = editor\n  const { document } = value\n\n  const blocks = document.getLeafBlocksAtRange(range)\n  const firstblock = blocks.first()\n  const lastblock = blocks.last()\n  let parent, siblings, index\n\n  // If there is only one block in the selection then we know the parent and\n  // siblings.\n  if (blocks.length === 1) {\n    parent = document.getParent(firstblock.key)\n    siblings = blocks\n  } else {\n    // Determine closest shared parent to all blocks in selection.\n    parent = document.getClosest(firstblock.key, p1 => {\n      return !!document.getClosest(lastblock.key, p2 => p1 == p2)\n    })\n  }\n\n  // If no shared parent could be found then the parent is the document.\n  if (parent == null) parent = document\n\n  // Create a list of direct children siblings of parent that fall in the\n  // selection.\n  if (siblings == null) {\n    const indexes = parent.nodes.reduce((ind, node, i) => {\n      if (node == firstblock || node.hasDescendant(firstblock.key)) ind[0] = i\n      if (node == lastblock || node.hasDescendant(lastblock.key)) ind[1] = i\n      return ind\n    }, [])\n\n    index = indexes[0]\n    siblings = parent.nodes.slice(indexes[0], indexes[1] + 1)\n  }\n\n  // Get the index to place the new wrapped node at.\n  if (index == null) {\n    index = parent.nodes.indexOf(siblings.first())\n  }\n\n  editor.withoutNormalizing(() => {\n    // Inject the new block node into the parent.\n    editor.insertNodeByKey(parent.key, index, block)\n\n    // Move the sibling nodes into the new block node.\n    siblings.forEach((node, i) => {\n      editor.moveNodeByKey(node.key, block.key, i)\n    })\n  })\n}\n\n/**\n * Wrap the text and inlines in a `range` in a new `inline`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Inline|Object|String} inline\n */\n\nCommands.wrapInlineAtRange = (editor, range, inline) => {\n  const { value } = editor\n  let { document } = value\n  const { start, end } = range\n\n  if (range.isCollapsed) {\n    // Wrapping an inline void\n    const inlineParent = document.getClosestInline(start.key)\n\n    if (!inlineParent) {\n      return\n    }\n\n    if (!editor.isVoid(inlineParent)) {\n      return\n    }\n\n    return editor.wrapInlineByKey(inlineParent.key, inline)\n  }\n\n  inline = Inline.create(inline)\n  inline = inline.set('nodes', inline.nodes.clear())\n\n  const blocks = document.getLeafBlocksAtRange(range)\n  let startBlock = document.getClosestBlock(start.key)\n  let endBlock = document.getClosestBlock(end.key)\n  const startInline = document.getClosestInline(start.key)\n  const endInline = document.getClosestInline(end.key)\n  let startChild = startBlock.getFurthestAncestor(start.key)\n  let endChild = endBlock.getFurthestAncestor(end.key)\n\n  editor.withoutNormalizing(() => {\n    if (!startInline || startInline != endInline) {\n      editor.splitDescendantsByKey(endChild.key, end.key, end.offset)\n      editor.splitDescendantsByKey(startChild.key, start.key, start.offset)\n    }\n\n    document = editor.value.document\n    startBlock = document.getDescendant(startBlock.key)\n    endBlock = document.getDescendant(endBlock.key)\n    startChild = startBlock.getFurthestAncestor(start.key)\n    endChild = endBlock.getFurthestAncestor(end.key)\n    const startIndex = startBlock.nodes.indexOf(startChild)\n    const endIndex = endBlock.nodes.indexOf(endChild)\n\n    if (startInline && startInline == endInline) {\n      const text = startBlock\n        .getTextsAtRange(range)\n        .get(0)\n        .splitText(start.offset)[1]\n        .splitText(end.offset - start.offset)[0]\n\n      inline = inline.set('nodes', List([text]))\n      editor.insertInlineAtRange(range, inline)\n\n      const inlinekey = inline.getFirstText().key\n      const rng = {\n        anchor: {\n          key: inlinekey,\n          offset: 0,\n        },\n        focus: {\n          key: inlinekey,\n          offset: end.offset - start.offset,\n        },\n        isFocused: true,\n      }\n      editor.select(rng)\n    } else if (startBlock == endBlock) {\n      document = editor.value.document\n      startBlock = document.getClosestBlock(start.key)\n      startChild = startBlock.getFurthestAncestor(start.key)\n\n      const startInner = document.getNextSibling(startChild.key)\n      const startInnerIndex = startBlock.nodes.indexOf(startInner)\n      const endInner =\n        start.key == end.key\n          ? startInner\n          : startBlock.getFurthestAncestor(end.key)\n      const inlines = startBlock.nodes\n        .skipUntil(n => n == startInner)\n        .takeUntil(n => n == endInner)\n        .push(endInner)\n\n      const node = inline.regenerateKey()\n\n      editor.insertNodeByKey(startBlock.key, startInnerIndex, node)\n\n      inlines.forEach((child, i) => {\n        editor.moveNodeByKey(child.key, node.key, i)\n      })\n    } else {\n      const startInlines = startBlock.nodes.slice(startIndex + 1)\n      const endInlines = endBlock.nodes.slice(0, endIndex + 1)\n      const startNode = inline.regenerateKey()\n      const endNode = inline.regenerateKey()\n\n      editor.insertNodeByKey(startBlock.key, startIndex + 1, startNode)\n      editor.insertNodeByKey(endBlock.key, endIndex, endNode)\n\n      startInlines.forEach((child, i) => {\n        editor.moveNodeByKey(child.key, startNode.key, i)\n      })\n\n      endInlines.forEach((child, i) => {\n        editor.moveNodeByKey(child.key, endNode.key, i)\n      })\n\n      blocks.slice(1, -1).forEach(block => {\n        const node = inline.regenerateKey()\n        editor.insertNodeByKey(block.key, 0, node)\n\n        block.nodes.forEach((child, i) => {\n          editor.moveNodeByKey(child.key, node.key, i)\n        })\n      })\n    }\n  })\n}\n\n/**\n * Wrap the text in a `range` in a prefix/suffix.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {String} prefix\n * @param {String} suffix (optional)\n */\n\nCommands.wrapTextAtRange = (editor, range, prefix, suffix = prefix) => {\n  const { start, end } = range\n  const startRange = range.moveToStart()\n  let endRange = range.moveToEnd()\n\n  if (start.key == end.key) {\n    endRange = endRange.moveForward(prefix.length)\n  }\n\n  editor.withoutNormalizing(() => {\n    editor.insertTextAtRange(startRange, prefix, [])\n    editor.insertTextAtRange(endRange, suffix, [])\n  })\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Commands\n","import Block from '../models/block'\nimport Inline from '../models/inline'\nimport Mark from '../models/mark'\nimport Node from '../models/node'\nimport PathUtils from '../utils/path-utils'\n\n/**\n * Commands.\n *\n * @type {Object}\n */\n\nconst Commands = {}\n\n/**\n * Add mark to text at `offset` and `length` in node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Number} offset\n * @param {Number} length\n * @param {Mixed} mark\n */\n\nCommands.addMarkByPath = (editor, path, offset, length, mark) => {\n  mark = Mark.create(mark)\n  const { value } = editor\n  const { document } = value\n  const node = document.assertNode(path)\n  const leaves = node.getLeaves()\n\n  const operations = []\n  const bx = offset\n  const by = offset + length\n  let o = 0\n\n  leaves.forEach(leaf => {\n    const ax = o\n    const ay = ax + leaf.text.length\n\n    o += leaf.text.length\n\n    // If the leaf doesn't overlap with the operation, continue on.\n    if (ay < bx || by < ax) return\n\n    // If the leaf already has the mark, continue on.\n    if (leaf.marks.has(mark)) return\n\n    // Otherwise, determine which offset and characters overlap.\n    const start = Math.max(ax, bx)\n    const end = Math.min(ay, by)\n\n    operations.push({\n      type: 'add_mark',\n      value,\n      path,\n      offset: start,\n      length: end - start,\n      mark,\n    })\n  })\n\n  operations.forEach(op => editor.applyOperation(op))\n}\n\n/**\n * Insert a `fragment` at `index` in a node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Number} index\n * @param {Fragment} fragment\n */\n\nCommands.insertFragmentByPath = (editor, path, index, fragment) => {\n  fragment.nodes.forEach((node, i) => {\n    editor.insertNodeByPath(path, index + i, node)\n  })\n}\n\n/**\n * Insert a `node` at `index` in a node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Number} index\n * @param {Node} node\n */\n\nCommands.insertNodeByPath = (editor, path, index, node) => {\n  const { value } = editor\n\n  editor.applyOperation({\n    type: 'insert_node',\n    value,\n    path: path.concat(index),\n    node,\n  })\n}\n\n/**\n * Insert `text` at `offset` in node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Number} offset\n * @param {String} text\n * @param {Set<Mark>} marks (optional)\n */\n\nCommands.insertTextByPath = (editor, path, offset, text, marks) => {\n  const { value } = editor\n  const { decorations, document } = value\n  const node = document.assertNode(path)\n  marks = marks || node.getMarksAtIndex(offset)\n\n  let updated = false\n  const { key } = node\n\n  const decs = decorations.filter(dec => {\n    const { start, end, mark } = dec\n    const isAtomic = editor.isAtomic(mark)\n    if (!isAtomic) return true\n    if (start.key !== key) return true\n\n    if (start.offset < offset && (end.key !== key || end.offset > offset)) {\n      updated = true\n      return false\n    }\n\n    return true\n  })\n\n  if (updated) {\n    editor.setDecorations(decs)\n  }\n\n  editor.applyOperation({\n    type: 'insert_text',\n    value,\n    path,\n    offset,\n    text,\n    marks,\n  })\n}\n\n/**\n * Merge a node by `path` with the previous node.\n *\n * @param {Editor} editor\n * @param {Array} path\n */\n\nCommands.mergeNodeByPath = (editor, path) => {\n  const { value } = editor\n  const { document } = value\n  const original = document.getDescendant(path)\n  const previous = document.getPreviousSibling(path)\n\n  if (!previous) {\n    throw new Error(\n      `Unable to merge node with path \"${path}\", because it has no previous sibling.`\n    )\n  }\n\n  const position =\n    previous.object == 'text' ? previous.text.length : previous.nodes.size\n\n  editor.applyOperation({\n    type: 'merge_node',\n    value,\n    path,\n    position,\n    // for undos to succeed we only need the type and data because\n    // these are the only properties that get changed in the merge operation\n    properties: {\n      type: original.type,\n      data: original.data,\n    },\n    target: null,\n  })\n}\n\n/**\n * Move a node by `path` to a new parent by `newPath` and `index`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {String} newPath\n * @param {Number} index\n */\n\nCommands.moveNodeByPath = (editor, path, newPath, newIndex) => {\n  const { value } = editor\n\n  // If the operation path and newPath are the same,\n  // this should be considered a NOOP\n  if (PathUtils.isEqual(path, newPath)) {\n    return editor\n  }\n\n  editor.applyOperation({\n    type: 'move_node',\n    value,\n    path,\n    newPath: newPath.concat(newIndex),\n  })\n}\n\n/**\n * Remove mark from text at `offset` and `length` in node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Number} offset\n * @param {Number} length\n * @param {Mark} mark\n */\n\nCommands.removeMarkByPath = (editor, path, offset, length, mark) => {\n  mark = Mark.create(mark)\n  const { value } = editor\n  const { document } = value\n  const node = document.assertNode(path)\n  const leaves = node.getLeaves()\n\n  const operations = []\n  const bx = offset\n  const by = offset + length\n  let o = 0\n\n  leaves.forEach(leaf => {\n    const ax = o\n    const ay = ax + leaf.text.length\n\n    o += leaf.text.length\n\n    // If the leaf doesn't overlap with the operation, continue on.\n    if (ay < bx || by < ax) return\n\n    // If the leaf already has the mark, continue on.\n    if (!leaf.marks.has(mark)) return\n\n    // Otherwise, determine which offset and characters overlap.\n    const start = Math.max(ax, bx)\n    const end = Math.min(ay, by)\n\n    operations.push({\n      type: 'remove_mark',\n      value,\n      path,\n      offset: start,\n      length: end - start,\n      mark,\n    })\n  })\n\n  operations.forEach(op => editor.applyOperation(op))\n}\n\n/**\n * Remove all `marks` from node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n */\n\nCommands.removeAllMarksByPath = (editor, path) => {\n  const { state } = editor\n  const { document } = state\n  const node = document.assertNode(path)\n  const texts = node.object === 'text' ? [node] : node.getTextsAsArray()\n\n  texts.forEach(text => {\n    text.getMarksAsArray().forEach(mark => {\n      editor.removeMarkByKey(text.key, 0, text.text.length, mark)\n    })\n  })\n}\n\n/**\n * Remove a node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n */\n\nCommands.removeNodeByPath = (editor, path) => {\n  const { value } = editor\n  const { document } = value\n  const node = document.assertNode(path)\n\n  editor.applyOperation({\n    type: 'remove_node',\n    value,\n    path,\n    node,\n  })\n}\n\n/**\n * Remove text at `offset` and `length` in node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Number} offset\n * @param {Number} length\n */\n\nCommands.removeTextByPath = (editor, path, offset, length) => {\n  const { value } = editor\n  const { decorations, document } = value\n  const node = document.assertNode(path)\n  const leaves = node.getLeaves()\n  const { text } = node\n\n  let updated = false\n  const { key } = node\n  const from = offset\n  const to = offset + length\n\n  const decs = decorations.filter(dec => {\n    const { start, end, mark } = dec\n    const isAtomic = editor.isAtomic(mark)\n    if (!isAtomic) return true\n    if (start.key !== key) return true\n\n    if (start.offset < from && (end.key !== key || end.offset > from)) {\n      updated = true\n      return false\n    }\n\n    if (start.offset < to && (end.key !== key || end.offset > to)) {\n      updated = true\n      return null\n    }\n\n    return true\n  })\n\n  if (updated) {\n    editor.setDecorations(decs)\n  }\n\n  const removals = []\n  const bx = offset\n  const by = offset + length\n  let o = 0\n\n  leaves.forEach(leaf => {\n    const ax = o\n    const ay = ax + leaf.text.length\n\n    o += leaf.text.length\n\n    // If the leaf doesn't overlap with the removal, continue on.\n    if (ay < bx || by < ax) return\n\n    // Otherwise, determine which offset and characters overlap.\n    const start = Math.max(ax, bx)\n    const end = Math.min(ay, by)\n    const string = text.slice(start, end)\n\n    removals.push({\n      type: 'remove_text',\n      value,\n      path,\n      offset: start,\n      text: string,\n      marks: leaf.marks,\n    })\n  })\n\n  // Apply in reverse order, so subsequent removals don't impact previous ones.\n  removals.reverse().forEach(op => editor.applyOperation(op))\n}\n\n/**\n`* Replace a `node` with another `node`\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Object|Node} node\n */\n\nCommands.replaceNodeByPath = (editor, path, newNode) => {\n  newNode = Node.create(newNode)\n  const index = path.last()\n  const parentPath = PathUtils.lift(path)\n\n  editor.withoutNormalizing(() => {\n    editor.removeNodeByPath(path)\n    editor.insertNodeByPath(parentPath, index, newNode)\n  })\n}\n\n/**\n * Replace A Length of Text with another string or text\n * @param {Editor} editor\n * @param {String} key\n * @param {Number} offset\n * @param {Number} length\n * @param {string} text\n * @param {Set<Mark>} marks (optional)\n */\n\nCommands.replaceTextByPath = (editor, path, offset, length, text, marks) => {\n  const { document } = editor.value\n  const node = document.assertNode(path)\n\n  if (length + offset > node.text.length) {\n    length = node.text.length - offset\n  }\n\n  const range = document.createRange({\n    anchor: { path, offset },\n    focus: { path, offset: offset + length },\n  })\n\n  let activeMarks = document.getActiveMarksAtRange(range)\n\n  editor.withoutNormalizing(() => {\n    editor.removeTextByPath(path, offset, length)\n\n    if (!marks) {\n      // Do not use mark at index when marks and activeMarks are both empty\n      marks = activeMarks ? activeMarks : []\n    } else if (activeMarks) {\n      // Do not use `has` because we may want to reset marks like font-size with\n      // an updated data;\n      activeMarks = activeMarks.filter(\n        activeMark => !marks.find(m => activeMark.type === m.type)\n      )\n\n      marks = activeMarks.merge(marks)\n    }\n\n    editor.insertTextByPath(path, offset, text, marks)\n  })\n}\n\n/**\n * Set `properties` on mark on text at `offset` and `length` in node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Number} offset\n * @param {Number} length\n * @param {Mark} mark\n */\n\nCommands.setMarkByPath = (editor, path, offset, length, mark, properties) => {\n  mark = Mark.create(mark)\n  properties = Mark.createProperties(properties)\n  const { value } = editor\n\n  editor.applyOperation({\n    type: 'set_mark',\n    value,\n    path,\n    offset,\n    length,\n    mark,\n    properties,\n  })\n}\n\n/**\n * Set `properties` on a node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Object|String} properties\n */\n\nCommands.setNodeByPath = (editor, path, properties) => {\n  properties = Node.createProperties(properties)\n  const { value } = editor\n  const { document } = value\n  const node = document.assertNode(path)\n\n  editor.applyOperation({\n    type: 'set_node',\n    value,\n    path,\n    node,\n    properties,\n  })\n}\n\n/**\n * Insert `text` at `offset` in node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {String} text\n * @param {Set<Mark>} marks (optional)\n */\n\nCommands.setTextByPath = (editor, path, text, marks) => {\n  const { value } = editor\n  const { document } = value\n  const node = document.assertNode(path)\n  const end = node.text.length\n  editor.replaceTextByPath(path, 0, end, text, marks)\n}\n\n/**\n * Split a node by `path` at `position`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Number} position\n * @param {Object} options\n */\n\nCommands.splitNodeByPath = (editor, path, position, options = {}) => {\n  const { target = null } = options\n  const { value } = editor\n  const { document } = value\n  const node = document.getDescendant(path)\n\n  editor.applyOperation({\n    type: 'split_node',\n    value,\n    path,\n    position,\n    target,\n    properties: {\n      type: node.type,\n      data: node.data,\n    },\n  })\n}\n\n/**\n * Split a node deeply down the tree by `path`, `textPath` and `textOffset`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Array} textPath\n * @param {Number} textOffset\n */\n\nCommands.splitDescendantsByPath = (editor, path, textPath, textOffset) => {\n  if (path.equals(textPath)) {\n    editor.splitNodeByPath(textPath, textOffset)\n    return\n  }\n\n  const { value } = editor\n  const { document } = value\n  const node = document.assertNode(path)\n  const text = document.assertNode(textPath)\n  const ancestors = document.getAncestors(textPath)\n  const nodes = ancestors\n    .skipUntil(a => a.key == node.key)\n    .reverse()\n    .unshift(text)\n\n  let previous\n  let index\n\n  editor.withoutNormalizing(() => {\n    nodes.forEach(n => {\n      const prevIndex = index == null ? null : index\n      index = previous ? n.nodes.indexOf(previous) + 1 : textOffset\n      previous = n\n      editor.splitNodeByKey(n.key, index, { target: prevIndex })\n    })\n  })\n}\n\n/**\n * Unwrap content from an inline parent with `properties`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Object|String} properties\n */\n\nCommands.unwrapInlineByPath = (editor, path, properties) => {\n  const { value } = editor\n  const { document, selection } = value\n  const node = document.assertNode(path)\n  const first = node.getFirstText()\n  const last = node.getLastText()\n  const range = selection.moveToRangeOfNode(first, last)\n  editor.unwrapInlineAtRange(range, properties)\n}\n\n/**\n * Unwrap content from a block parent with `properties`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Object|String} properties\n */\n\nCommands.unwrapBlockByPath = (editor, path, properties) => {\n  const { value } = editor\n  const { document, selection } = value\n  const node = document.assertNode(path)\n  const first = node.getFirstText()\n  const last = node.getLastText()\n  const range = selection.moveToRangeOfNode(first, last)\n  editor.unwrapBlockAtRange(range, properties)\n}\n\n/**\n * Unwrap a single node from its parent.\n *\n * If the node is surrounded with siblings, its parent will be\n * split. If the node is the only child, the parent is removed, and\n * simply replaced by the node itself.  Cannot unwrap a root node.\n *\n * @param {Editor} editor\n * @param {Array} path\n */\n\nCommands.unwrapNodeByPath = (editor, path) => {\n  const { value } = editor\n  const { document } = value\n  document.assertNode(path)\n\n  const parentPath = PathUtils.lift(path)\n  const parent = document.assertNode(parentPath)\n  const index = path.last()\n  const parentIndex = parentPath.last()\n  const grandPath = PathUtils.lift(parentPath)\n  const isFirst = index === 0\n  const isLast = index === parent.nodes.size - 1\n\n  editor.withoutNormalizing(() => {\n    if (parent.nodes.size === 1) {\n      editor.moveNodeByPath(path, grandPath, parentIndex + 1)\n      editor.removeNodeByPath(parentPath)\n    } else if (isFirst) {\n      editor.moveNodeByPath(path, grandPath, parentIndex)\n    } else if (isLast) {\n      editor.moveNodeByPath(path, grandPath, parentIndex + 1)\n    } else {\n      let updatedPath = PathUtils.increment(path, 1, parentPath.size - 1)\n      updatedPath = updatedPath.set(updatedPath.size - 1, 0)\n      editor.splitNodeByPath(parentPath, index)\n      editor.moveNodeByPath(updatedPath, grandPath, parentIndex + 1)\n    }\n  })\n}\n\n/**\n * Unwrap all of the children of a node, by removing the node and replacing it\n * with the children in the tree.\n *\n * @param {Editor} editor\n * @param {Array} path\n */\n\nCommands.unwrapChildrenByPath = (editor, path) => {\n  path = PathUtils.create(path)\n  const { value } = editor\n  const { document } = value\n  const node = document.assertNode(path)\n  const parentPath = PathUtils.lift(path)\n  const index = path.last()\n  const { nodes } = node\n\n  editor.withoutNormalizing(() => {\n    nodes.reverse().forEach((child, i) => {\n      const childIndex = nodes.size - i - 1\n      const childPath = path.push(childIndex)\n      editor.moveNodeByPath(childPath, parentPath, index + 1)\n    })\n\n    editor.removeNodeByPath(path)\n  })\n}\n\n/**\n * Wrap a node in a block with `properties`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Block|Object|String} block\n */\n\nCommands.wrapBlockByPath = (editor, path, block) => {\n  block = Block.create(block)\n  block = block.set('nodes', block.nodes.clear())\n  const parentPath = PathUtils.lift(path)\n  const index = path.last()\n  const newPath = PathUtils.increment(path)\n\n  editor.withoutNormalizing(() => {\n    editor.insertNodeByPath(parentPath, index, block)\n    editor.moveNodeByPath(newPath, path, 0)\n  })\n}\n\n/**\n * Wrap a node in an inline with `properties`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Block|Object|String} inline\n */\n\nCommands.wrapInlineByPath = (editor, path, inline) => {\n  inline = Inline.create(inline)\n  inline = inline.set('nodes', inline.nodes.clear())\n  const parentPath = PathUtils.lift(path)\n  const index = path.last()\n  const newPath = PathUtils.increment(path)\n\n  editor.withoutNormalizing(() => {\n    editor.insertNodeByPath(parentPath, index, inline)\n    editor.moveNodeByPath(newPath, path, 0)\n  })\n}\n\n/**\n * Wrap a node by `path` with `node`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Node|Object} node\n */\n\nCommands.wrapNodeByPath = (editor, path, node) => {\n  node = Node.create(node)\n\n  if (node.object === 'block') {\n    editor.wrapBlockByPath(path, node)\n  } else if (node.object === 'inline') {\n    editor.wrapInlineByPath(path, node)\n  }\n}\n\n/**\n * Mix in `*ByKey` variants.\n */\n\nconst COMMANDS = [\n  'addMark',\n  'insertFragment',\n  'insertNode',\n  'insertText',\n  'mergeNode',\n  'removeAllMarks',\n  'removeMark',\n  'removeNode',\n  'removeText',\n  'replaceNode',\n  'replaceText',\n  'setMark',\n  'setNode',\n  'setText',\n  'splitNode',\n  'unwrapBlock',\n  'unwrapChildren',\n  'unwrapInline',\n  'unwrapNode',\n  'wrapBlock',\n  'wrapInline',\n  'wrapNode',\n]\n\nfor (const method of COMMANDS) {\n  Commands[`${method}ByKey`] = (editor, key, ...args) => {\n    const { value } = editor\n    const { document } = value\n    const path = document.assertPath(key)\n    editor[`${method}ByPath`](path, ...args)\n  }\n}\n\n// Moving nodes takes two keys, so it's slightly different.\nCommands.moveNodeByKey = (editor, key, newKey, ...args) => {\n  const { value } = editor\n  const { document } = value\n  const path = document.assertPath(key)\n  const newPath = document.assertPath(newKey)\n  editor.moveNodeByPath(path, newPath, ...args)\n}\n\n// Splitting descendants takes two keys, so it's slightly different.\nCommands.splitDescendantsByKey = (editor, key, textKey, ...args) => {\n  const { value } = editor\n  const { document } = value\n  const path = document.assertPath(key)\n  const textPath = document.assertPath(textKey)\n  editor.splitDescendantsByPath(path, textPath, ...args)\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Commands\n","import omit from 'lodash/omit'\nimport { List } from 'immutable'\n\n/**\n * Commands.\n *\n * @type {Object}\n */\n\nconst Commands = {}\n\n/**\n * Save an `operation` into the history.\n *\n * @param {Editor} editor\n * @param {Object} operation\n */\n\nCommands.save = (editor, operation) => {\n  const { operations, value } = editor\n  const { data } = value\n  let { save, merge } = editor.tmp\n  if (save === false) return\n\n  let undos = data.get('undos') || List()\n  const lastBatch = undos.last()\n  const lastOperation = lastBatch && lastBatch.last()\n\n  // If `merge` is non-commital, and this is not the first operation in a new\n  // editor, then merge, otherwise merge based on the last operation.\n  if (merge == null) {\n    if (operations.size !== 0) {\n      merge = true\n    } else {\n      merge = shouldMerge(operation, lastOperation)\n    }\n  }\n\n  // If the `merge` flag is true, add the operation to the last batch.\n  if (merge && lastBatch) {\n    const batch = lastBatch.push(operation)\n    undos = undos.pop()\n    undos = undos.push(batch)\n  } else {\n    // Otherwise, create a new batch with the operation.\n    const batch = List([operation])\n    undos = undos.push(batch)\n  }\n\n  // Constrain the history to 100 entries for memory's sake.\n  if (undos.size > 100) {\n    undos = undos.takeLast(100)\n  }\n\n  // Clear the redos and update the history.\n  editor.withoutSaving(() => {\n    const redos = List()\n    const newData = data.set('undos', undos).set('redos', redos)\n    editor.setData(newData)\n  })\n}\n\n/**\n * Redo to the next value in the history.\n *\n * @param {Editor} editor\n */\n\nCommands.redo = editor => {\n  const { value } = editor\n  const { data } = value\n  let redos = data.get('redos') || List()\n  let undos = data.get('undos') || List()\n  const batch = redos.last()\n  if (!batch) return\n\n  editor.withoutSaving(() => {\n    editor.withoutNormalizing(() => {\n      // Replay the batch of operations.\n      batch.forEach(op => {\n        const { type, properties } = op\n\n        // When the operation mutates the selection, omit its `isFocused` value to\n        // prevent the editor focus from changing during redoing.\n        if (type === 'set_selection') {\n          op = op.set('properties', omit(properties, 'isFocused'))\n        }\n\n        editor.applyOperation(op)\n      })\n\n      // Shift the next value into the undo stack.\n      redos = redos.pop()\n      undos = undos.push(batch)\n      const newData = data.set('undos', undos).set('redos', redos)\n      editor.setData(newData)\n    })\n  })\n}\n\n/**\n * Undo the previous operations in the history.\n *\n * @param {Editor} editor\n */\n\nCommands.undo = editor => {\n  const { value } = editor\n  const { data } = value\n  let redos = data.get('redos') || List()\n  let undos = data.get('undos') || List()\n  const batch = undos.last()\n  if (!batch) return\n\n  editor.withoutSaving(() => {\n    editor.withoutNormalizing(() => {\n      // Replay the inverse of the previous operations.\n      batch\n        .slice()\n        .reverse()\n        .map(op => op.invert())\n        .forEach(inverse => {\n          const { type, properties } = inverse\n\n          // When the operation mutates the selection, omit its `isFocused` value to\n          // prevent the editor focus from changing during undoing.\n          if (type === 'set_selection') {\n            inverse = inverse.set('properties', omit(properties, 'isFocused'))\n          }\n\n          editor.applyOperation(inverse)\n        })\n\n      // Shift the previous operations into the redo stack.\n      redos = redos.push(batch)\n      undos = undos.pop()\n      const newData = data.set('undos', undos).set('redos', redos)\n      editor.setData(newData)\n    })\n  })\n}\n\n/**\n * Apply a series of changes inside a synchronous `fn`, without merging any of\n * the new operations into previous save point in the history.\n *\n * @param {Editor} editor\n * @param {Function} fn\n */\n\nCommands.withoutMerging = (editor, fn) => {\n  const value = editor.tmp.merge\n  editor.tmp.merge = false\n  fn(editor)\n  editor.tmp.merge = value\n}\n\n/**\n * Apply a series of changes inside a synchronous `fn`, without saving any of\n * their operations into the history.\n *\n * @param {Editor} editor\n * @param {Function} fn\n */\n\nCommands.withoutSaving = (editor, fn) => {\n  const value = editor.tmp.save\n  editor.tmp.save = false\n  fn(editor)\n  editor.tmp.save = value\n}\n\n/**\n * Check whether to merge a new operation `o` into the previous operation `p`.\n *\n * @param {Object} o\n * @param {Object} p\n * @return {Boolean}\n */\n\nfunction shouldMerge(o, p) {\n  if (!p) return false\n\n  const merge =\n    (o.type === 'set_selection' && p.type === 'set_selection') ||\n    (o.type === 'insert_text' &&\n      p.type === 'insert_text' &&\n      o.offset === p.offset + p.text.length &&\n      o.path.equals(p.path)) ||\n    (o.type === 'remove_text' &&\n      p.type === 'remove_text' &&\n      o.offset + o.text.length === p.offset &&\n      o.path.equals(p.path))\n\n  return merge\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Commands\n","import { is } from 'immutable'\nimport pick from 'lodash/pick'\n\nimport Selection from '../models/selection'\nimport TextUtils from '../utils/text-utils'\n\nconst Commands = {}\n\nCommands.blur = editor => {\n  editor.select({ isFocused: false })\n}\n\nCommands.deselect = editor => {\n  const range = Selection.create()\n  editor.select(range)\n}\n\nCommands.focus = editor => {\n  editor.select({ isFocused: true })\n}\n\nCommands.flip = editor => {\n  editor.command(proxy, 'flip')\n}\n\nCommands.moveAnchorBackward = (editor, ...args) => {\n  editor.command(pointBackward, 'anchor', ...args)\n}\n\nCommands.moveAnchorWordBackward = (editor, ...args) => {\n  editor.command(pointWordBackward, 'anchor', ...args)\n}\n\nCommands.moveAnchorForward = (editor, ...args) => {\n  editor.command(pointForward, 'anchor', ...args)\n}\n\nCommands.moveAnchorWordForward = (editor, ...args) => {\n  editor.command(pointWordForward, 'anchor', ...args)\n}\n\nCommands.moveAnchorTo = (editor, ...args) => {\n  editor.command(proxy, 'moveAnchorTo', ...args)\n}\n\nCommands.moveAnchorToEndOfBlock = editor => {\n  editor.command(pointEdgeObject, 'anchor', 'end', 'block')\n}\n\nCommands.moveAnchorToEndOfInline = editor => {\n  editor.command(pointEdgeObject, 'anchor', 'end', 'inline')\n}\n\nCommands.moveAnchorToEndOfDocument = editor => {\n  editor.moveAnchorToEndOfNode(editor.value.document).moveToAnchor()\n}\n\nCommands.moveAnchorToEndOfNextBlock = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'end', 'next', 'block')\n}\n\nCommands.moveAnchorToEndOfNextInline = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'end', 'next', 'inline')\n}\n\nCommands.moveAnchorToEndOfNextText = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'end', 'next', 'text')\n}\n\nCommands.moveAnchorToEndOfNode = (editor, ...args) => {\n  editor.command(proxy, 'moveAnchorToEndOfNode', ...args)\n}\n\nCommands.moveAnchorToEndOfPreviousBlock = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'end', 'previous', 'block')\n}\n\nCommands.moveAnchorToEndOfPreviousInline = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'end', 'previous', 'inline')\n}\n\nCommands.moveAnchorToEndOfPreviousText = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'end', 'previous', 'text')\n}\n\nCommands.moveAnchorToEndOfText = editor => {\n  editor.command(pointEdgeObject, 'anchor', 'end', 'text')\n}\n\nCommands.moveAnchorToStartOfBlock = editor => {\n  editor.command(pointEdgeObject, 'anchor', 'start', 'block')\n}\n\nCommands.moveAnchorToStartOfDocument = editor => {\n  editor.moveAnchorToStartOfNode(editor.value.document).moveToAnchor()\n}\n\nCommands.moveAnchorToStartOfInline = editor => {\n  editor.command(pointEdgeObject, 'anchor', 'start', 'inline')\n}\n\nCommands.moveAnchorToStartOfNextBlock = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'start', 'next', 'block')\n}\n\nCommands.moveAnchorToStartOfNextInline = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'start', 'next', 'inline')\n}\n\nCommands.moveAnchorToStartOfNextText = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'start', 'next', 'text')\n}\n\nCommands.moveAnchorToStartOfNode = (editor, ...args) => {\n  editor.command(proxy, 'moveAnchorToStartOfNode', ...args)\n}\n\nCommands.moveAnchorToStartOfPreviousBlock = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'start', 'previous', 'block')\n}\n\nCommands.moveAnchorToStartOfPreviousInline = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'start', 'previous', 'inline')\n}\n\nCommands.moveAnchorToStartOfPreviousText = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'start', 'previous', 'text')\n}\n\nCommands.moveAnchorToStartOfText = editor => {\n  editor.command(pointEdgeObject, 'anchor', 'start', 'text')\n}\n\nCommands.moveBackward = (editor, ...args) => {\n  editor.moveAnchorBackward(...args).moveFocusBackward(...args)\n}\n\nCommands.moveWordBackward = (editor, ...args) => {\n  editor.moveFocusWordBackward(...args).moveToFocus()\n}\n\nCommands.moveEndBackward = (editor, ...args) => {\n  editor.command(pointBackward, 'end', ...args)\n}\n\nCommands.moveEndWordBackward = (editor, ...args) => {\n  editor.command(pointWordBackward, 'end', ...args)\n}\n\nCommands.moveEndForward = (editor, ...args) => {\n  editor.command(pointForward, 'end', ...args)\n}\n\nCommands.moveEndWordForward = (editor, ...args) => {\n  editor.command(pointWordForward, 'end', ...args)\n}\n\nCommands.moveEndTo = (editor, ...args) => {\n  editor.command(proxy, 'moveEndTo', ...args)\n}\n\nCommands.moveEndToEndOfBlock = editor => {\n  editor.command(pointEdgeObject, 'end', 'end', 'block')\n}\n\nCommands.moveEndToEndOfDocument = editor => {\n  editor.moveEndToEndOfNode(editor.value.document).moveToEnd()\n}\n\nCommands.moveEndToEndOfInline = editor => {\n  editor.command(pointEdgeObject, 'end', 'end', 'inline')\n}\n\nCommands.moveEndToEndOfNextBlock = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'end', 'next', 'block')\n}\n\nCommands.moveEndToEndOfNextInline = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'end', 'next', 'inline')\n}\n\nCommands.moveEndToEndOfNextText = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'end', 'next', 'text')\n}\n\nCommands.moveEndToEndOfNode = (editor, ...args) => {\n  editor.command(proxy, 'moveEndToEndOfNode', ...args)\n}\n\nCommands.moveEndToEndOfPreviousBlock = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'end', 'previous', 'block')\n}\n\nCommands.moveEndToEndOfPreviousInline = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'end', 'previous', 'inline')\n}\n\nCommands.moveEndToEndOfPreviousText = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'end', 'previous', 'text')\n}\n\nCommands.moveEndToEndOfText = editor => {\n  editor.command(pointEdgeObject, 'end', 'end', 'text')\n}\n\nCommands.moveEndToStartOfBlock = editor => {\n  editor.command(pointEdgeObject, 'end', 'start', 'block')\n}\n\nCommands.moveEndToStartOfDocument = editor => {\n  editor.moveEndToStartOfNode(editor.value.document).moveToEnd()\n}\n\nCommands.moveEndToStartOfInline = editor => {\n  editor.command(pointEdgeObject, 'end', 'start', 'inline')\n}\n\nCommands.moveEndToStartOfNextBlock = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'start', 'next', 'block')\n}\n\nCommands.moveEndToStartOfNextInline = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'start', 'next', 'inline')\n}\n\nCommands.moveEndToStartOfNextText = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'start', 'next', 'text')\n}\n\nCommands.moveEndToStartOfNode = (editor, ...args) => {\n  editor.command(proxy, 'moveEndToStartOfNode', ...args)\n}\n\nCommands.moveEndToStartOfPreviousBlock = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'start', 'previous', 'block')\n}\n\nCommands.moveEndToStartOfPreviousInline = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'start', 'previous', 'inline')\n}\n\nCommands.moveEndToStartOfPreviousText = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'start', 'previous', 'text')\n}\n\nCommands.moveEndToStartOfText = editor => {\n  editor.command(pointEdgeObject, 'end', 'start', 'text')\n}\n\nCommands.moveFocusBackward = (editor, ...args) => {\n  editor.command(pointBackward, 'focus', ...args)\n}\n\nCommands.moveFocusWordBackward = (editor, ...args) => {\n  editor.command(pointWordBackward, 'focus', ...args)\n}\n\nCommands.moveFocusForward = (editor, ...args) => {\n  editor.command(pointForward, 'focus', ...args)\n}\n\nCommands.moveFocusWordForward = (editor, ...args) => {\n  editor.command(pointWordForward, 'focus', ...args)\n}\n\nCommands.moveFocusTo = (editor, ...args) => {\n  editor.command(proxy, 'moveFocusTo', ...args)\n}\n\nCommands.moveFocusToEndOfBlock = editor => {\n  editor.command(pointEdgeObject, 'focus', 'end', 'block')\n}\n\nCommands.moveFocusToEndOfDocument = editor => {\n  editor.moveFocusToEndOfNode(editor.value.document).moveToFocus()\n}\n\nCommands.moveFocusToEndOfInline = editor => {\n  editor.command(pointEdgeObject, 'focus', 'end', 'inline')\n}\n\nCommands.moveFocusToEndOfNextBlock = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'end', 'next', 'block')\n}\n\nCommands.moveFocusToEndOfNextInline = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'end', 'next', 'inline')\n}\n\nCommands.moveFocusToEndOfNextText = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'end', 'next', 'text')\n}\n\nCommands.moveFocusToEndOfNode = (editor, ...args) => {\n  editor.command(proxy, 'moveFocusToEndOfNode', ...args)\n}\n\nCommands.moveFocusToEndOfPreviousBlock = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'end', 'previous', 'block')\n}\n\nCommands.moveFocusToEndOfPreviousInline = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'end', 'previous', 'inline')\n}\n\nCommands.moveFocusToEndOfPreviousText = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'end', 'previous', 'text')\n}\n\nCommands.moveFocusToEndOfText = editor => {\n  editor.command(pointEdgeObject, 'focus', 'end', 'text')\n}\n\nCommands.moveFocusToStartOfBlock = editor => {\n  editor.command(pointEdgeObject, 'focus', 'start', 'block')\n}\n\nCommands.moveFocusToStartOfDocument = editor => {\n  editor.moveFocusToStartOfNode(editor.value.document).moveToFocus()\n}\n\nCommands.moveFocusToStartOfInline = editor => {\n  editor.command(pointEdgeObject, 'focus', 'start', 'inline')\n}\n\nCommands.moveFocusToStartOfNextBlock = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'start', 'next', 'block')\n}\n\nCommands.moveFocusToStartOfNextInline = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'start', 'next', 'inline')\n}\n\nCommands.moveFocusToStartOfNextText = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'start', 'next', 'text')\n}\n\nCommands.moveFocusToStartOfNode = (editor, ...args) => {\n  editor.command(proxy, 'moveFocusToStartOfNode', ...args)\n}\n\nCommands.moveFocusToStartOfPreviousBlock = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'start', 'previous', 'block')\n}\n\nCommands.moveFocusToStartOfPreviousInline = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'start', 'previous', 'inline')\n}\n\nCommands.moveFocusToStartOfPreviousText = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'start', 'previous', 'text')\n}\n\nCommands.moveFocusToStartOfText = editor => {\n  editor.command(pointEdgeObject, 'focus', 'start', 'text')\n}\n\nCommands.moveForward = (editor, ...args) => {\n  editor.moveAnchorForward(...args).moveFocusForward(...args)\n}\n\nCommands.moveWordForward = (editor, ...args) => {\n  editor.moveFocusWordForward(...args).moveToFocus(...args)\n}\n\nCommands.moveStartBackward = (editor, ...args) => {\n  editor.command(pointBackward, 'start', ...args)\n}\n\nCommands.moveStartWordBackward = (editor, ...args) => {\n  editor.command(pointWordBackward, 'start', ...args)\n}\n\nCommands.moveStartForward = (editor, ...args) => {\n  editor.command(pointForward, 'start', ...args)\n}\n\nCommands.moveStartWordForward = (editor, ...args) => {\n  editor.command(pointWordForward, 'start', ...args)\n}\n\nCommands.moveStartTo = (editor, ...args) => {\n  editor.command(proxy, 'moveStartTo', ...args)\n}\n\nCommands.moveStartToEndOfBlock = editor => {\n  editor.command(pointEdgeObject, 'start', 'end', 'block')\n}\n\nCommands.moveStartToEndOfDocument = editor => {\n  editor.moveStartToEndOfNode(editor.value.document).moveToStart()\n}\n\nCommands.moveStartToEndOfInline = editor => {\n  editor.command(pointEdgeObject, 'start', 'end', 'inline')\n}\n\nCommands.moveStartToEndOfNextBlock = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'end', 'next', 'block')\n}\n\nCommands.moveStartToEndOfNextInline = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'end', 'next', 'inline')\n}\n\nCommands.moveStartToEndOfNextText = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'end', 'next', 'text')\n}\n\nCommands.moveStartToEndOfNode = (editor, ...args) => {\n  editor.command(proxy, 'moveStartToEndOfNode', ...args)\n}\n\nCommands.moveStartToEndOfPreviousBlock = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'end', 'previous', 'block')\n}\n\nCommands.moveStartToEndOfPreviousInline = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'end', 'previous', 'inline')\n}\n\nCommands.moveStartToEndOfPreviousText = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'end', 'previous', 'text')\n}\n\nCommands.moveStartToEndOfText = editor => {\n  editor.command(pointEdgeObject, 'start', 'end', 'text')\n}\n\nCommands.moveStartToStartOfBlock = editor => {\n  editor.command(pointEdgeObject, 'start', 'start', 'block')\n}\n\nCommands.moveStartToStartOfDocument = editor => {\n  editor.moveStartToStartOfNode(editor.value.document).moveToStart()\n}\n\nCommands.moveStartToStartOfInline = editor => {\n  editor.command(pointEdgeObject, 'start', 'start', 'inline')\n}\n\nCommands.moveStartToStartOfNextBlock = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'start', 'next', 'block')\n}\n\nCommands.moveStartToStartOfNextInline = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'start', 'next', 'inline')\n}\n\nCommands.moveStartToStartOfNextText = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'start', 'next', 'text')\n}\n\nCommands.moveStartToStartOfNode = (editor, ...args) => {\n  editor.command(proxy, 'moveStartToStartOfNode', ...args)\n}\n\nCommands.moveStartToStartOfPreviousBlock = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'start', 'previous', 'block')\n}\n\nCommands.moveStartToStartOfPreviousInline = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'start', 'previous', 'inline')\n}\n\nCommands.moveStartToStartOfPreviousText = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'start', 'previous', 'text')\n}\n\nCommands.moveStartToStartOfText = editor => {\n  editor.command(pointEdgeObject, 'start', 'start', 'text')\n}\n\nCommands.moveTo = (editor, ...args) => {\n  editor.command(proxy, 'moveTo', ...args)\n}\n\nCommands.moveToAnchor = editor => {\n  editor.command(proxy, 'moveToAnchor')\n}\n\nCommands.moveToEnd = editor => {\n  editor.command(proxy, 'moveToEnd')\n}\n\nCommands.moveToEndOfBlock = editor => {\n  editor.moveEndToEndOfBlock().moveToEnd()\n}\n\nCommands.moveToEndOfDocument = editor => {\n  editor.moveEndToEndOfNode(editor.value.document).moveToEnd()\n}\n\nCommands.moveToEndOfInline = editor => {\n  editor.moveEndToEndOfInline().moveToEnd()\n}\n\nCommands.moveToEndOfNextBlock = editor => {\n  editor.moveEndToEndOfNextBlock().moveToEnd()\n}\n\nCommands.moveToEndOfNextInline = editor => {\n  editor.moveEndToEndOfNextInline().moveToEnd()\n}\n\nCommands.moveToEndOfNextText = editor => {\n  editor.moveEndToEndOfNextText().moveToEnd()\n}\n\nCommands.moveToEndOfNode = (editor, ...args) => {\n  editor.command(proxy, 'moveToEndOfNode', ...args)\n}\n\nCommands.moveToEndOfPreviousBlock = editor => {\n  editor.moveStartToEndOfPreviousBlock().moveToStart()\n}\n\nCommands.moveToEndOfPreviousInline = editor => {\n  editor.moveStartToEndOfPreviousInline().moveToStart()\n}\n\nCommands.moveToEndOfPreviousText = editor => {\n  editor.moveStartToEndOfPreviousText().moveToStart()\n}\n\nCommands.moveToEndOfText = editor => {\n  editor.moveEndToEndOfText().moveToEnd()\n}\n\nCommands.moveToFocus = editor => {\n  editor.command(proxy, 'moveToFocus')\n}\n\nCommands.moveToRangeOfDocument = editor => {\n  editor.moveToRangeOfNode(editor.value.document)\n}\n\nCommands.moveToRangeOfNode = (editor, ...args) => {\n  editor.command(proxy, 'moveToRangeOfNode', ...args)\n}\n\nCommands.moveToStart = editor => {\n  editor.command(proxy, 'moveToStart')\n}\n\nCommands.moveToStartOfBlock = editor => {\n  editor.moveStartToStartOfBlock().moveToStart()\n}\n\nCommands.moveToStartOfDocument = editor => {\n  editor.moveStartToStartOfNode(editor.value.document).moveToStart()\n}\n\nCommands.moveToStartOfInline = editor => {\n  editor.moveStartToStartOfInline().moveToStart()\n}\n\nCommands.moveToStartOfNextBlock = editor => {\n  editor.moveEndToStartOfNextBlock().moveToEnd()\n}\n\nCommands.moveToStartOfNextInline = editor => {\n  editor.moveEndToStartOfNextInline().moveToEnd()\n}\n\nCommands.moveToStartOfNextText = editor => {\n  editor.moveEndToStartOfNextText().moveToEnd()\n}\n\nCommands.moveToStartOfNode = (editor, ...args) => {\n  editor.command(proxy, 'moveToStartOfNode', ...args)\n}\n\nCommands.moveToStartOfPreviousBlock = editor => {\n  editor.moveStartToStartOfPreviousBlock().moveToStart()\n}\n\nCommands.moveToStartOfPreviousInline = editor => {\n  editor.moveStartToStartOfPreviousInline().moveToStart()\n}\n\nCommands.moveToStartOfPreviousText = editor => {\n  editor.moveStartToStartOfPreviousText().moveToStart()\n}\n\nCommands.moveToStartOfText = editor => {\n  editor.moveStartToStartOfText().moveToStart()\n}\n\nCommands.select = (editor, properties, options = {}) => {\n  properties = Selection.createProperties(properties)\n  const { snapshot = false } = options\n  const { value } = editor\n  const { document, selection } = value\n  const props = {}\n  let next = selection.setProperties(properties)\n  next = document.resolveSelection(next)\n\n  // Re-compute the properties, to ensure that we get their normalized values.\n  properties = pick(next, Object.keys(properties))\n\n  // Remove any properties that are already equal to the current selection. And\n  // create a dictionary of the previous values for all of the properties that\n  // are being changed, for the inverse operation.\n  for (const k in properties) {\n    if (snapshot === true || !is(properties[k], selection[k])) {\n      props[k] = properties[k]\n    }\n  }\n\n  // If the selection moves, clear any marks, unless the new selection\n  // properties editor the marks in some way.\n  if (selection.marks && !props.marks && (props.anchor || props.focus)) {\n    props.marks = null\n  }\n\n  // If there are no new properties to set, abort to avoid extra operations.\n  if (Object.keys(props).length === 0) {\n    return\n  }\n\n  editor.applyOperation(\n    {\n      type: 'set_selection',\n      value,\n      properties: props,\n      selection: selection.toJSON(),\n    },\n    snapshot ? { skip: false, merge: false } : {}\n  )\n}\n\nCommands.setAnchor = (editor, ...args) => {\n  editor.command(proxy, 'setAnchor', ...args)\n}\n\nCommands.setEnd = (editor, ...args) => {\n  editor.command(proxy, 'setEnd', ...args)\n}\n\nCommands.setFocus = (editor, ...args) => {\n  editor.command(proxy, 'setFocus', ...args)\n}\n\nCommands.setStart = (editor, ...args) => {\n  editor.command(proxy, 'setStart', ...args)\n}\n\nCommands.snapshotSelection = editor => {\n  editor.withoutMerging(() => {\n    editor.select(editor.value.selection, { snapshot: true })\n  })\n}\n\n/**\n * Helpers.\n */\n\nfunction proxy(editor, method, ...args) {\n  const range = editor.value.selection[method](...args)\n  editor.select(range)\n}\n\nfunction pointEdgeObject(editor, point, edge, object) {\n  const Point = point.slice(0, 1).toUpperCase() + point.slice(1)\n  const Edge = edge.slice(0, 1).toUpperCase() + edge.slice(1)\n  const Object = object.slice(0, 1).toUpperCase() + object.slice(1)\n  const method = `move${Point}To${Edge}OfNode`\n  const getNode = object == 'text' ? 'getNode' : `getClosest${Object}`\n  const { value } = editor\n  const { document, selection } = value\n  const p = selection[point]\n  const node = document[getNode](p.key)\n  if (!node) return\n  editor[method](node)\n}\n\nfunction pointEdgeSideObject(editor, point, edge, side, object) {\n  const Point = point.slice(0, 1).toUpperCase() + point.slice(1)\n  const Edge = edge.slice(0, 1).toUpperCase() + edge.slice(1)\n  const Side = side.slice(0, 1).toUpperCase() + side.slice(1)\n  const Object = object.slice(0, 1).toUpperCase() + object.slice(1)\n  const method = `move${Point}To${Edge}OfNode`\n  const getNode = object == 'text' ? 'getNode' : `getClosest${Object}`\n  const getDirectionNode = `get${Side}${Object}`\n  const { value } = editor\n  const { document, selection } = value\n  const p = selection[point]\n  const node = document[getNode](p.key)\n  if (!node) return\n  const target = document[getDirectionNode](node.key)\n  if (!target) return\n  editor[method](target)\n}\n\nfunction pointBackward(editor, point, n = 1) {\n  if (n === 0) return\n  if (n < 0) return pointForward(editor, point, -n)\n\n  const Point = point.slice(0, 1).toUpperCase() + point.slice(1)\n  const { value } = editor\n  const { document, selection } = value\n  const p = selection[point]\n  const hasVoidParent = document.hasVoidParent(p.path, editor)\n\n  // what is this?\n  if (!hasVoidParent && p.offset - n >= 0) {\n    const range = selection[`move${Point}Backward`](n)\n    editor.select(range)\n    return\n  }\n\n  const previous = document.getPreviousText(p.path)\n  if (!previous) return\n\n  const block = document.getClosestBlock(p.path)\n  const isInBlock = block.hasNode(previous.key)\n  const isPreviousInVoid =\n    previous && document.hasVoidParent(previous.key, editor)\n  editor[`move${Point}ToEndOfNode`](previous)\n\n  // when is this called?\n  if (!hasVoidParent && !isPreviousInVoid && isInBlock) {\n    const range = editor.value.selection[`move${Point}Backward`](n)\n    editor.select(range)\n  }\n}\n\nfunction pointForward(editor, point, n = 1) {\n  if (n === 0) return\n  if (n < 0) return pointBackward(editor, point, -n)\n\n  const Point = point.slice(0, 1).toUpperCase() + point.slice(1)\n  const { value } = editor\n  const { document, selection } = value\n  const p = selection[point]\n  const text = document.getNode(p.path)\n  const hasVoidParent = document.hasVoidParent(p.path, editor)\n\n  // what is this?\n  if (!hasVoidParent && p.offset + n <= text.text.length) {\n    const range = selection[`move${Point}Forward`](n)\n    editor.select(range)\n    return\n  }\n\n  const next = document.getNextText(p.path)\n  if (!next) return\n\n  const block = document.getClosestBlock(p.path)\n  const isInBlock = block.hasNode(next.key)\n  const isNextInVoid = document.hasVoidParent(next.key, editor)\n  editor[`move${Point}ToStartOfNode`](next)\n\n  // when is this called?\n  if (!hasVoidParent && !isNextInVoid && isInBlock) {\n    const range = editor.value.selection[`move${Point}Forward`](n)\n    editor.select(range)\n  }\n}\n\nfunction pointWordBackward(editor, pointName) {\n  const { value } = editor\n  const { document, selection } = value\n  const point = selection[pointName]\n  const block = document.getClosestBlock(point.key)\n  const offset = block.getOffset(point.key)\n  const o = offset + point.offset\n  const { text } = block\n  const n = TextUtils.getWordOffsetBackward(text, o)\n  editor.command(pointBackward, pointName, n > 0 ? n : 1)\n}\n\nfunction pointWordForward(editor, pointName) {\n  const { value } = editor\n  const { document, selection } = value\n  const point = selection[pointName]\n  const block = document.getClosestBlock(point.key)\n  const offset = block.getOffset(point.key)\n  const o = offset + point.offset\n  const { text } = block\n  const n = TextUtils.getWordOffsetForward(text, o)\n  editor.command(pointForward, pointName, n > 0 ? n : 1)\n}\n\nexport default Commands\n","import Value from '../models/value'\n\n/**\n * Commands.\n *\n * @type {Object}\n */\n\nconst Commands = {}\n\n/**\n * Set `properties` on the value.\n *\n * @param {Editor} editor\n * @param {Object|Value} properties\n */\n\nCommands.setData = (editor, data = {}) => {\n  const properties = Value.createProperties({ data })\n  const { value } = editor\n\n  editor.applyOperation({\n    type: 'set_value',\n    properties,\n    value,\n  })\n}\n\n/**\n * Set `properties` on the value.\n *\n * @param {Editor} editor\n * @param {Object|Value} properties\n */\n\nCommands.setDecorations = (editor, decorations = []) => {\n  const properties = Value.createProperties({ decorations })\n  const { value } = editor\n\n  editor.applyOperation({\n    type: 'set_value',\n    properties,\n    value,\n  })\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Commands\n","/**\n * A plugin that adds a set of queries to the editor.\n *\n * @param {Object} queries\n * @return {Object}\n */\n\nfunction QueriesPlugin(queries = {}) {\n  /**\n   * On construct, register all the queries.\n   *\n   * @param {Editor} editor\n   * @param {Function} next\n   */\n\n  function onConstruct(editor, next) {\n    for (const query in queries) {\n      editor.registerQuery(query)\n    }\n\n    return next()\n  }\n\n  /**\n   * On query, if it exists in our list of queries, call it.\n   *\n   * @param {Object} query\n   * @param {Editor} editor\n   * @param {Function} next\n   */\n\n  function onQuery(query, editor, next) {\n    const { type, args } = query\n    const fn = queries[type]\n    if (!fn) return next()\n    const ret = fn(editor, ...args)\n    return ret === undefined ? next() : ret\n  }\n\n  /**\n   * Return the plugin.\n   *\n   * @type {Object}\n   */\n\n  return {\n    onConstruct,\n    onQuery,\n  }\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default QueriesPlugin\n","/**\n * Define a Slate error.\n *\n * @type {SlateError}\n */\n\nclass SlateError extends Error {\n  constructor(code, attrs = {}) {\n    super(code)\n    this.code = code\n\n    for (const key in attrs) {\n      this[key] = attrs[key]\n    }\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor)\n    } else {\n      this.stack = new Error().stack\n    }\n  }\n}\n\n/**\n * Export.\n *\n * @type {SlateError}\n */\n\nexport default SlateError\n","import SlateError from '../utils/slate-error'\nimport Queries from './queries'\n\n/**\n * Create a plugin from a `schema` definition.\n *\n * @param {Object} schema\n * @return {Object}\n */\n\nfunction SchemaPlugin(schema) {\n  const { rules, document, blocks, inlines, marks } = schema\n  let schemaRules = []\n\n  if (rules) {\n    schemaRules = schemaRules.concat(rules)\n  }\n\n  if (document) {\n    schemaRules.push({\n      match: [{ object: 'document' }],\n      ...document,\n    })\n  }\n\n  if (blocks) {\n    for (const key in blocks) {\n      schemaRules.push({\n        match: [{ object: 'block', type: key }],\n        ...blocks[key],\n      })\n    }\n  }\n\n  if (inlines) {\n    for (const key in inlines) {\n      schemaRules.push({\n        match: [{ object: 'inline', type: key }],\n        ...inlines[key],\n      })\n    }\n  }\n\n  if (marks) {\n    for (const key in marks) {\n      schemaRules.push({\n        match: [{ object: 'mark', type: key }],\n        ...marks[key],\n      })\n    }\n  }\n\n  /**\n   * Check if a `mark` is void based on the schema rules.\n   *\n   * @param {Editor} editor\n   * @param {Mark} mark\n   * @return {Boolean}\n   */\n\n  function isAtomic(editor, mark) {\n    const rule = schemaRules.find(\n      r => 'isAtomic' in r && testRules(mark, r.match)\n    )\n\n    return rule && rule.isAtomic\n  }\n\n  /**\n   * Check if a `node` is void based on the schema rules.\n   *\n   * @param {Editor} editor\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  function isVoid(editor, node) {\n    const rule = schemaRules.find(\n      r => 'isVoid' in r && testRules(node, r.match)\n    )\n\n    return rule && rule.isVoid\n  }\n\n  /**\n   * Normalize a `node` with the schema rules, returning a function that will\n   * fix the invalid node, or void if the node is valid.\n   *\n   * @param {Node} node\n   * @param {Editor} editor\n   * @param {Function} next\n   * @return {Function|Void}\n   */\n\n  function normalizeNode(node, editor, next) {\n    const error = validateNode(node, editor, () => {})\n    if (!error) return next()\n\n    return () => {\n      const { rule } = error\n      const { size } = editor.operations\n\n      // First run the user-provided `normalize` function if one exists...\n      if (rule.normalize) {\n        rule.normalize(editor, error)\n      }\n\n      // If the `normalize` function did not add any operations to the editor\n      // object, it can't have normalized, so run the default one.\n      if (editor.operations.size === size) {\n        defaultNormalize(editor, error)\n      }\n    }\n  }\n\n  /**\n   * Validate a `node` with the schema rules, returning a `SlateError` if it's\n   * invalid.\n   *\n   * @param {Node} node\n   * @param {Editor} editor\n   * @param {Function} next\n   * @return {Error|Void}\n   */\n\n  function validateNode(node, editor, next) {\n    const matches = schemaRules.filter(r => testRules(node, r.match))\n    const failure = validateRules(node, matches, schemaRules, { every: true })\n    if (!failure) return next()\n    const error = new SlateError(failure.code, failure)\n    return error\n  }\n\n  /**\n   * On schema-related queries, respond if we can.\n   *\n   * @param {Object} query\n   * @param {Function} next\n   */\n\n  const queries = Queries({ isAtomic, isVoid })\n\n  /**\n   * Return the plugins.\n   *\n   * @type {Object}\n   */\n\n  return [{ normalizeNode, validateNode }, queries]\n}\n\n/**\n * Normalize an invalid value with `error` with default remedies.\n *\n * @param {Editor} editor\n * @param {SlateError} error\n */\n\nfunction defaultNormalize(editor, error) {\n  const { code, node, child, next, previous, key, mark } = error\n\n  switch (code) {\n    case 'child_max_invalid':\n    case 'child_object_invalid':\n    case 'child_type_invalid':\n    case 'child_unknown':\n    case 'first_child_object_invalid':\n    case 'first_child_type_invalid':\n    case 'last_child_object_invalid':\n    case 'last_child_type_invalid': {\n      return child.object === 'text' &&\n        node.object === 'block' &&\n        node.nodes.size === 1\n        ? editor.removeNodeByKey(node.key)\n        : editor.removeNodeByKey(child.key)\n    }\n\n    case 'previous_sibling_object_invalid':\n    case 'previous_sibling_type_invalid': {\n      return previous.object === 'text' &&\n        node.object === 'block' &&\n        node.nodes.size === 1\n        ? editor.removeNodeByKey(node.key)\n        : editor.removeNodeByKey(previous.key)\n    }\n\n    case 'next_sibling_object_invalid':\n    case 'next_sibling_type_invalid': {\n      return next.object === 'text' &&\n        node.object === 'block' &&\n        node.nodes.size === 1\n        ? editor.removeNodeByKey(node.key)\n        : editor.removeNodeByKey(next.key)\n    }\n\n    case 'child_min_invalid':\n    case 'node_text_invalid':\n    case 'parent_object_invalid':\n    case 'parent_type_invalid': {\n      return node.object === 'document'\n        ? node.nodes.forEach(n => editor.removeNodeByKey(n.key))\n        : editor.removeNodeByKey(node.key)\n    }\n\n    case 'node_data_invalid': {\n      return node.data.get(key) === undefined && node.object !== 'document'\n        ? editor.removeNodeByKey(node.key)\n        : editor.setNodeByKey(node.key, { data: node.data.delete(key) })\n    }\n\n    case 'node_mark_invalid': {\n      return node\n        .getTexts()\n        .forEach(t => editor.removeMarkByKey(t.key, 0, t.text.length, mark))\n    }\n\n    default: {\n      return editor.removeNodeByKey(node.key)\n    }\n  }\n}\n\n/**\n * Check that an `object` matches one of a set of `rules`.\n *\n * @param {Mixed} object\n * @param {Object|Array} rules\n * @return {Boolean}\n */\n\nfunction testRules(object, rules) {\n  const error = validateRules(object, rules)\n  return !error\n}\n\n/**\n * Validate that a `object` matches a `rule` object or array.\n *\n * @param {Mixed} object\n * @param {Object|Array} rule\n * @param {Array|Void} rules\n * @return {Error|Void}\n */\n\nfunction validateRules(object, rule, rules, options = {}) {\n  const { every = false } = options\n\n  if (Array.isArray(rule)) {\n    const array = rule.length ? rule : [{}]\n    let first\n\n    for (const r of array) {\n      const error = validateRules(object, r, rules)\n      first = first || error\n      if (every && error) return error\n      if (!every && !error) return\n    }\n\n    return first\n  }\n\n  const error =\n    validateObject(object, rule) ||\n    validateType(object, rule) ||\n    validateData(object, rule) ||\n    validateMarks(object, rule) ||\n    validateText(object, rule) ||\n    validateFirst(object, rule) ||\n    validateLast(object, rule) ||\n    validateNodes(object, rule, rules)\n\n  return error\n}\n\nfunction validateObject(node, rule) {\n  if (rule.object == null) return\n  if (rule.object === node.object) return\n  if (typeof rule.object === 'function' && rule.object(node.object)) return\n  return fail('node_object_invalid', { rule, node })\n}\n\nfunction validateType(node, rule) {\n  if (rule.type == null) return\n  if (rule.type === node.type) return\n  if (typeof rule.type === 'function' && rule.type(node.type)) return\n  return fail('node_type_invalid', { rule, node })\n}\n\nfunction validateData(node, rule) {\n  if (rule.data == null) return\n  if (node.data == null) return\n\n  if (typeof rule.data === 'function') {\n    if (rule.data(node.data)) return\n    return fail('node_data_invalid', { rule, node })\n  }\n\n  for (const key in rule.data) {\n    const fn = rule.data[key]\n    const value = node.data && node.data.get(key)\n    const valid = typeof fn === 'function' ? fn(value) : fn === value\n    if (valid) continue\n    return fail('node_data_invalid', { rule, node, key, value })\n  }\n}\n\nfunction validateMarks(node, rule) {\n  if (rule.marks == null) return\n  const marks = node.getMarks().toArray()\n\n  for (const mark of marks) {\n    const valid = rule.marks.some(\n      def =>\n        typeof def.type === 'function'\n          ? def.type(mark.type)\n          : def.type === mark.type\n    )\n    if (valid) continue\n    return fail('node_mark_invalid', { rule, node, mark })\n  }\n}\n\nfunction validateText(node, rule) {\n  if (rule.text == null) return\n  const { text } = node\n  const valid =\n    typeof rule.text === 'function' ? rule.text(text) : rule.text.test(text)\n  if (valid) return\n  return fail('node_text_invalid', { rule, node, text })\n}\n\nfunction validateFirst(node, rule) {\n  if (rule.first == null) return\n  const first = node.nodes.first()\n  if (!first) return\n  const error = validateRules(first, rule.first)\n  if (!error) return\n  error.rule = rule\n  error.node = node\n  error.child = first\n  error.code = error.code.replace('node_', 'first_child_')\n  return error\n}\n\nfunction validateLast(node, rule) {\n  if (rule.last == null) return\n  const last = node.nodes.last()\n  if (!last) return\n  const error = validateRules(last, rule.last)\n  if (!error) return\n  error.rule = rule\n  error.node = node\n  error.child = last\n  error.code = error.code.replace('node_', 'last_child_')\n  return error\n}\n\nfunction validateNodes(node, rule, rules = []) {\n  if (node.nodes == null) return\n\n  const children = node.nodes\n  const defs = rule.nodes != null ? rule.nodes.slice() : []\n  let count = 0\n  let lastCount = 0\n  let min = null\n  let index = -1\n  let def = null\n  let max = null\n  let child = null\n  let previous = null\n  let next = null\n\n  function nextDef() {\n    if (defs.length === 0) return false\n    def = defs.shift()\n    lastCount = count\n    count = 0\n    min = def.min || null\n    max = def.max || null\n    return true\n  }\n\n  function nextChild() {\n    index += 1\n    previous = index ? children.get(index - 1) : null\n    child = children.get(index)\n    next = children.get(index + 1)\n    if (!child) return false\n    lastCount = count\n    count += 1\n    return true\n  }\n\n  function rewind() {\n    if (index > 0) {\n      index -= 1\n      count = lastCount\n    }\n  }\n\n  if (rule.nodes != null) {\n    nextDef()\n  }\n\n  while (nextChild()) {\n    const err =\n      validateParent(node, child, rules) ||\n      validatePrevious(node, child, previous, index, rules) ||\n      validateNext(node, child, next, index, rules)\n\n    if (err) return err\n\n    if (rule.nodes != null) {\n      if (!def) {\n        return fail('child_unknown', { rule, node, child, index })\n      }\n\n      if (def.match) {\n        const error = validateRules(child, def.match)\n\n        if (error) {\n          // Since we want to report overflow on last matching child we don't\n          // immediately check for count > max, but instead do so once we find\n          // a child that doesn't match.\n          if (max != null && count - 1 > max) {\n            rewind()\n            return fail('child_max_invalid', {\n              rule,\n              node,\n              index,\n              child: children.get(index),\n              count,\n              limit: max,\n            })\n          }\n\n          const lastMin = min\n\n          // If there are more groups after this one then child might actually\n          // be valid.\n          if (nextDef()) {\n            // If we've already satisfied the minimum for the current group,\n            // then we can rewind and proceed to the next group.\n            if (lastCount - 1 >= lastMin) {\n              index -= 1\n              continue\n            }\n\n            // Otherwise we know that current value is underflowing. There are\n            // three possible causes for this...\n\n            // 1. There might just not be enough elements for current group, and\n            // current child is in fact the first of the next group. If so, the\n            // next def will not report errors, in which case we can rewind and\n            // report an minimum error.\n            if (validateRules(child, def.match) == null) {\n              rewind()\n              return fail('child_min_invalid', {\n                rule,\n                node,\n                index,\n                count: lastCount - 1,\n                limit: lastMin,\n              })\n            }\n\n            // 2. The current group is underflowing, but there is also an\n            // invalid child before the next group.\n            // 3. Or the current group is not underflowing but it appears so\n            // because there's an invalid child between its members.\n            // It's either the second or third case. If it's the second then\n            // we could report an underflow, but presence of an invalid child\n            // is arguably more important, so we report it first. It also lets\n            // us avoid checking for which case exactly is it.\n            error.rule = rule\n            error.node = node\n            error.child = child\n            error.index = index\n            error.code = error.code.replace('node_', 'child_')\n            return error\n          }\n\n          // Otherwise either we exhausted the last group, in which case it's\n          // an unknown child, ...\n          if (max != null && count > max) {\n            return fail('child_unknown', { rule, node, child, index })\n          }\n\n          // ... or it's an invalid child for the last group.\n          error.rule = rule\n          error.node = node\n          error.child = child\n          error.index = index\n          error.code = error.code.replace('node_', 'child_')\n          return error\n        }\n      }\n    }\n  }\n\n  // Since we want to report overflow on last matching child we don't\n  // immediately check for count > max, but do so after processing all nodes.\n  if (max != null && count > max) {\n    return fail('child_max_invalid', {\n      rule,\n      node,\n      index: index - 1,\n      count,\n      child: children.get(index - 1),\n      limit: max,\n    })\n  }\n\n  if (rule.nodes != null) {\n    do {\n      if (count < min) {\n        return fail('child_min_invalid', {\n          rule,\n          node,\n          index,\n          count,\n          limit: min,\n        })\n      }\n    } while (nextDef())\n  }\n}\n\nfunction validateParent(node, child, rules) {\n  for (const rule of rules) {\n    if (rule.parent == null) continue\n    if (!testRules(child, rule.match)) continue\n\n    const error = validateRules(node, rule.parent)\n    if (!error) continue\n\n    error.rule = rule\n    error.parent = node\n    error.node = child\n    error.code = error.code.replace('node_', 'parent_')\n    return error\n  }\n}\n\nfunction validatePrevious(node, child, previous, index, rules) {\n  if (!previous) return\n\n  for (const rule of rules) {\n    if (rule.previous == null) continue\n    if (!testRules(child, rule.match)) continue\n\n    const error = validateRules(previous, rule.previous)\n    if (!error) continue\n\n    error.rule = rule\n    error.node = node\n    error.child = child\n    error.index = index\n    error.previous = previous\n    error.code = error.code.replace('node_', 'previous_sibling_')\n    return error\n  }\n}\n\nfunction validateNext(node, child, next, index, rules) {\n  if (!next) return\n\n  for (const rule of rules) {\n    if (rule.next == null) continue\n    if (!testRules(child, rule.match)) continue\n\n    const error = validateRules(next, rule.next)\n    if (!error) continue\n\n    error.rule = rule\n    error.node = node\n    error.child = child\n    error.index = index\n    error.next = next\n    error.code = error.code.replace('node_', 'next_sibling_')\n    return error\n  }\n}\n\n/**\n * Create an interim failure object with `code` and `attrs`.\n *\n * @param {String} code\n * @param {Object} attrs\n * @return {Object}\n */\n\nfunction fail(code, attrs) {\n  return { code, ...attrs }\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default SchemaPlugin\n","import Block from '../models/block'\nimport Inline from '../models/inline'\nimport Mark from '../models/mark'\n\n/**\n * Ensure that an expanded selection is deleted first using the `editor.delete`\n * command. This guarantees that it uses the proper semantic \"intent\" instead of\n * using `deleteAtRange` under the covers and skipping `delete`.\n *\n * @param {Editor}\n */\n\nfunction deleteExpanded(editor) {\n  const { value } = editor\n  const { selection } = value\n\n  if (selection.isExpanded) {\n    editor.delete()\n  }\n}\n\n/**\n * Commands.\n *\n * @type {Object}\n */\n\nconst Commands = {}\n\n/**\n * Add a `mark` to the characters in the current selection.\n *\n * @param {Editor} editor\n * @param {Mark} mark\n */\n\nCommands.addMark = (editor, mark) => {\n  mark = Mark.create(mark)\n  const { value } = editor\n  const { document, selection } = value\n\n  if (selection.isExpanded) {\n    editor.addMarkAtRange(selection, mark)\n  } else if (selection.marks) {\n    const marks = selection.marks.add(mark)\n    const sel = selection.set('marks', marks)\n    editor.select(sel)\n  } else {\n    const marks = document.getActiveMarksAtRange(selection).add(mark)\n    const sel = selection.set('marks', marks)\n    editor.select(sel)\n  }\n}\n\n/**\n * Add a list of `marks` to the characters in the current selection.\n *\n * @param {Editor} editor\n * @param {Set<Mark>|Array<Object>} marks\n */\n\nCommands.addMarks = (editor, marks) => {\n  marks.forEach(mark => editor.addMark(mark))\n}\n\n/**\n * Delete at the current selection.\n *\n * @param {Editor} editor\n */\n\nCommands.delete = editor => {\n  const { value } = editor\n  const { selection } = value\n  editor.deleteAtRange(selection)\n\n  // COMPAT: Ensure that the selection is collapsed, because in certain cases\n  // when deleting across inline nodes, when splitting the inline node the end\n  // point of the selection will end up after the split point.\n  editor.moveToFocus()\n}\n\n/**\n * Delete backward `n` characters.\n *\n * @param {Editor} editor\n * @param {Number} n (optional)\n */\n\nCommands.deleteBackward = (editor, n = 1) => {\n  const { value } = editor\n  const { selection } = value\n\n  if (selection.isExpanded) {\n    editor.delete()\n  } else {\n    editor.deleteBackwardAtRange(selection, n)\n  }\n}\n\n/**\n * Delete backward one character.\n *\n * @param {Editor} editor\n */\n\nCommands.deleteCharBackward = editor => {\n  const { value } = editor\n  const { selection } = value\n\n  if (selection.isExpanded) {\n    editor.delete()\n  } else {\n    editor.deleteCharBackwardAtRange(selection)\n  }\n}\n\n/**\n * Delete backward one line.\n *\n * @param {Editor} editor\n */\n\nCommands.deleteLineBackward = editor => {\n  const { value } = editor\n  const { selection } = value\n\n  if (selection.isExpanded) {\n    editor.delete()\n  } else {\n    editor.deleteLineBackwardAtRange(selection)\n  }\n}\n\n/**\n * Delete backward one word.\n *\n * @param {Editor} editor\n */\n\nCommands.deleteWordBackward = editor => {\n  const { value } = editor\n  const { selection } = value\n\n  if (selection.isExpanded) {\n    editor.delete()\n  } else {\n    editor.deleteWordBackwardAtRange(selection)\n  }\n}\n\n/**\n * Delete backward `n` characters.\n *\n * @param {Editor} editor\n * @param {Number} n (optional)\n */\n\nCommands.deleteForward = (editor, n = 1) => {\n  const { value } = editor\n  const { selection } = value\n\n  if (selection.isExpanded) {\n    editor.delete()\n  } else {\n    editor.deleteForwardAtRange(selection, n)\n  }\n}\n\n/**\n * Delete backward one character.\n *\n * @param {Editor} editor\n */\n\nCommands.deleteCharForward = editor => {\n  const { value } = editor\n  const { selection } = value\n\n  if (selection.isExpanded) {\n    editor.delete()\n  } else {\n    editor.deleteCharForwardAtRange(selection)\n  }\n}\n\n/**\n * Delete backward one line.\n *\n * @param {Editor} editor\n */\n\nCommands.deleteLineForward = editor => {\n  const { value } = editor\n  const { selection } = value\n\n  if (selection.isExpanded) {\n    editor.delete()\n  } else {\n    editor.deleteLineForwardAtRange(selection)\n  }\n}\n\n/**\n * Delete backward one word.\n *\n * @param {Editor} editor\n */\n\nCommands.deleteWordForward = editor => {\n  const { value } = editor\n  const { selection } = value\n\n  if (selection.isExpanded) {\n    editor.delete()\n  } else {\n    editor.deleteWordForwardAtRange(selection)\n  }\n}\n\n/**\n * Insert a `block` at the current selection.\n *\n * @param {Editor} editor\n * @param {String|Object|Block} block\n */\n\nCommands.insertBlock = (editor, block) => {\n  deleteExpanded(editor)\n\n  block = Block.create(block)\n  const { value } = editor\n  const { selection } = value\n  editor.insertBlockAtRange(selection, block)\n\n  // If the node was successfully inserted, update the selection.\n  const node = editor.value.document.getNode(block.key)\n  if (node) editor.moveToEndOfNode(node)\n}\n\n/**\n * Insert a `fragment` at the current selection.\n *\n * @param {Editor} editor\n * @param {Document} fragment\n */\n\nCommands.insertFragment = (editor, fragment) => {\n  if (!fragment.nodes.size) return\n\n  deleteExpanded(editor)\n\n  let { value } = editor\n  let { document, selection } = value\n  const { start, end } = selection\n  const { startText, endText, startInline } = value\n  const lastText = fragment.getLastText()\n  const lastInline = fragment.getClosestInline(lastText.key)\n  const lastBlock = fragment.getClosestBlock(lastText.key)\n  const firstChild = fragment.nodes.first()\n  const lastChild = fragment.nodes.last()\n  const keys = document.getTexts().map(text => text.key)\n  const isAppending =\n    !startInline ||\n    (start.isAtStartOfNode(startText) || end.isAtStartOfNode(startText)) ||\n    (start.isAtEndOfNode(endText) || end.isAtEndOfNode(endText))\n\n  const isInserting =\n    firstChild.hasBlockChildren() || lastChild.hasBlockChildren()\n\n  editor.insertFragmentAtRange(selection, fragment)\n  value = editor.value\n  document = value.document\n\n  const newTexts = document.getTexts().filter(n => !keys.includes(n.key))\n  const newText = isAppending ? newTexts.last() : newTexts.takeLast(2).first()\n\n  if (newText && (lastInline || isInserting)) {\n    editor.moveToEndOfNode(newText)\n  } else if (newText) {\n    editor.moveToStartOfNode(newText).moveForward(lastBlock.text.length)\n  }\n}\n\n/**\n * Insert an `inline` at the current selection.\n *\n * @param {Editor} editor\n * @param {String|Object|Inline} inline\n */\n\nCommands.insertInline = (editor, inline) => {\n  deleteExpanded(editor)\n\n  inline = Inline.create(inline)\n  const { value } = editor\n  const { selection } = value\n  editor.insertInlineAtRange(selection, inline)\n\n  // If the node was successfully inserted, update the selection.\n  const node = editor.value.document.getNode(inline.key)\n  if (node) editor.moveToEndOfNode(node)\n}\n\n/**\n * Insert a string of `text` with optional `marks` at the current selection.\n *\n * @param {Editor} editor\n * @param {String} text\n * @param {Set<Mark>} marks (optional)\n */\n\nCommands.insertText = (editor, text, marks) => {\n  deleteExpanded(editor)\n\n  const { value } = editor\n  const { document, selection } = value\n  marks = marks || selection.marks || document.getInsertMarksAtRange(selection)\n  editor.insertTextAtRange(selection, text, marks)\n\n  // If the text was successfully inserted, and the selection had marks on it,\n  // unset the selection's marks.\n  if (selection.marks && document != editor.value.document) {\n    editor.select({ marks: null })\n  }\n}\n\n/**\n * Remove a `mark` from the characters in the current selection.\n *\n * @param {Editor} editor\n * @param {Mark} mark\n */\n\nCommands.removeMark = (editor, mark) => {\n  mark = Mark.create(mark)\n  const { value } = editor\n  const { document, selection } = value\n\n  if (selection.isExpanded) {\n    editor.removeMarkAtRange(selection, mark)\n  } else if (selection.marks) {\n    const marks = selection.marks.remove(mark)\n    const sel = selection.set('marks', marks)\n    editor.select(sel)\n  } else {\n    const marks = document.getActiveMarksAtRange(selection).remove(mark)\n    const sel = selection.set('marks', marks)\n    editor.select(sel)\n  }\n}\n\n/**\n * Replace an `oldMark` with a `newMark` in the characters in the current selection.\n *\n * @param {Editor} editor\n * @param {Mark} oldMark\n * @param {Mark} newMark\n */\n\nCommands.replaceMark = (editor, oldMark, newMark) => {\n  editor.removeMark(oldMark)\n  editor.addMark(newMark)\n}\n\n/**\n * Set the `properties` of block nodes.\n *\n * @param {Editor} editor\n * @param {Object|String} properties\n */\n\nCommands.setBlocks = (editor, properties) => {\n  const { value } = editor\n  const { selection } = value\n  editor.setBlocksAtRange(selection, properties)\n}\n\n/**\n * Set the `properties` of inline nodes.\n *\n * @param {Editor} editor\n * @param {Object|String} properties\n */\n\nCommands.setInlines = (editor, properties) => {\n  const { value } = editor\n  const { selection } = value\n  editor.setInlinesAtRange(selection, properties)\n}\n\n/**\n * Split the block node at the current selection, to optional `depth`.\n *\n * @param {Editor} editor\n * @param {Number} depth (optional)\n */\n\nCommands.splitBlock = (editor, depth = 1) => {\n  deleteExpanded(editor)\n\n  const { value } = editor\n  const { selection, document } = value\n  const marks = selection.marks || document.getInsertMarksAtRange(selection)\n  editor.splitBlockAtRange(selection, depth).moveToEnd()\n\n  if (marks && marks.size !== 0) {\n    editor.select({ marks })\n  }\n}\n\n/**\n * Split the inline nodes to optional `height`.\n *\n * @param {Editor} editor\n * @param {Number} height (optional)\n */\n\nCommands.splitInline = (editor, height) => {\n  deleteExpanded(editor)\n  const { value } = editor\n  const { selection } = value\n  editor.splitInlineAtRange(selection, height)\n}\n\n/**\n * Add or remove a `mark` from the characters in the current selection,\n * depending on whether it's already there.\n *\n * @param {Editor} editor\n * @param {Mark} mark\n */\n\nCommands.toggleMark = (editor, mark) => {\n  mark = Mark.create(mark)\n  const { value } = editor\n  const exists = value.activeMarks.has(mark)\n\n  if (exists) {\n    editor.removeMark(mark)\n  } else {\n    editor.addMark(mark)\n  }\n}\n\n/**\n * Unwrap nodes from a block with `properties`.\n *\n * @param {Editor} editor\n * @param {String|Object} properties\n */\n\nCommands.unwrapBlock = (editor, properties) => {\n  const { value } = editor\n  const { selection } = value\n  editor.unwrapBlockAtRange(selection, properties)\n}\n\n/**\n * Unwrap nodes from an inline with `properties`.\n *\n * @param {Editor} editor\n * @param {String|Object} properties\n */\n\nCommands.unwrapInline = (editor, properties) => {\n  const { value } = editor\n  const { selection } = value\n  editor.unwrapInlineAtRange(selection, properties)\n}\n\n/**\n * Wrap nodes in a new `block`.\n *\n * @param {Editor} editor\n * @param {Block|Object|String} block\n */\n\nCommands.wrapBlock = (editor, block) => {\n  const { value } = editor\n  const { selection } = value\n  editor.wrapBlockAtRange(selection, block)\n}\n\n/**\n * Wrap nodes in a new `inline`.\n *\n * @param {Editor} editor\n * @param {Inline|Object|String} inline\n */\n\nCommands.wrapInline = (editor, inline) => {\n  const { value } = editor\n  const { selection } = value\n  editor.wrapInlineAtRange(selection, inline)\n}\n\n/**\n * Wrap the current selection with prefix/suffix.\n *\n * @param {Editor} editor\n * @param {String} prefix\n * @param {String} suffix\n */\n\nCommands.wrapText = (editor, prefix, suffix = prefix) => {\n  const { value } = editor\n  const { selection } = value\n  editor.wrapTextAtRange(selection, prefix, suffix)\n\n  // If the selection was collapsed, it will have moved the start offset too.\n  if (selection.isCollapsed) {\n    editor.moveStartBackward(prefix.length)\n  }\n\n  // Adding the suffix will have pushed the end of the selection further on, so\n  // we need to move it back to account for this.\n  editor.moveEndBackward(suffix.length)\n\n  // There's a chance that the selection points moved \"through\" each other,\n  // resulting in a now-incorrect selection direction.\n  if (selection.isForward != editor.value.selection.isForward) {\n    editor.flip()\n  }\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Commands\n","import AtRange from '../commands/at-range'\nimport ByPath from '../commands/by-path'\nimport Commands from './commands'\nimport OnHistory from '../commands/on-history'\nimport OnSelection from '../commands/on-selection'\nimport OnValue from '../commands/on-value'\nimport Queries from './queries'\nimport Schema from './schema'\nimport Text from '../models/text'\nimport WithIntent from '../commands/with-intent'\n\n/**\n * A plugin that defines the core Slate logic.\n *\n * @param {Object} options\n * @return {Object}\n */\n\nfunction CorePlugin(options = {}) {\n  const { plugins = [] } = options\n\n  /**\n   * The core Slate commands.\n   *\n   * @type {Object}\n   */\n\n  const commands = Commands({\n    ...AtRange,\n    ...ByPath,\n    ...OnHistory,\n    ...OnSelection,\n    ...OnValue,\n    ...WithIntent,\n  })\n\n  /**\n   * The core Slate queries.\n   *\n   * @type {Object}\n   */\n\n  const queries = Queries({\n    isAtomic: () => false,\n    isVoid: () => false,\n  })\n\n  /**\n   * The core Slate schema.\n   *\n   * @type {Object}\n   */\n\n  const schema = Schema({\n    rules: [\n      // Only allow block nodes in documents.\n      {\n        match: { object: 'document' },\n        nodes: [\n          {\n            match: { object: 'block' },\n          },\n        ],\n      },\n\n      // Only allow block nodes or inline and text nodes in blocks.\n      {\n        match: {\n          object: 'block',\n          first: { object: 'block' },\n        },\n        nodes: [\n          {\n            match: { object: 'block' },\n          },\n        ],\n      },\n      {\n        match: {\n          object: 'block',\n          first: [{ object: 'inline' }, { object: 'text' }],\n        },\n        nodes: [\n          {\n            match: [{ object: 'inline' }, { object: 'text' }],\n          },\n        ],\n      },\n\n      // Only allow inline and text nodes in inlines.\n      {\n        match: { object: 'inline' },\n        nodes: [{ match: [{ object: 'inline' }, { object: 'text' }] }],\n      },\n\n      // Ensure that block and inline nodes have at least one text child.\n      {\n        match: [{ object: 'block' }, { object: 'inline' }],\n        nodes: [{ min: 1 }],\n        normalize: (editor, error) => {\n          const { code, node } = error\n\n          if (code === 'child_min_invalid' && node.nodes.isEmpty()) {\n            editor.insertNodeByKey(node.key, 0, Text.create())\n          }\n        },\n      },\n\n      // Ensure that inline nodes are surrounded by text nodes.\n      {\n        match: { object: 'block' },\n        first: [{ object: 'block' }, { object: 'text' }],\n        last: [{ object: 'block' }, { object: 'text' }],\n        normalize: (editor, error) => {\n          const { code, node } = error\n          const text = Text.create()\n          let i\n\n          if (code === 'first_child_object_invalid') {\n            i = 0\n          } else if (code === 'last_child_object_invalid') {\n            i = node.nodes.size\n          } else {\n            return\n          }\n\n          editor.insertNodeByKey(node.key, i, text)\n        },\n      },\n      {\n        match: { object: 'inline' },\n        first: [{ object: 'block' }, { object: 'text' }],\n        last: [{ object: 'block' }, { object: 'text' }],\n        previous: [{ object: 'block' }, { object: 'text' }],\n        next: [{ object: 'block' }, { object: 'text' }],\n        normalize: (editor, error) => {\n          const { code, node, index } = error\n          const text = Text.create()\n          let i\n\n          if (code === 'first_child_object_invalid') {\n            i = 0\n          } else if (code === 'last_child_object_invalid') {\n            i = node.nodes.size\n          } else if (code === 'previous_sibling_object_invalid') {\n            i = index\n          } else if (code === 'next_sibling_object_invalid') {\n            i = index + 1\n          } else {\n            return\n          }\n\n          editor.insertNodeByKey(node.key, i, text)\n        },\n      },\n\n      // Merge adjacent text nodes.\n      {\n        match: { object: 'text' },\n        next: [{ object: 'block' }, { object: 'inline' }],\n        normalize: (editor, error) => {\n          const { code, next } = error\n\n          if (code === 'next_sibling_object_invalid') {\n            editor.mergeNodeByKey(next.key)\n          }\n        },\n      },\n    ],\n  })\n\n  /**\n   * Return the plugins.\n   *\n   * @type {Array}\n   */\n\n  return [schema, ...plugins, commands, queries]\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default CorePlugin\n","import Debug from 'debug'\nimport invariant from 'tiny-invariant'\nimport isPlainObject from 'is-plain-object'\nimport warning from 'tiny-warning'\nimport { List } from 'immutable'\n\nimport CommandsPlugin from '../plugins/commands'\nimport CorePlugin from '../plugins/core'\nimport Operation from '../models/operation'\nimport PathUtils from '../utils/path-utils'\nimport QueriesPlugin from '../plugins/queries'\nimport SchemaPlugin from '../plugins/schema'\nimport Value from '../models/value'\n\n/**\n * Debug.\n *\n * @type {Function}\n */\n\nconst debug = Debug('slate:editor')\n\n/**\n * Editor.\n *\n * @type {Editor}\n */\n\nclass Editor {\n  /**\n   * Create a new `Editor` with `attrs`.\n   *\n   * @param {Object} attrs\n   * @param {Object} options\n   */\n\n  constructor(attrs = {}, options = {}) {\n    const { controller = this, construct = true } = options\n    const {\n      onChange = () => {},\n      plugins = [],\n      readOnly = false,\n      value = Value.create(),\n    } = attrs\n\n    this.controller = controller\n    this.middleware = {}\n    this.onChange = onChange\n    this.operations = List()\n    this.readOnly = null\n    this.value = null\n\n    this.tmp = {\n      dirty: [],\n      flushing: false,\n      merge: null,\n      normalize: true,\n      save: true,\n    }\n\n    const core = CorePlugin({ plugins })\n    registerPlugin(this, core)\n\n    if (construct) {\n      this.run('onConstruct')\n      this.setReadOnly(readOnly)\n      this.setValue(value, options)\n    }\n  }\n\n  /**\n   * Apply an `operation` to the editor, updating its value.\n   *\n   * @param {Operation|Object} operation\n   * @return {Editor}\n   */\n\n  applyOperation(operation) {\n    const { operations, controller } = this\n    let value = this.value\n\n    // Add in the current `value` in case the operation was serialized.\n    if (isPlainObject(operation)) {\n      operation = { ...operation, value }\n    }\n\n    operation = Operation.create(operation)\n\n    // Save the operation into the history. Since `save` is a command, we need\n    // to do it without normalizing, since it would have side effects.\n    this.withoutNormalizing(() => {\n      controller.save(operation)\n      value = this.value\n    })\n\n    // Apply the operation to the value.\n    debug('apply', { operation })\n    this.value = operation.apply(value)\n    this.operations = operations.push(operation)\n\n    // Get the paths of the affected nodes, and mark them as dirty.\n    const newDirtyPaths = getDirtyPaths(operation)\n    const dirty = this.tmp.dirty.reduce((memo, path) => {\n      path = PathUtils.create(path)\n      const transformed = PathUtils.transform(path, operation)\n      memo = memo.concat(transformed.toArray())\n      return memo\n    }, newDirtyPaths)\n\n    this.tmp.dirty = dirty\n\n    // If we're not already, queue the flushing process on the next tick.\n    if (!this.tmp.flushing) {\n      this.tmp.flushing = true\n      Promise.resolve().then(() => this.flush())\n    }\n\n    return controller\n  }\n\n  /**\n   * Flush the editor's current change.\n   *\n   * @return {Editor}\n   */\n\n  flush() {\n    this.run('onChange')\n    const { value, operations, controller } = this\n    const change = { value, operations }\n    this.operations = List()\n    this.tmp.flushing = false\n    this.onChange(change)\n    return controller\n  }\n\n  /**\n   * Trigger a command by `type` with `...args`.\n   *\n   * @param {String|Function} type\n   * @param {Any} ...args\n   * @return {Editor}\n   */\n\n  command(type, ...args) {\n    const { controller } = this\n\n    if (typeof type === 'function') {\n      type(controller, ...args)\n      normalizeDirtyPaths(this)\n      return controller\n    }\n\n    debug('command', { type, args })\n    const obj = { type, args }\n    this.run('onCommand', obj)\n    normalizeDirtyPaths(this)\n    return controller\n  }\n\n  /**\n   * Checks if a command by `type` has been registered.\n   *\n   * @param {String} type\n   * @return {Boolean}\n   */\n\n  hasCommand(type) {\n    const { controller } = this\n    const has = type in controller && controller[type].__command\n\n    return has\n  }\n\n  /**\n   * Checks if a query by `type` has been registered.\n   *\n   * @param {String} type\n   * @return {Boolean}\n   */\n\n  hasQuery(type) {\n    const { controller } = this\n    const has = type in controller && controller[type].__query\n\n    return has\n  }\n\n  /**\n   * Normalize all of the nodes in the document from scratch.\n   *\n   * @return {Editor}\n   */\n\n  normalize() {\n    const { value, controller } = this\n    let { document } = value\n    const table = document.getKeysToPathsTable()\n    const paths = Object.values(table).map(PathUtils.create)\n    this.tmp.dirty = this.tmp.dirty.concat(paths)\n    normalizeDirtyPaths(this)\n\n    const { selection } = value\n    document = value.document\n\n    if (selection.isUnset && document.nodes.size) {\n      controller.moveToStartOfDocument()\n    }\n\n    return controller\n  }\n\n  /**\n   * Ask a query by `type` with `...args`.\n   *\n   * @param {String|Function} type\n   * @param {Any} ...args\n   * @return {Any}\n   */\n\n  query(type, ...args) {\n    const { controller } = this\n\n    if (typeof type === 'function') {\n      return type(controller, ...args)\n    }\n\n    debug('query', { type, args })\n    const obj = { type, args }\n    return this.run('onQuery', obj)\n  }\n\n  /**\n   * Register a command `type` with the editor.\n   *\n   * @param {String} type\n   * @return {Editor}\n   */\n\n  registerCommand(type) {\n    const { controller } = this\n\n    if (type in controller && controller[type].__command) {\n      return controller\n    }\n\n    invariant(\n      !(type in controller),\n      `You cannot register a \\`${type}\\` command because it would overwrite an existing property of the \\`Editor\\`.`\n    )\n\n    const method = (...args) => this.command(type, ...args)\n    controller[type] = method\n    method.__command = true\n    return controller\n  }\n\n  /**\n   * Register a query `type` with the editor.\n   *\n   * @param {String} type\n   * @return {Editor}\n   */\n\n  registerQuery(type) {\n    const { controller } = this\n\n    if (type in controller && controller[type].__query) {\n      return controller\n    }\n\n    invariant(\n      !(type in controller),\n      `You cannot register a \\`${type}\\` query because it would overwrite an existing property of the \\`Editor\\`.`\n    )\n\n    const method = (...args) => this.query(type, ...args)\n    controller[type] = method\n    method.__query = true\n    return controller\n  }\n\n  /**\n   * Run through the middleware stack by `key` with `args`.\n   *\n   * @param {String} key\n   * @param {Any} ...args\n   * @return {Any}\n   */\n\n  run(key, ...args) {\n    const { controller, middleware } = this\n    const fns = middleware[key] || []\n    let i = 0\n\n    function next(...overrides) {\n      const fn = fns[i++]\n      if (!fn) return\n\n      if (overrides.length) {\n        args = overrides\n      }\n\n      const ret = fn(...args, controller, next)\n      return ret\n    }\n\n    Object.defineProperty(next, 'change', {\n      get() {\n        invariant(\n          false,\n          'As of Slate 0.42, the `editor` is no longer passed as the third argument to event handlers. You can access it via `change.editor` instead.'\n        )\n      },\n    })\n\n    Object.defineProperty(next, 'onChange', {\n      get() {\n        invariant(\n          false,\n          'As of Slate 0.42, the `editor` is no longer passed as the third argument to event handlers. You can access it via `change.editor` instead.'\n        )\n      },\n    })\n\n    Object.defineProperty(next, 'props', {\n      get() {\n        invariant(\n          false,\n          'As of Slate 0.42, the `editor` is no longer passed as the third argument to event handlers. You can access it via `change.editor` instead.'\n        )\n      },\n    })\n\n    Object.defineProperty(next, 'schema', {\n      get() {\n        invariant(\n          false,\n          'As of Slate 0.42, the `editor` is no longer passed as the third argument to event handlers. You can access it via `change.editor` instead.'\n        )\n      },\n    })\n\n    Object.defineProperty(next, 'stack', {\n      get() {\n        invariant(\n          false,\n          'As of Slate 0.42, the `editor` is no longer passed as the third argument to event handlers. You can access it via `change.editor` instead.'\n        )\n      },\n    })\n\n    return next()\n  }\n\n  /**\n   * Set the `readOnly` flag.\n   *\n   * @param {Boolean} readOnly\n   * @return {Editor}\n   */\n\n  setReadOnly(readOnly) {\n    this.readOnly = readOnly\n    return this\n  }\n\n  /**\n   * Set the editor's `value`.\n   *\n   * @param {Value} value\n   * @param {Options} options\n   * @return {Editor}\n   */\n\n  setValue(value, options = {}) {\n    const { normalize = value !== this.value } = options\n    this.value = value\n\n    if (normalize) {\n      this.normalize()\n    }\n\n    return this\n  }\n\n  /**\n   * Apply a series of changes inside a synchronous `fn`, deferring\n   * normalization until after the function has finished executing.\n   *\n   * @param {Function} fn\n   * @return {Editor}\n   */\n\n  withoutNormalizing(fn) {\n    const { controller } = this\n    const value = this.tmp.normalize\n    this.tmp.normalize = false\n    fn(controller)\n    this.tmp.normalize = value\n    normalizeDirtyPaths(this)\n    return controller\n  }\n\n  /**\n   * Deprecated.\n   */\n\n  get editor() {\n    warning(\n      false,\n      \"As of Slate 0.43 the `change` object has been replaced with `editor`, so you don't need to access `change.editor`.\"\n    )\n\n    return this.controller\n  }\n\n  change(fn, ...args) {\n    warning(\n      false,\n      'As of Slate 0.43 the `change` object has been replaced with `editor`, so the `editor.change()` method is deprecated.`'\n    )\n\n    fn(this.controller, ...args)\n  }\n\n  call(fn, ...args) {\n    warning(\n      false,\n      'As of Slate 0.43 the `editor.call(fn)` method has been deprecated, please use `editor.command(fn)` instead.'\n    )\n\n    fn(this.controller, ...args)\n    return this.controller\n  }\n\n  applyOperations(operations) {\n    warning(\n      false,\n      'As of Slate 0.43 the `applyOperations` method is deprecated, please apply each operation in a loop instead.'\n    )\n\n    operations.forEach(op => this.applyOperation(op))\n    return this.controller\n  }\n\n  setOperationFlag(key, value) {\n    warning(\n      false,\n      'As of slate@0.41 the `change.setOperationFlag` method has been deprecated.'\n    )\n\n    this.tmp[key] = value\n    return this\n  }\n\n  getFlag(key, options = {}) {\n    warning(\n      false,\n      'As of slate@0.41 the `change.getFlag` method has been deprecated.'\n    )\n\n    return options[key] !== undefined ? options[key] : this.tmp[key]\n  }\n\n  unsetOperationFlag(key) {\n    warning(\n      false,\n      'As of slate@0.41 the `change.unsetOperationFlag` method has been deprecated.'\n    )\n\n    delete this.tmp[key]\n    return this\n  }\n\n  withoutNormalization(fn) {\n    warning(\n      false,\n      'As of slate@0.41 the `change.withoutNormalization` helper has been renamed to `change.withoutNormalizing`.'\n    )\n\n    return this.withoutNormalizing(fn)\n  }\n}\n\n/**\n * Get the \"dirty\" paths for a given `operation`.\n *\n * @param {Operation} operation\n * @return {Array}\n */\n\nfunction getDirtyPaths(operation) {\n  const { type, node, path, newPath } = operation\n\n  switch (type) {\n    case 'add_mark':\n    case 'insert_text':\n    case 'remove_mark':\n    case 'remove_text':\n    case 'set_mark':\n    case 'set_node': {\n      const ancestors = PathUtils.getAncestors(path).toArray()\n      return [...ancestors, path]\n    }\n\n    case 'insert_node': {\n      const table = node.getKeysToPathsTable()\n      const paths = Object.values(table).map(p => path.concat(p))\n      const ancestors = PathUtils.getAncestors(path).toArray()\n      return [...ancestors, path, ...paths]\n    }\n\n    case 'split_node': {\n      const ancestors = PathUtils.getAncestors(path).toArray()\n      const nextPath = PathUtils.increment(path)\n      return [...ancestors, path, nextPath]\n    }\n\n    case 'merge_node': {\n      const ancestors = PathUtils.getAncestors(path).toArray()\n      const previousPath = PathUtils.decrement(path)\n      return [...ancestors, previousPath]\n    }\n\n    case 'move_node': {\n      let parentPath = PathUtils.lift(path)\n      let newParentPath = PathUtils.lift(newPath)\n\n      if (PathUtils.isEqual(path, newPath)) {\n        return []\n      }\n\n      // HACK: this clause only exists because the `move_path` logic isn't\n      // consistent when it deals with siblings.\n      if (!PathUtils.isSibling(path, newPath)) {\n        if (newParentPath.size && PathUtils.isYounger(path, newPath)) {\n          newParentPath = PathUtils.decrement(newParentPath, 1, path.size - 1)\n        }\n\n        if (parentPath.size && PathUtils.isYounger(newPath, path)) {\n          parentPath = PathUtils.increment(parentPath, 1, newPath.size - 1)\n        }\n      }\n\n      const oldAncestors = PathUtils.getAncestors(parentPath).toArray()\n      const newAncestors = PathUtils.getAncestors(newParentPath).toArray()\n\n      return [...oldAncestors, parentPath, ...newAncestors, newParentPath]\n    }\n\n    case 'remove_node': {\n      const ancestors = PathUtils.getAncestors(path).toArray()\n      return [...ancestors]\n    }\n\n    default: {\n      return []\n    }\n  }\n}\n\n/**\n * Normalize any new \"dirty\" paths that have been added to the change.\n *\n * @param {Editor}\n */\n\nfunction normalizeDirtyPaths(editor) {\n  if (!editor.tmp.normalize) {\n    return\n  }\n\n  if (!editor.tmp.dirty.length) {\n    return\n  }\n\n  editor.withoutNormalizing(() => {\n    while (editor.tmp.dirty.length) {\n      const path = editor.tmp.dirty.pop()\n      normalizeNodeByPath(editor, path)\n    }\n  })\n}\n\n/**\n * Normalize the node at a specific `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n */\n\nfunction normalizeNodeByPath(editor, path) {\n  const { controller } = editor\n  let { value } = editor\n  let { document } = value\n  let node = document.assertNode(path)\n  let iterations = 0\n  const max = 100 + (node.object === 'text' ? 1 : node.nodes.size)\n\n  while (node) {\n    const fn = node.normalize(controller)\n\n    if (!fn) {\n      break\n    }\n\n    // Run the normalize `fn` to fix the node.\n    fn(controller)\n\n    // Attempt to re-find the node by path, or by key if it has changed\n    // locations in the tree continue iterating.\n    value = editor.value\n    document = value.document\n    const { key } = node\n    let found = document.getDescendant(path)\n\n    if (found && found.key === key) {\n      node = found\n    } else {\n      found = document.getDescendant(key)\n\n      if (found) {\n        node = found\n        path = document.getPath(key)\n      } else {\n        // If it no longer exists by key, it was removed, so we're done.\n        break\n      }\n    }\n\n    // Increment the iterations counter, and check to make sure that we haven't\n    // exceeded the max. Without this check, it's easy for the `normalize`\n    // function of a schema rule to be written incorrectly and for an infinite\n    // invalid loop to occur.\n    iterations++\n\n    if (iterations > max) {\n      throw new Error(\n        'A schema rule could not be normalized after sufficient iterations. This is usually due to a `rule.normalize` or `plugin.normalizeNode` function of a schema being incorrectly written, causing an infinite loop.'\n      )\n    }\n  }\n}\n\n/**\n * Register a `plugin` with the editor.\n *\n * @param {Editor} editor\n * @param {Object|Array} plugin\n */\n\nfunction registerPlugin(editor, plugin) {\n  if (Array.isArray(plugin)) {\n    plugin.forEach(p => registerPlugin(editor, p))\n    return\n  }\n\n  const { commands, queries, schema, ...rest } = plugin\n\n  if (commands) {\n    const commandsPlugin = CommandsPlugin(commands)\n    registerPlugin(editor, commandsPlugin)\n  }\n\n  if (queries) {\n    const queriesPlugin = QueriesPlugin(queries)\n    registerPlugin(editor, queriesPlugin)\n  }\n\n  if (schema) {\n    const schemaPlugin = SchemaPlugin(schema)\n    registerPlugin(editor, schemaPlugin)\n  }\n\n  for (const key in rest) {\n    const fn = rest[key]\n    const middleware = (editor.middleware[key] = editor.middleware[key] || [])\n    middleware.push(fn)\n  }\n}\n\n/**\n * Export.\n *\n * @type {Editor}\n */\n\nexport default Editor\n","/**\n * Mix in an `Interface` to a `Class`.\n *\n * @param {Class} Interface\n * @param {Class} Class\n */\n\nexport default function mixin(Interface, Classes) {\n  for (const Class of Classes) {\n    // Copy static properties from the interface.\n    for (const name of Object.getOwnPropertyNames(Interface)) {\n      if (Class.hasOwnProperty(name)) continue\n      const desc = Object.getOwnPropertyDescriptor(Interface, name)\n      Object.defineProperty(Class, name, desc)\n    }\n\n    // Copy instance properties from the interface.\n    for (const name of Object.getOwnPropertyNames(Interface.prototype)) {\n      if (Class.prototype.hasOwnProperty(name)) continue\n      const desc = Object.getOwnPropertyDescriptor(Interface.prototype, name)\n      Object.defineProperty(Class.prototype, name, desc)\n    }\n  }\n}\n","import Block from '../models/block'\nimport Change from '../models/change'\nimport Decoration from '../models/decoration'\nimport Document from '../models/document'\nimport Editor from '../controllers/editor'\nimport Inline from '../models/inline'\nimport Leaf from '../models/leaf'\nimport Mark from '../models/mark'\nimport Node from '../models/node'\nimport Operation from '../models/operation'\nimport Point from '../models/point'\nimport Range from '../models/range'\nimport Selection from '../models/selection'\nimport Text from '../models/text'\nimport Value from '../models/value'\nimport isObject, { TYPES } from '../utils/is-object'\nimport mixin from '../utils/mixin'\n\n/**\n * A factory for the interface that all Slate objects implement.\n *\n * @type {Function}\n */\n\nfunction create(type) {\n  const TYPE = TYPES[type]\n  const camel = `${type.charAt(0).toUpperCase()}${type.slice(1)}`\n  const is = `is${camel}`\n\n  class ObjectInterface {\n    /**\n     * Return the type of the object.\n     *\n     * @return {String}\n     */\n\n    get object() {\n      return type\n    }\n  }\n\n  ObjectInterface[is] = isObject.bind(null, type)\n  ObjectInterface.prototype[TYPE] = true\n  return ObjectInterface\n}\n\n/**\n * Mix in the object interfaces.\n */\n\nmixin(create('block'), [Block])\nmixin(create('change'), [Change])\nmixin(create('decoration'), [Decoration])\nmixin(create('document'), [Document])\nmixin(create('editor'), [Editor])\nmixin(create('inline'), [Inline])\nmixin(create('leaf'), [Leaf])\nmixin(create('mark'), [Mark])\nmixin(create('node'), [Node])\nmixin(create('operation'), [Operation])\nmixin(create('point'), [Point])\nmixin(create('range'), [Range])\nmixin(create('selection'), [Selection])\nmixin(create('text'), [Text])\nmixin(create('value'), [Value])\n","import mixin from '../utils/mixin'\nimport Block from '../models/block'\nimport Decoration from '../models/decoration'\nimport Document from '../models/document'\nimport Inline from '../models/inline'\nimport Leaf from '../models/leaf'\nimport Mark from '../models/mark'\nimport Node from '../models/node'\nimport Operation from '../models/operation'\nimport Point from '../models/point'\nimport Range from '../models/range'\nimport Selection from '../models/selection'\nimport Text from '../models/text'\nimport Value from '../models/value'\n\n/**\n * The interface that all Slate models implement.\n *\n * @type {Class}\n */\n\nclass ModelInterface {\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS(...args) {\n    return this.fromJSON(...args)\n  }\n\n  /**\n   * Alias `toJS`.\n   */\n\n  toJS(...args) {\n    return this.toJSON(...args)\n  }\n}\n\n/**\n * Mix in the common interface.\n *\n * @param {Record}\n */\n\nmixin(ModelInterface, [\n  Block,\n  Decoration,\n  Document,\n  Inline,\n  Leaf,\n  Mark,\n  Node,\n  Operation,\n  Point,\n  Range,\n  Selection,\n  Text,\n  Value,\n])\n","import warning from 'tiny-warning'\nimport { List } from 'immutable'\n\nimport mixin from '../utils/mixin'\nimport Block from '../models/block'\nimport Document from '../models/document'\nimport Inline from '../models/inline'\nimport KeyUtils from '../utils/key-utils'\nimport memoize from '../utils/memoize'\nimport PathUtils from '../utils/path-utils'\nimport Text from '../models/text'\n\n/**\n * The interface that `Document`, `Block` and `Inline` all implement, to make\n * working with the recursive node tree easier.\n *\n * @type {Class}\n */\n\nclass NodeInterface {\n  /**\n   * Get the concatenated text of the node.\n   *\n   * @return {String}\n   */\n\n  get text() {\n    return this.getText()\n  }\n\n  /**\n   * Get the first text node of a node, or the node itself.\n   *\n   * @return {Node|Null}\n   */\n\n  getFirstText() {\n    if (this.object === 'text') {\n      return this\n    }\n\n    let descendant = null\n\n    const found = this.nodes.find(node => {\n      if (node.object === 'text') return true\n      descendant = node.getFirstText()\n      return !!descendant\n    })\n\n    return descendant || found\n  }\n\n  /**\n   * Get an object mapping all the keys in the node to their paths.\n   *\n   * @return {Object}\n   */\n\n  getKeysToPathsTable() {\n    const ret = {\n      [this.key]: [],\n    }\n\n    if (this.nodes) {\n      this.nodes.forEach((node, i) => {\n        const nested = node.getKeysToPathsTable()\n\n        for (const key in nested) {\n          const path = nested[key]\n\n          warning(\n            !(key in ret),\n            `A node with a duplicate key of \"${key}\" was found! Duplicate keys are not allowed, you should use \\`node.regenerateKey\\` before inserting if you are reusing an existing node.`\n          )\n\n          ret[key] = [i, ...path]\n        }\n      })\n    }\n\n    return ret\n  }\n\n  /**\n   * Get the last text node of a node, or the node itself.\n   *\n   * @return {Node|Null}\n   */\n\n  getLastText() {\n    if (this.object === 'text') {\n      return this\n    }\n\n    let descendant = null\n\n    const found = this.nodes.findLast(node => {\n      if (node.object == 'text') return true\n      descendant = node.getLastText()\n      return descendant\n    })\n\n    return descendant || found\n  }\n\n  /**\n   * Get a node in the tree, or the node itself.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getNode(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (this.object === 'text' && path.size) return null\n    const node = path.size ? this.getDescendant(path) : this\n    return node\n  }\n\n  /**\n   * Find the path to a node.\n   *\n   * @param {String|List} key\n   * @return {List}\n   */\n\n  getPath(key) {\n    // Handle the case of passing in a path directly, to match other methods.\n    if (List.isList(key)) return key\n\n    const dict = this.getKeysToPathsTable()\n    const path = dict[key]\n    return path ? List(path) : null\n  }\n\n  /**\n   * Get the concatenated text string of a node.\n   *\n   * @return {String}\n   */\n\n  getText() {\n    const children = this.object === 'text' ? this.leaves : this.nodes\n    const text = children.reduce((memo, c) => memo + c.text, '')\n    return text\n  }\n\n  /**\n   * Check if a node exists.\n   *\n   * @param {List|String} path\n   * @return {Boolean}\n   */\n\n  hasNode(path) {\n    const node = this.getNode(path)\n    return !!node\n  }\n\n  /**\n   * Normalize the text node with an `editor`.\n   *\n   * @param {Editor} editor\n   * @return {Function|Void}\n   */\n\n  normalize(editor) {\n    const normalizer = editor.run('normalizeNode', this)\n    return normalizer\n  }\n\n  /**\n   * Regenerate the node's key.\n   *\n   * @return {Node}\n   */\n\n  regenerateKey() {\n    const key = KeyUtils.create()\n    const node = this.set('key', key)\n    return node\n  }\n\n  /**\n   * Resolve a path from a path list or key string.\n   *\n   * An `index` can be provided, in which case paths created from a key string\n   * will have the index pushed onto them. This is helpful in cases where you\n   * want to accept either a `path` or a `key, index` combination for targeting\n   * a location in the tree that doesn't exist yet, like when inserting.\n   *\n   * @param {List|String} value\n   * @param {Number} index\n   * @return {List}\n   */\n\n  resolvePath(path, index) {\n    if (typeof path === 'string') {\n      path = this.getPath(path)\n\n      if (index != null) {\n        path = path.concat(index)\n      }\n    } else {\n      path = PathUtils.create(path)\n    }\n\n    return path\n  }\n\n  /**\n   * Validate the node with an `editor`.\n   *\n   * @param {Editor} editor\n   * @return {Error|Void}\n   */\n\n  validate(editor) {\n    const error = editor.run('validateNode', this)\n    return error\n  }\n}\n\n/**\n * Memoize read methods.\n */\n\nmemoize(NodeInterface.prototype, [\n  'getFirstText',\n  'getKeysToPathsTable',\n  'getLastText',\n  'getText',\n  'normalize',\n  'validate',\n])\n\n/**\n * Mix in the node interface.\n */\n\nmixin(NodeInterface, [Block, Document, Inline, Text])\n","import direction from 'direction'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport { List, OrderedSet, Set, Stack } from 'immutable'\n\nimport mixin from '../utils/mixin'\nimport Block from '../models/block'\nimport Decoration from '../models/decoration'\nimport Document from '../models/document'\nimport Inline from '../models/inline'\nimport memoize from '../utils/memoize'\nimport PathUtils from '../utils/path-utils'\nimport Point from '../models/point'\nimport Range from '../models/range'\nimport Selection from '../models/selection'\nimport Value from '../models/value'\n\n/**\n * The interface that `Document`, `Block` and `Inline` all implement, to make\n * working with the recursive node tree easier.\n *\n * @type {Class}\n */\n\nclass ElementInterface {\n  /**\n   * Add mark to text at `offset` and `length` in node by `path`.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {Number} length\n   * @param {Mark} mark\n   * @return {Node}\n   */\n\n  addMark(path, offset, length, mark) {\n    let node = this.assertDescendant(path)\n    path = this.resolvePath(path)\n    node = node.addMark(offset, length, mark)\n    const ret = this.replaceNode(path, node)\n    return ret\n  }\n\n  /**\n   * Create a decoration with `properties` relative to the node.\n   *\n   * @param {Object|Decoration} properties\n   * @return {Decoration}\n   */\n\n  createDecoration(properties) {\n    properties = Decoration.createProperties(properties)\n    const decoration = this.resolveDecoration(properties)\n    return decoration\n  }\n\n  /**\n   * Create a point with `properties` relative to the node.\n   *\n   * @param {Object|Point} properties\n   * @return {Range}\n   */\n\n  createPoint(properties) {\n    properties = Point.createProperties(properties)\n    const point = this.resolvePoint(properties)\n    return point\n  }\n\n  /**\n   * Create a range with `properties` relative to the node.\n   *\n   * @param {Object|Range} properties\n   * @return {Range}\n   */\n\n  createRange(properties) {\n    properties = Range.createProperties(properties)\n    const range = this.resolveRange(properties)\n    return range\n  }\n\n  /**\n   * Create a selection with `properties` relative to the node.\n   *\n   * @param {Object|Selection} properties\n   * @return {Selection}\n   */\n\n  createSelection(properties) {\n    properties = Selection.createProperties(properties)\n    const selection = this.resolveSelection(properties)\n    return selection\n  }\n\n  /**\n   * Recursively filter all descendant nodes with `iterator`.\n   *\n   * @param {Function} iterator\n   * @return {List<Node>}\n   */\n\n  filterDescendants(iterator) {\n    const matches = []\n\n    this.forEachDescendant((node, i, nodes) => {\n      if (iterator(node, i, nodes)) matches.push(node)\n    })\n\n    return List(matches)\n  }\n\n  /**\n   * Recursively find all descendant nodes by `iterator`.\n   *\n   * @param {Function} iterator\n   * @return {Node|Null}\n   */\n\n  findDescendant(iterator) {\n    let found = null\n\n    this.forEachDescendant((node, i, nodes) => {\n      if (iterator(node, i, nodes)) {\n        found = node\n        return false\n      }\n    })\n\n    return found\n  }\n\n  /**\n   * Recursively iterate over all descendant nodes with `iterator`. If the\n   * iterator returns false it will break the loop.\n   *\n   * @param {Function} iterator\n   */\n\n  forEachDescendant(iterator) {\n    let ret\n\n    this.nodes.forEach((child, i, nodes) => {\n      if (iterator(child, i, nodes) === false) {\n        ret = false\n        return false\n      }\n\n      if (child.object != 'text') {\n        ret = child.forEachDescendant(iterator)\n        return ret\n      }\n    })\n\n    return ret\n  }\n\n  /**\n   * Get a set of the active marks in a `range`.\n   *\n   * @param {Range} range\n   * @return {Set<Mark>}\n   */\n\n  getActiveMarksAtRange(range) {\n    range = this.resolveRange(range)\n    if (range.isUnset) return Set()\n\n    if (range.isCollapsed) {\n      const { start } = range\n      return this.getMarksAtPosition(start.key, start.offset).toSet()\n    }\n\n    const { start, end } = range\n    let startKey = start.key\n    let startOffset = start.offset\n    let endKey = end.key\n    let endOffset = end.offset\n    let startText = this.getDescendant(startKey)\n\n    if (startKey !== endKey) {\n      while (startKey !== endKey && endOffset === 0) {\n        const endText = this.getPreviousText(endKey)\n        endKey = endText.key\n        endOffset = endText.text.length\n      }\n\n      while (startKey !== endKey && startOffset === startText.text.length) {\n        startText = this.getNextText(startKey)\n        startKey = startText.key\n        startOffset = 0\n      }\n    }\n\n    if (startKey === endKey) {\n      return startText.getActiveMarksBetweenOffsets(startOffset, endOffset)\n    }\n\n    const startMarks = startText.getActiveMarksBetweenOffsets(\n      startOffset,\n      startText.text.length\n    )\n    if (startMarks.size === 0) return Set()\n    const endText = this.getDescendant(endKey)\n    const endMarks = endText.getActiveMarksBetweenOffsets(0, endOffset)\n    let marks = startMarks.intersect(endMarks)\n    // If marks is already empty, the active marks is empty\n    if (marks.size === 0) return marks\n\n    let text = this.getNextText(startKey)\n\n    while (text.key !== endKey) {\n      if (text.text.length !== 0) {\n        marks = marks.intersect(text.getActiveMarks())\n        if (marks.size === 0) return Set()\n      }\n\n      text = this.getNextText(text.key)\n    }\n    return marks\n  }\n\n  /**\n   * Get a list of the ancestors of a descendant.\n   *\n   * @param {List|String} path\n   * @return {List<Node>|Null}\n   */\n\n  getAncestors(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n\n    const ancestors = []\n\n    path.forEach((p, i) => {\n      const current = path.slice(0, i)\n      const parent = this.getNode(current)\n      ancestors.push(parent)\n    })\n\n    return List(ancestors)\n  }\n\n  /**\n   * Get the leaf block descendants of the node.\n   *\n   * @return {List<Node>}\n   */\n\n  getBlocks() {\n    const array = this.getBlocksAsArray()\n    return List(array)\n  }\n\n  /**\n   * Get the leaf block descendants of the node.\n   *\n   * @return {List<Node>}\n   */\n\n  getBlocksAsArray() {\n    return this.nodes.reduce((array, child) => {\n      if (child.object != 'block') return array\n      if (!child.isLeafBlock()) return array.concat(child.getBlocksAsArray())\n      array.push(child)\n      return array\n    }, [])\n  }\n\n  /**\n   * Get the leaf block descendants in a `range`.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getBlocksAtRange(range) {\n    warning(\n      false,\n      'As of slate@0.44 the `node.getBlocksAtRange` method has been renamed to `getLeafBlocksAtRange`.'\n    )\n\n    return this.getLeafBlocksAtRange(range)\n  }\n\n  /**\n   * Get the bottom-most block descendants in a `range` as an array\n   *\n   * @param {Range} range\n   * @return {Array}\n   */\n\n  getBlocksAtRangeAsArray(range) {\n    warning(\n      false,\n      'As of slate@0.44 the `node.getBlocksAtRangeAsArray` method has been renamed to `getLeafBlocksAtRangeAsArray`.'\n    )\n\n    return this.getLeafBlocksAtRangeAsArray(range)\n  }\n\n  /**\n   * Get all of the leaf blocks that match a `type`.\n   *\n   * @param {String} type\n   * @return {List<Node>}\n   */\n\n  getBlocksByType(type) {\n    const array = this.getBlocksByTypeAsArray(type)\n    return List(array)\n  }\n\n  /**\n   * Get all of the leaf blocks that match a `type` as an array\n   *\n   * @param {String} type\n   * @return {Array}\n   */\n\n  getBlocksByTypeAsArray(type) {\n    return this.nodes.reduce((array, node) => {\n      if (node.object != 'block') {\n        return array\n      } else if (node.isLeafBlock() && node.type == type) {\n        array.push(node)\n        return array\n      } else {\n        return array.concat(node.getBlocksByTypeAsArray(type))\n      }\n    }, [])\n  }\n\n  /**\n   * Get a child node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getChild(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    const child = path.size === 1 ? this.nodes.get(path.first()) : null\n    return child\n  }\n\n  /**\n   * Get closest parent of node that matches an `iterator`.\n   *\n   * @param {List|String} path\n   * @param {Function} iterator\n   * @return {Node|Null}\n   */\n\n  getClosest(path, iterator) {\n    const ancestors = this.getAncestors(path)\n    if (!ancestors) return null\n\n    const closest = ancestors.findLast((node, ...args) => {\n      // We never want to include the top-level node.\n      if (node === this) return false\n      return iterator(node, ...args)\n    })\n\n    return closest || null\n  }\n\n  /**\n   * Get the closest block parent of a node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getClosestBlock(path) {\n    const closest = this.getClosest(path, n => n.object === 'block')\n    return closest\n  }\n\n  /**\n   * Get the closest inline parent of a node by `path`.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getClosestInline(path) {\n    const closest = this.getClosest(path, n => n.object === 'inline')\n    return closest\n  }\n\n  /**\n   * Get the closest void parent of a node by `path`.\n   *\n   * @param {List|String} path\n   * @param {Editor} editor\n   * @return {Node|Null}\n   */\n\n  getClosestVoid(path, editor) {\n    invariant(\n      !Value.isValue(editor),\n      'As of Slate 0.42.0, the `node.getClosestVoid` method takes an `editor` instead of a `value`.'\n    )\n\n    const ancestors = this.getAncestors(path)\n    if (!ancestors) return null\n\n    const ancestor = ancestors.findLast(a => editor.query('isVoid', a))\n    return ancestor\n  }\n\n  /**\n   * Get the common ancestor of nodes `a` and `b`.\n   *\n   * @param {List} a\n   * @param {List} b\n   * @return {Node}\n   */\n\n  getCommonAncestor(a, b) {\n    a = this.resolvePath(a)\n    b = this.resolvePath(b)\n    if (!a || !b) return null\n\n    const path = PathUtils.relate(a, b)\n    const node = this.getNode(path)\n    return node\n  }\n\n  /**\n   * Get the decorations for the node from an `editor`.\n   *\n   * @param {Editor} editor\n   * @return {List}\n   */\n\n  getDecorations(editor) {\n    invariant(\n      !Value.isValue(editor),\n      'As of Slate 0.42.0, the `node.getDecorations` method takes an `editor` instead of a `value`.'\n    )\n\n    const array = editor.run('decorateNode', this)\n    const decorations = Decoration.createList(array)\n    return decorations\n  }\n\n  /**\n   * Get the depth of a descendant, with optional `startAt`.\n   *\n   * @param {List|String} path\n   * @param {Number} startAt\n   * @return {Number|Null}\n   */\n\n  getDepth(path, startAt = 1) {\n    path = this.resolvePath(path)\n    if (!path) return null\n\n    const node = this.getNode(path)\n    const depth = node ? path.size - 1 + startAt : null\n    return depth\n  }\n\n  /**\n   * Get a descendant node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getDescendant(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n\n    const deep = path.flatMap(x => ['nodes', x])\n    const ret = this.getIn(deep)\n    return ret\n  }\n\n  /**\n   * Get a fragment of the node at a `range`.\n   *\n   * @param {Range} range\n   * @return {Document}\n   */\n\n  getFragmentAtRange(range) {\n    range = this.resolveRange(range)\n\n    if (range.isUnset) {\n      return Document.create()\n    }\n\n    const { start, end } = range\n    let node = this\n    let targetPath = end.path\n    let targetPosition = end.offset\n    let mode = 'end'\n\n    while (targetPath.size) {\n      const index = targetPath.last()\n      node = node.splitNode(targetPath, targetPosition)\n      targetPosition = index + 1\n      targetPath = PathUtils.lift(targetPath)\n\n      if (!targetPath.size && mode === 'end') {\n        targetPath = start.path\n        targetPosition = start.offset\n        mode = 'start'\n      }\n    }\n\n    const startIndex = start.path.first() + 1\n    const endIndex = end.path.first() + 2\n    const nodes = node.nodes.slice(startIndex, endIndex)\n    const fragment = Document.create({ nodes })\n    return fragment\n  }\n\n  /**\n   * Get the furthest parent of a node that matches an `iterator`.\n   *\n   * @param {Path} path\n   * @param {Function} iterator\n   * @return {Node|Null}\n   */\n\n  getFurthest(path, iterator) {\n    const ancestors = this.getAncestors(path)\n    if (!ancestors) return null\n\n    const furthest = ancestors.find((node, ...args) => {\n      // We never want to include the top-level node.\n      if (node === this) return false\n      return iterator(node, ...args)\n    })\n\n    return furthest || null\n  }\n\n  /**\n   * Get the furthest ancestor of a node.\n   *\n   * @param {Path} path\n   * @return {Node|Null}\n   */\n\n  getFurthestAncestor(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    const furthest = path.size ? this.nodes.get(path.first()) : null\n    return furthest\n  }\n\n  /**\n   * Get the furthest block parent of a node.\n   *\n   * @param {Path} path\n   * @return {Node|Null}\n   */\n\n  getFurthestBlock(path) {\n    const furthest = this.getFurthest(path, n => n.object === 'block')\n    return furthest\n  }\n\n  /**\n   * Get the furthest inline parent of a node.\n   *\n   * @param {Path} path\n   * @return {Node|Null}\n   */\n\n  getFurthestInline(path) {\n    const furthest = this.getFurthest(path, n => n.object === 'inline')\n    return furthest\n  }\n\n  /**\n   * Get the furthest ancestor of a node that has only one child.\n   *\n   * @param {Path} path\n   * @return {Node|Null}\n   */\n\n  getFurthestOnlyChildAncestor(path) {\n    const ancestors = this.getAncestors(path)\n    if (!ancestors) return null\n\n    const furthest = ancestors\n      .rest()\n      .reverse()\n      .takeUntil(p => p.nodes.size > 1)\n      .last()\n\n    return furthest || null\n  }\n\n  /**\n   * Get the closest inline nodes for each text node in the node.\n   *\n   * @return {List<Node>}\n   */\n\n  getInlines() {\n    const array = this.getInlinesAsArray()\n    const list = List(array)\n    return list\n  }\n\n  /**\n   * Get the closest inline nodes for each text node in the node, as an array.\n   *\n   * @return {List<Node>}\n   */\n\n  getInlinesAsArray() {\n    let array = []\n\n    this.nodes.forEach(child => {\n      if (child.object == 'text') return\n\n      if (child.isLeafInline()) {\n        array.push(child)\n      } else {\n        array = array.concat(child.getInlinesAsArray())\n      }\n    })\n\n    return array\n  }\n\n  /**\n   * Get the bottom-most inline nodes for each text node in a `range`.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getInlinesAtRange(range) {\n    warning(\n      false,\n      'As of slate@0.44 the `node.getInlinesAtRange` method has been renamed to `getLeafInlinesAtRange`.'\n    )\n\n    return this.getLeafInlinesAtRange(range)\n  }\n\n  /**\n   * Get the bottom-most inline nodes for each text node in a `range` as an array.\n   *\n   * @param {Range} range\n   * @return {Array}\n   */\n\n  getInlinesAtRangeAsArray(range) {\n    warning(\n      false,\n      'As of slate@0.44 the `node.getInlinesAtRangeAsArray` method has been renamed to `getLeafInlinesAtRangeAsArray`.'\n    )\n\n    return this.getLeafInlinesAtRangeAsArray(range)\n  }\n\n  /**\n   * Get all of the leaf inline nodes that match a `type`.\n   *\n   * @param {String} type\n   * @return {List<Node>}\n   */\n\n  getInlinesByType(type) {\n    const array = this.getInlinesByTypeAsArray(type)\n    const list = List(array)\n    return list\n  }\n\n  /**\n   * Get all of the leaf inline nodes that match a `type` as an array.\n   *\n   * @param {String} type\n   * @return {Array}\n   */\n\n  getInlinesByTypeAsArray(type) {\n    const array = this.nodes.reduce((inlines, node) => {\n      if (node.object == 'text') {\n        return inlines\n      } else if (node.isLeafInline() && node.type == type) {\n        inlines.push(node)\n        return inlines\n      } else {\n        return inlines.concat(node.getInlinesByTypeAsArray(type))\n      }\n    }, [])\n\n    return array\n  }\n\n  /**\n   * Get a set of the marks in a `range`.\n   *\n   * @param {Range} range\n   * @return {Set<Mark>}\n   */\n\n  getInsertMarksAtRange(range) {\n    range = this.resolveRange(range)\n    const { start } = range\n\n    if (range.isUnset) {\n      return Set()\n    }\n\n    if (range.isCollapsed) {\n      // PERF: range is not cachable, use key and offset as proxies for cache\n      return this.getMarksAtPosition(start.key, start.offset)\n    }\n\n    const text = this.getDescendant(start.key)\n    const marks = text.getMarksAtIndex(start.offset + 1)\n    return marks\n  }\n\n  /**\n   * Get the bottom-most block descendants in a `range`.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getLeafBlocksAtRange(range) {\n    const array = this.getLeafBlocksAtRangeAsArray(range)\n    // Eliminate duplicates by converting to an `OrderedSet` first.\n    return List(OrderedSet(array))\n  }\n\n  /**\n   * Get the bottom-most descendants in a `range` as an array\n   *\n   * @param {Range} range\n   * @return {Array}\n   */\n\n  getLeafBlocksAtRangeAsArray(range) {\n    range = this.resolveRange(range)\n    if (range.isUnset) return []\n\n    const { start, end } = range\n    const startBlock = this.getClosestBlock(start.key)\n\n    // PERF: the most common case is when the range is in a single block node,\n    // where we can avoid a lot of iterating of the tree.\n    if (start.key === end.key) return [startBlock]\n\n    const endBlock = this.getClosestBlock(end.key)\n    const blocks = this.getBlocksAsArray()\n    const startIndex = blocks.indexOf(startBlock)\n    const endIndex = blocks.indexOf(endBlock)\n    return blocks.slice(startIndex, endIndex + 1)\n  }\n\n  /**\n   * Get the bottom-most inline nodes for each text node in a `range`.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getLeafInlinesAtRange(range) {\n    const array = this.getLeafInlinesAtRangeAsArray(range)\n    // Remove duplicates by converting it to an `OrderedSet` first.\n    const list = List(OrderedSet(array))\n    return list\n  }\n\n  /**\n   * Get the bottom-most inline nodes for each text node in a `range` as an array.\n   *\n   * @param {Range} range\n   * @return {Array}\n   */\n\n  getLeafInlinesAtRangeAsArray(range) {\n    range = this.resolveRange(range)\n    if (range.isUnset) return []\n\n    const array = this.getTextsAtRangeAsArray(range)\n      .map(text => this.getClosestInline(text.key))\n      .filter(exists => exists)\n\n    return array\n  }\n\n  /**\n   * Get all of the marks for all of the characters of every text node.\n   *\n   * @return {Set<Mark>}\n   */\n\n  getMarks() {\n    const array = this.getMarksAsArray()\n    return Set(array)\n  }\n\n  /**\n   * Get all of the marks as an array.\n   *\n   * @return {Array}\n   */\n\n  getMarksAsArray() {\n    const result = []\n\n    this.nodes.forEach(node => {\n      result.push(node.getMarksAsArray())\n    })\n\n    // PERF: use only one concat rather than multiple for speed.\n    const array = [].concat(...result)\n    return array\n  }\n\n  /**\n   * Get a set of marks in a `position`, the equivalent of a collapsed range\n   *\n   * @param {string} key\n   * @param {number} offset\n   * @return {Set}\n   */\n\n  getMarksAtPosition(key, offset) {\n    const text = this.getDescendant(key)\n    const currentMarks = text.getMarksAtIndex(offset)\n    if (offset !== 0) return currentMarks\n    const closestBlock = this.getClosestBlock(key)\n\n    if (closestBlock.text === '') {\n      // insert mark for empty block; the empty block are often created by split node or add marks in a range including empty blocks\n      return currentMarks\n    }\n\n    const previous = this.getPreviousText(key)\n    if (!previous) return Set()\n\n    if (closestBlock.hasDescendant(previous.key)) {\n      return previous.getMarksAtIndex(previous.text.length)\n    }\n\n    return currentMarks\n  }\n\n  /**\n   * Get a set of the marks in a `range`.\n   *\n   * @param {Range} range\n   * @return {Set<Mark>}\n   */\n\n  getMarksAtRange(range) {\n    const marks = Set(this.getOrderedMarksAtRange(range))\n    return marks\n  }\n\n  /**\n   * Get all of the marks that match a `type`.\n   *\n   * @param {String} type\n   * @return {Set<Mark>}\n   */\n\n  getMarksByType(type) {\n    const array = this.getMarksByTypeAsArray(type)\n    return Set(array)\n  }\n\n  /**\n   * Get all of the marks that match a `type` as an array.\n   *\n   * @param {String} type\n   * @return {Array}\n   */\n\n  getMarksByTypeAsArray(type) {\n    const array = this.nodes.reduce((memo, node) => {\n      return node.object == 'text'\n        ? memo.concat(node.getMarksAsArray().filter(m => m.type == type))\n        : memo.concat(node.getMarksByTypeAsArray(type))\n    }, [])\n\n    return array\n  }\n\n  /**\n   * Get the block node before a descendant text node by `key`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getNextBlock(key) {\n    const child = this.assertDescendant(key)\n    let last\n\n    if (child.object == 'block') {\n      last = child.getLastText()\n    } else {\n      const block = this.getClosestBlock(key)\n      last = block.getLastText()\n    }\n\n    const next = this.getNextText(last.key)\n    if (!next) return null\n\n    const closest = this.getClosestBlock(next.key)\n    return closest\n  }\n\n  /**\n   * Get the next node in the tree from a node.\n   *\n   * This will not only check for siblings but instead move up the tree\n   * returning the next ancestor if no sibling is found.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getNextNode(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n\n    for (let i = path.size; i > 0; i--) {\n      const p = path.slice(0, i)\n      const target = PathUtils.increment(p)\n      const node = this.getNode(target)\n      if (node) return node\n    }\n\n    return null\n  }\n\n  /**\n   * Get the next sibling of a node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getNextSibling(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n    const p = PathUtils.increment(path)\n    const sibling = this.getNode(p)\n    return sibling\n  }\n\n  /**\n   * Get the text node after a descendant text node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getNextText(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n    const next = this.getNextNode(path)\n    if (!next) return null\n    const text = next.getFirstText()\n    return text\n  }\n\n  /**\n   * Get all of the nodes in a `range`. This includes all of the\n   * text nodes inside the range and all ancestors of those text\n   * nodes up to this node.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getNodesAtRange(range) {\n    range = this.resolveRange(range)\n    if (range.isUnset) return List()\n    const { start, end } = range\n\n    // Do a depth-first stack-based search for all nodes in the range\n    // Nodes that are pushed to the stack are inside the range\n\n    // Start with the nodes that are on the highest level in the tree\n    let stack = Stack(\n      this.nodes\n        .slice(start.path.get(0), end.path.get(0) + 1)\n        .map((node, index) => ({\n          node,\n          onStartEdge: index === 0,\n          onEndEdge: index === end.path.get(0) - start.path.get(0),\n          relativeStartPath: start.path.slice(1),\n          relativeEndPath: end.path.slice(1),\n        }))\n    )\n\n    const result = []\n\n    while (stack.size > 0) {\n      const {\n        node,\n        onStartEdge,\n        onEndEdge,\n        relativeStartPath,\n        relativeEndPath,\n      } = stack.peek()\n\n      stack = stack.shift()\n      result.push(node)\n\n      if (node.object === 'text') continue\n\n      // Modify indexes to exclude children that are outside of the range\n      const startIndex = onStartEdge ? relativeStartPath.get(0) : 0\n      const endIndex = onEndEdge ? relativeEndPath.get(0) : node.nodes.size - 1\n\n      // Push children that are inside the range to the stack\n      stack = stack.pushAll(\n        node.nodes.slice(startIndex, endIndex + 1).map((n, i) => ({\n          node: n,\n          onStartEdge: onStartEdge && i === 0,\n          onEndEdge: onEndEdge && i === endIndex - startIndex,\n          relativeStartPath:\n            onStartEdge && i === 0 ? relativeStartPath.slice(1) : null,\n          relativeEndPath:\n            onEndEdge && i === endIndex - startIndex\n              ? relativeEndPath.slice(1)\n              : null,\n        }))\n      )\n    }\n\n    return List(result)\n  }\n\n  /**\n   * Get the offset for a descendant text node by `key`.\n   *\n   * @param {String} key\n   * @return {Number}\n   */\n\n  getOffset(key) {\n    this.assertDescendant(key)\n\n    // Calculate the offset of the nodes before the highest child.\n    const child = this.getFurthestAncestor(key)\n    const offset = this.nodes\n      .takeUntil(n => n == child)\n      .reduce((memo, n) => memo + n.text.length, 0)\n\n    // Recurse if need be.\n    const ret = this.hasChild(key) ? offset : offset + child.getOffset(key)\n    return ret\n  }\n\n  /**\n   * Get the offset from a `range`.\n   *\n   * @param {Range} range\n   * @return {Number}\n   */\n\n  getOffsetAtRange(range) {\n    range = this.resolveRange(range)\n\n    if (range.isUnset) {\n      throw new Error('The range cannot be unset to calculcate its offset.')\n    }\n\n    if (range.isExpanded) {\n      throw new Error('The range must be collapsed to calculcate its offset.')\n    }\n\n    const { start } = range\n    const offset = this.getOffset(start.key) + start.offset\n    return offset\n  }\n\n  /**\n   * Get all of the marks for all of the characters of every text node.\n   *\n   * @return {OrderedSet<Mark>}\n   */\n\n  getOrderedMarks() {\n    const array = this.getMarksAsArray()\n    return OrderedSet(array)\n  }\n\n  /**\n   * Get a set of the marks in a `range`.\n   *\n   * @param {Range} range\n   * @return {OrderedSet<Mark>}\n   */\n\n  getOrderedMarksAtRange(range) {\n    range = this.resolveRange(range)\n    const { start, end } = range\n\n    if (range.isUnset) {\n      return OrderedSet()\n    }\n\n    if (range.isCollapsed) {\n      // PERF: range is not cachable, use key and offset as proxies for cache\n      return this.getMarksAtPosition(start.key, start.offset)\n    }\n\n    const marks = this.getOrderedMarksBetweenPositions(\n      start.key,\n      start.offset,\n      end.key,\n      end.offset\n    )\n\n    return marks\n  }\n\n  /**\n   * Get a set of the marks in a `range`.\n   * PERF: arguments use key and offset for utilizing cache\n   *\n   * @param {string} startKey\n   * @param {number} startOffset\n   * @param {string} endKey\n   * @param {number} endOffset\n   * @returns {OrderedSet<Mark>}\n   */\n\n  getOrderedMarksBetweenPositions(startKey, startOffset, endKey, endOffset) {\n    if (startKey === endKey) {\n      const startText = this.getDescendant(startKey)\n      return startText.getMarksBetweenOffsets(startOffset, endOffset)\n    }\n\n    const texts = this.getTextsBetweenPositionsAsArray(startKey, endKey)\n\n    return OrderedSet().withMutations(result => {\n      texts.forEach(text => {\n        if (text.key === startKey) {\n          result.union(\n            text.getMarksBetweenOffsets(startOffset, text.text.length)\n          )\n        } else if (text.key === endKey) {\n          result.union(text.getMarksBetweenOffsets(0, endOffset))\n        } else {\n          result.union(text.getMarks())\n        }\n      })\n    })\n  }\n\n  /**\n   * Get all of the marks that match a `type`.\n   *\n   * @param {String} type\n   * @return {OrderedSet<Mark>}\n   */\n\n  getOrderedMarksByType(type) {\n    const array = this.getMarksByTypeAsArray(type)\n    return OrderedSet(array)\n  }\n\n  /**\n   * Get the parent of a descendant node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getParent(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n    const parentPath = PathUtils.lift(path)\n    const parent = this.getNode(parentPath)\n    return parent\n  }\n\n  /**\n   * Get the block node before a descendant text node by `key`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getPreviousBlock(key) {\n    const child = this.assertDescendant(key)\n    let first\n\n    if (child.object == 'block') {\n      first = child.getFirstText()\n    } else {\n      const block = this.getClosestBlock(key)\n      first = block.getFirstText()\n    }\n\n    const previous = this.getPreviousText(first.key)\n    if (!previous) return null\n\n    const closest = this.getClosestBlock(previous.key)\n    return closest\n  }\n\n  /**\n   * Get the highest block descendants in a `range`.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getRootBlocksAtRange(range) {\n    range = this.resolveRange(range)\n    if (range.isUnset) return List()\n\n    const { start, end } = range\n    const startBlock = this.getFurthestBlock(start.key)\n\n    // PERF: the most common case is when the range is in a single block node,\n    // where we can avoid a lot of iterating of the tree.\n    if (start.key === end.key) return List([startBlock])\n\n    const endBlock = this.getFurthestBlock(end.key)\n    const startIndex = this.nodes.indexOf(startBlock)\n    const endIndex = this.nodes.indexOf(endBlock)\n    return this.nodes.slice(startIndex, endIndex + 1)\n  }\n\n  /**\n   * Get the top-most inline nodes for each text node in a `range`.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getRootInlinesAtRange(range) {\n    const array = this.getRootInlinesAtRangeAsArray(range)\n    // Remove duplicates by converting it to an `OrderedSet` first.\n    const list = List(OrderedSet(array))\n    return list\n  }\n\n  /**\n   * Get the top-most inline nodes for each text node in a `range` as an array.\n   *\n   * @param {Range} range\n   * @return {Array}\n   */\n\n  getRootInlinesAtRangeAsArray(range) {\n    range = this.resolveRange(range)\n    if (range.isUnset) return List()\n\n    const array = this.getTextsAtRangeAsArray(range)\n      .map(text => this.getFurthestInline(text.key))\n      .filter(exists => exists)\n\n    return array\n  }\n\n  /**\n   * Get the previous node from a node in the tree.\n   *\n   * This will not only check for siblings but instead move up the tree\n   * returning the previous ancestor if no sibling is found.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getPreviousNode(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n\n    for (let i = path.size; i > 0; i--) {\n      const p = path.slice(0, i)\n      if (p.last() === 0) continue\n\n      const target = PathUtils.decrement(p)\n      const node = this.getNode(target)\n      if (node) return node\n    }\n\n    return null\n  }\n\n  /**\n   * Get the previous sibling of a node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getPreviousSibling(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n    if (path.last() === 0) return null\n    const p = PathUtils.decrement(path)\n    const sibling = this.getNode(p)\n    return sibling\n  }\n\n  /**\n   * Get the text node after a descendant text node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getPreviousText(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n    const previous = this.getPreviousNode(path)\n    if (!previous) return null\n    const text = previous.getLastText()\n    return text\n  }\n\n  /**\n   * Get the indexes of the selection for a `range`, given an extra flag for\n   * whether the node `isSelected`, to determine whether not finding matches\n   * means everything is selected or nothing is.\n   *\n   * @param {Range} range\n   * @param {Boolean} isSelected\n   * @return {Object|Null}\n   */\n\n  getSelectionIndexes(range, isSelected = true) {\n    const { start, end } = range\n\n    // PERF: if we're not selected, we can exit early.\n    if (!isSelected) {\n      return null\n    }\n\n    // if we've been given an invalid selection we can exit early.\n    if (range.isUnset) {\n      return null\n    }\n\n    // PERF: if the start and end keys are the same, just check for the child\n    // that contains that single key.\n    if (start.key == end.key) {\n      const child = this.getFurthestAncestor(start.key)\n      const index = child ? this.nodes.indexOf(child) : null\n      return { start: index, end: index + 1 }\n    }\n\n    // Otherwise, check all of the children...\n    let startIndex = null\n    let endIndex = null\n\n    this.nodes.forEach((child, i) => {\n      if (child.object == 'text') {\n        if (startIndex == null && child.key == start.key) startIndex = i\n        if (endIndex == null && child.key == end.key) endIndex = i + 1\n      } else {\n        if (startIndex == null && child.hasDescendant(start.key)) startIndex = i\n        if (endIndex == null && child.hasDescendant(end.key)) endIndex = i + 1\n      }\n\n      // PERF: exit early if both start and end have been found.\n      return startIndex == null || endIndex == null\n    })\n\n    if (isSelected && startIndex == null) startIndex = 0\n    if (isSelected && endIndex == null) endIndex = this.nodes.size\n    return startIndex == null ? null : { start: startIndex, end: endIndex }\n  }\n\n  /**\n   * Get the descendent text node at an `offset`.\n   *\n   * @param {String} offset\n   * @return {Node|Null}\n   */\n\n  getTextAtOffset(offset) {\n    // PERF: Add a few shortcuts for the obvious cases.\n    if (offset === 0) return this.getFirstText()\n    if (offset === this.text.length) return this.getLastText()\n    if (offset < 0 || offset > this.text.length) return null\n\n    let length = 0\n    const text = this.getTexts().find((node, i, nodes) => {\n      length += node.text.length\n      return length > offset\n    })\n\n    return text\n  }\n\n  /**\n   * Get the direction of the node's text.\n   *\n   * @return {String}\n   */\n\n  getTextDirection() {\n    const dir = direction(this.text)\n    return dir === 'neutral' ? null : dir\n  }\n\n  /**\n   * Recursively get all of the child text nodes in order of appearance.\n   *\n   * @return {List<Node>}\n   */\n\n  getTexts() {\n    const array = this.getTextsAsArray()\n    return List(array)\n  }\n\n  /**\n   * Recursively get all the leaf text nodes in order of appearance, as array.\n   *\n   * @return {List<Node>}\n   */\n\n  getTextsAsArray() {\n    let array = []\n\n    this.nodes.forEach(node => {\n      if (node.object == 'text') {\n        array.push(node)\n      } else {\n        array = array.concat(node.getTextsAsArray())\n      }\n    })\n\n    return array\n  }\n\n  /**\n   * Get all of the text nodes in a `range`.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getTextsAtRange(range) {\n    range = this.resolveRange(range)\n    if (range.isUnset) return List()\n    const { start, end } = range\n    const list = List(this.getTextsBetweenPositionsAsArray(start.key, end.key))\n\n    return list\n  }\n\n  /**\n   * Get all of the text nodes in a `range` as an array.\n   *\n   * @param {Range} range\n   * @return {Array}\n   */\n\n  getTextsAtRangeAsArray(range) {\n    range = this.resolveRange(range)\n    if (range.isUnset) return []\n    const { start, end } = range\n    const texts = this.getTextsBetweenPositionsAsArray(start.key, end.key)\n    return texts\n  }\n\n  /**\n   * Get all of the text nodes in a `range` as an array.\n   * PERF: use key in arguments for cache\n   *\n   * @param {string} startKey\n   * @param {string} endKey\n   * @returns {Array}\n   */\n\n  getTextsBetweenPositionsAsArray(startKey, endKey) {\n    const startText = this.getDescendant(startKey)\n\n    // PERF: the most common case is when the range is in a single text node,\n    // where we can avoid a lot of iterating of the tree.\n    if (startKey == endKey) return [startText]\n\n    const endText = this.getDescendant(endKey)\n    const texts = this.getTextsAsArray()\n    const start = texts.indexOf(startText)\n    const end = texts.indexOf(endText, start)\n    const ret = texts.slice(start, end + 1)\n    return ret\n  }\n\n  /**\n   * Check if the node has block children.\n   *\n   * @return {Boolean}\n   */\n\n  hasBlockChildren() {\n    return !!(this.nodes && this.nodes.find(n => n.object === 'block'))\n  }\n\n  /**\n   * Check if a child node exists.\n   *\n   * @param {List|String} path\n   * @return {Boolean}\n   */\n\n  hasChild(path) {\n    const child = this.getChild(path)\n    return !!child\n  }\n\n  /**\n   * Check if a node has inline children.\n   *\n   * @return {Boolean}\n   */\n\n  hasInlineChildren() {\n    return !!(\n      this.nodes &&\n      this.nodes.find(n => n.object === 'inline' || n.object === 'text')\n    )\n  }\n\n  /**\n   * Recursively check if a child node exists.\n   *\n   * @param {List|String} path\n   * @return {Boolean}\n   */\n\n  hasDescendant(path) {\n    const descendant = this.getDescendant(path)\n    return !!descendant\n  }\n\n  /**\n   * Check if a node has a void parent.\n   *\n   * @param {List|String} path\n   * @param {Editor} editor\n   * @return {Boolean}\n   */\n\n  hasVoidParent(path, editor) {\n    invariant(\n      !Value.isValue(editor),\n      'As of Slate 0.42.0, the `node.hasVoidParent` method takes an `editor` instead of a `value`.'\n    )\n\n    const closest = this.getClosestVoid(path, editor)\n    return !!closest\n  }\n\n  /**\n   * Insert a `node`.\n   *\n   * @param {List|String} path\n   * @param {Node} node\n   * @return {Node}\n   */\n\n  insertNode(path, node) {\n    path = this.resolvePath(path)\n    const index = path.last()\n    const parentPath = PathUtils.lift(path)\n    let parent = this.assertNode(parentPath)\n    const nodes = parent.nodes.splice(index, 0, node)\n    parent = parent.set('nodes', nodes)\n    const ret = this.replaceNode(parentPath, parent)\n    return ret\n  }\n\n  /**\n   * Insert `text` at `offset` in node by `path`.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {String} text\n   * @param {Set} marks\n   * @return {Node}\n   */\n\n  insertText(path, offset, text, marks) {\n    let node = this.assertDescendant(path)\n    path = this.resolvePath(path)\n    node = node.insertText(offset, text, marks)\n    const ret = this.replaceNode(path, node)\n    return ret\n  }\n\n  /**\n   * Check whether the node is a leaf block.\n   *\n   * @return {Boolean}\n   */\n\n  isLeafBlock() {\n    const { object, nodes } = this\n    if (!nodes.size) return true\n    const first = nodes.first()\n    return object === 'block' && first.object !== 'block'\n  }\n\n  /**\n   * Check whether the node is a leaf inline.\n   *\n   * @return {Boolean}\n   */\n\n  isLeafInline() {\n    const { object, nodes } = this\n    if (!nodes.size) return true\n    const first = nodes.first()\n    return object === 'inline' && first.object !== 'inline'\n  }\n\n  /**\n   * Check whether a descendant node is inside a range. This will return true for all\n   * text nodes inside the range and all ancestors of those text nodes up to this node.\n   *\n   * @param {List|Key} path\n   * @param {Range} range\n   * @return {Node}\n   */\n\n  isNodeInRange(path, range) {\n    this.assertDescendant(path)\n    path = this.resolvePath(path)\n    range = this.resolveRange(range)\n    if (range.isUnset) return false\n\n    const toStart = PathUtils.compare(path, range.start.path)\n    const toEnd =\n      range.start.key === range.end.key\n        ? toStart\n        : PathUtils.compare(path, range.end.path)\n\n    const is = toStart !== -1 && toEnd !== 1\n    return is\n  }\n\n  /**\n   * Map all child nodes, updating them in their parents. This method is\n   * optimized to not return a new node if no changes are made.\n   *\n   * @param {Function} iterator\n   * @return {Node}\n   */\n\n  mapChildren(iterator) {\n    let { nodes } = this\n\n    nodes.forEach((node, i) => {\n      const ret = iterator(node, i, this.nodes)\n      if (ret !== node) nodes = nodes.set(ret.key, ret)\n    })\n\n    const ret = this.set('nodes', nodes)\n    return ret\n  }\n\n  /**\n   * Map all descendant nodes, updating them in their parents. This method is\n   * optimized to not return a new node if no changes are made.\n   *\n   * @param {Function} iterator\n   * @return {Node}\n   */\n\n  mapDescendants(iterator) {\n    let { nodes } = this\n\n    nodes.forEach((node, index) => {\n      let ret = node\n      if (ret.object !== 'text') ret = ret.mapDescendants(iterator)\n      ret = iterator(ret, index, this.nodes)\n      if (ret === node) return\n\n      nodes = nodes.set(index, ret)\n    })\n\n    const ret = this.set('nodes', nodes)\n    return ret\n  }\n\n  /**\n   * Merge a node backwards its previous sibling.\n   *\n   * @param {List|Key} path\n   * @return {Node}\n   */\n\n  mergeNode(path) {\n    const b = this.assertNode(path)\n    path = this.resolvePath(path)\n\n    if (path.last() === 0) {\n      throw new Error(\n        `Unable to merge node because it has no previous sibling: ${b}`\n      )\n    }\n\n    const withPath = PathUtils.decrement(path)\n    const a = this.assertNode(withPath)\n\n    if (a.object !== b.object) {\n      throw new Error(\n        `Unable to merge two different kinds of nodes: ${a} and ${b}`\n      )\n    }\n\n    const newNode =\n      a.object === 'text'\n        ? a.mergeText(b)\n        : a.set('nodes', a.nodes.concat(b.nodes))\n\n    let ret = this\n    ret = ret.removeNode(path)\n    ret = ret.removeNode(withPath)\n    ret = ret.insertNode(withPath, newNode)\n    return ret\n  }\n\n  /**\n   * Move a node by `path` to `newPath`.\n   *\n   * A `newIndex` can be provided when move nodes by `key`, to account for not\n   * being able to have a key for a location in the tree that doesn't exist yet.\n   *\n   * @param {List|Key} path\n   * @param {List|Key} newPath\n   * @param {Number} newIndex\n   * @return {Node}\n   */\n\n  moveNode(path, newPath, newIndex = 0) {\n    const node = this.assertNode(path)\n    path = this.resolvePath(path)\n    newPath = this.resolvePath(newPath, newIndex)\n\n    const newParentPath = PathUtils.lift(newPath)\n    this.assertNode(newParentPath)\n\n    const [p, np] = PathUtils.crop(path, newPath)\n    const position = PathUtils.compare(p, np)\n\n    // If the old path ends above and before a node in the new path, then\n    // removing it will alter the target, so we need to adjust the new path.\n    if (path.size < newPath.size && position === -1) {\n      newPath = PathUtils.decrement(newPath, 1, p.size - 1)\n    }\n\n    let ret = this\n    ret = ret.removeNode(path)\n    ret = ret.insertNode(newPath, node)\n    return ret\n  }\n\n  /**\n   * Remove mark from text at `offset` and `length` in node.\n   *\n   * @param {List} path\n   * @param {Number} offset\n   * @param {Number} length\n   * @param {Mark} mark\n   * @return {Node}\n   */\n\n  removeMark(path, offset, length, mark) {\n    let node = this.assertDescendant(path)\n    path = this.resolvePath(path)\n    node = node.removeMark(offset, length, mark)\n    const ret = this.replaceNode(path, node)\n    return ret\n  }\n\n  /**\n   * Remove a node.\n   *\n   * @param {List|String} path\n   * @return {Node}\n   */\n\n  removeNode(path) {\n    this.assertDescendant(path)\n    path = this.resolvePath(path)\n    const deep = path.flatMap(x => ['nodes', x])\n    const ret = this.deleteIn(deep)\n    return ret\n  }\n\n  /**\n   * Remove `text` at `offset` in node.\n   *\n   * @param {List|Key} path\n   * @param {Number} offset\n   * @param {String} text\n   * @return {Node}\n   */\n\n  removeText(path, offset, text) {\n    let node = this.assertDescendant(path)\n    node = node.removeText(offset, text.length)\n    const ret = this.replaceNode(path, node)\n    return ret\n  }\n\n  /**\n   * Replace a `node` in the tree.\n   *\n   * @param {List|Key} path\n   * @param {Node} node\n   * @return {Node}\n   */\n\n  replaceNode(path, node) {\n    path = this.resolvePath(path)\n\n    if (!path) {\n      throw new Error(\n        `Unable to replace a node because it could not be found in the first place: ${path}`\n      )\n    }\n\n    if (!path.size) return node\n    this.assertNode(path)\n    const deep = path.flatMap(x => ['nodes', x])\n    const ret = this.setIn(deep, node)\n    return ret\n  }\n\n  /**\n   * Resolve a `decoration`, relative to the node, ensuring that the keys and\n   * offsets in the decoration exist and that they are synced with the paths.\n   *\n   * @param {Decoration|Object} decoration\n   * @return {Decoration}\n   */\n\n  resolveDecoration(decoration) {\n    decoration = Decoration.create(decoration)\n    decoration = decoration.normalize(this)\n    return decoration\n  }\n\n  /**\n   * Resolve a `point`, relative to the node, ensuring that the keys and\n   * offsets in the point exist and that they are synced with the paths.\n   *\n   * @param {Point|Object} point\n   * @return {Point}\n   */\n\n  resolvePoint(point) {\n    point = Point.create(point)\n    point = point.normalize(this)\n    return point\n  }\n\n  /**\n   * Resolve a `range`, relative to the node, ensuring that the keys and\n   * offsets in the range exist and that they are synced with the paths.\n   *\n   * @param {Range|Object} range\n   * @return {Range}\n   */\n\n  resolveRange(range) {\n    range = Range.create(range)\n    range = range.normalize(this)\n    return range\n  }\n\n  /**\n   * Resolve a `selection`, relative to the node, ensuring that the keys and\n   * offsets in the selection exist and that they are synced with the paths.\n   *\n   * @param {Selection|Object} selection\n   * @return {Selection}\n   */\n\n  resolveSelection(selection) {\n    selection = Selection.create(selection)\n    selection = selection.normalize(this)\n    return selection\n  }\n\n  /**\n   * Set `properties` on a node.\n   *\n   * @param {List|String} path\n   * @param {Object} properties\n   * @return {Node}\n   */\n\n  setNode(path, properties) {\n    let node = this.assertNode(path)\n    node = node.merge(properties)\n    const ret = this.replaceNode(path, node)\n    return ret\n  }\n\n  /**\n   * Set `properties` on `mark` on text at `offset` and `length` in node.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {Number} length\n   * @param {Mark} mark\n   * @param {Object} properties\n   * @return {Node}\n   */\n\n  setMark(path, offset, length, mark, properties) {\n    let node = this.assertNode(path)\n    node = node.updateMark(offset, length, mark, properties)\n    const ret = this.replaceNode(path, node)\n    return ret\n  }\n\n  /**\n   * Split a node by `path` at `position` with optional `properties` to apply\n   * to the newly split node.\n   *\n   * @param {List|String} path\n   * @param {Number} position\n   * @param {Object} properties\n   * @return {Node}\n   */\n\n  splitNode(path, position, properties) {\n    const child = this.assertNode(path)\n    path = this.resolvePath(path)\n    let a\n    let b\n\n    if (child.object === 'text') {\n      ;[a, b] = child.splitText(position)\n    } else {\n      const befores = child.nodes.take(position)\n      const afters = child.nodes.skip(position)\n      a = child.set('nodes', befores)\n      b = child.set('nodes', afters).regenerateKey()\n    }\n\n    if (properties && child.object !== 'text') {\n      b = b.merge(properties)\n    }\n\n    let ret = this\n    ret = ret.removeNode(path)\n    ret = ret.insertNode(path, b)\n    ret = ret.insertNode(path, a)\n    return ret\n  }\n}\n\n/**\n * Mix in assertion variants.\n */\n\nconst ASSERTS = ['Child', 'Depth', 'Descendant', 'Node', 'Parent', 'Path']\n\nfor (const method of ASSERTS) {\n  ElementInterface.prototype[`assert${method}`] = function(path, ...args) {\n    const ret = this[`get${method}`](path, ...args)\n\n    if (ret == null) {\n      throw new Error(\n        `\\`Node.assert${method}\\` could not find node with path or key: ${path}`\n      )\n    }\n\n    return ret\n  }\n}\n\n/**\n * Memoize read methods.\n */\n\nmemoize(ElementInterface.prototype, [\n  'getBlocksAsArray',\n  'getBlocksAtRangeAsArray',\n  'getBlocksByTypeAsArray',\n  'getDecorations',\n  'getFragmentAtRange',\n  'getInlinesAsArray',\n  'getInlinesByTypeAsArray',\n  'getLeafBlocksAtRangeAsArray',\n  'getLeafInlinesAtRangeAsArray',\n  'getMarksAsArray',\n  'getMarksAtPosition',\n  'getNodesAtRange',\n  'getOrderedMarksBetweenPositions',\n  'getInsertMarksAtRange',\n  'getMarksByTypeAsArray',\n  'getNextBlock',\n  'getOffset',\n  'getOffsetAtRange',\n  'getPreviousBlock',\n  'getRootBlocksAtRange',\n  'getRootInlinesAtRangeAsArray',\n  'getTextAtOffset',\n  'getTextDirection',\n  'getTextsAsArray',\n  'getTextsBetweenPositionsAsArray',\n])\n\n/**\n * Mix in the element interface.\n */\n\nmixin(ElementInterface, [Block, Document, Inline])\n","import mixin from '../utils/mixin'\nimport Decoration from '../models/decoration'\nimport PathUtils from '../utils/path-utils'\nimport Point from '../models/point'\nimport Range from '../models/range'\nimport Selection from '../models/selection'\n\n/**\n * The interface that `Decoration`, `Range` and `Selection` all implement, to make\n * working anchor and focus points easier.\n *\n * @type {Class}\n */\n\nclass RangeInterface {\n  /**\n   * Check whether the range is collapsed.\n   *\n   * @return {Boolean}\n   */\n\n  get isCollapsed() {\n    return (\n      this.anchor === this.focus ||\n      (this.anchor.key === this.focus.key &&\n        this.anchor.offset === this.focus.offset)\n    )\n  }\n\n  /**\n   * Check whether the range is expanded.\n   *\n   * @return {Boolean}\n   */\n\n  get isExpanded() {\n    return !this.isCollapsed\n  }\n\n  /**\n   * Check whether the range is backward.\n   *\n   * @return {Boolean}\n   */\n\n  get isBackward() {\n    const { isUnset, anchor, focus } = this\n\n    if (isUnset) {\n      return null\n    }\n\n    if (anchor.key === focus.key) {\n      return anchor.offset > focus.offset\n    }\n\n    const isBackward = PathUtils.isBefore(focus.path, anchor.path)\n    return isBackward\n  }\n\n  /**\n   * Check whether the range is forward.\n   *\n   * @return {Boolean}\n   */\n\n  get isForward() {\n    const { isBackward } = this\n    const isForward = isBackward == null ? null : !isBackward\n    return isForward\n  }\n\n  /**\n   * Check whether the range isn't set.\n   *\n   * @return {Boolean}\n   */\n\n  get isUnset() {\n    const { anchor, focus } = this\n    const isUnset = anchor.isUnset || focus.isUnset\n    return isUnset\n  }\n\n  /**\n   * Check whether the range is set.\n   *\n   * @return {Boolean}\n   */\n\n  get isSet() {\n    return !this.isUnset\n  }\n\n  /**\n   * Get the start point.\n   *\n   * @return {String}\n   */\n\n  get start() {\n    return this.isBackward ? this.focus : this.anchor\n  }\n\n  /**\n   * Get the end point.\n   *\n   * @return {String}\n   */\n\n  get end() {\n    return this.isBackward ? this.anchor : this.focus\n  }\n\n  /**\n   * Flip the range.\n   *\n   * @return {Range}\n   */\n\n  flip() {\n    const range = this.setPoints([this.focus, this.anchor])\n    return range\n  }\n\n  /**\n   * Move the anchor and focus offsets forward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveForward(n) {\n    return this.updatePoints(point => point.moveForward(n))\n  }\n\n  /**\n   * Move the anchor and focus offsets backward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveBackward(n) {\n    return this.updatePoints(point => point.moveBackward(n))\n  }\n\n  /**\n   * Move the anchor offset backward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveAnchorBackward(n) {\n    const range = this.setAnchor(this.anchor.moveBackward(n))\n    return range\n  }\n\n  /**\n   * Move the anchor offset forward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveAnchorForward(n) {\n    const range = this.setAnchor(this.anchor.moveForward(n))\n    return range\n  }\n\n  /**\n   * Move the range's anchor point to a new `path` and `offset`.\n   *\n   * Optionally, the `path` can be a key string, or omitted entirely in which\n   * case it would be the offset number.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @return {Range}\n   */\n\n  moveAnchorTo(path, offset) {\n    const range = this.setAnchor(this.anchor.moveTo(path, offset))\n    return range\n  }\n\n  /**\n   * Move the range's anchor point to the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveAnchorToStartOfNode(node) {\n    const range = this.setAnchor(this.anchor.moveToStartOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the range's anchor point to the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveAnchorToEndOfNode(node) {\n    const range = this.setAnchor(this.anchor.moveToEndOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the end offset backward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveEndBackward(n) {\n    const range = this.setEnd(this.end.moveBackward(n))\n    return range\n  }\n\n  /**\n   * Move the end offset forward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveEndForward(n) {\n    const range = this.setEnd(this.end.moveForward(n))\n    return range\n  }\n\n  /**\n   * Move the range's end point to a new `path` and `offset`.\n   *\n   * Optionally, the `path` can be a key string, or omitted entirely in which\n   * case it would be the offset number.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @return {Range}\n   */\n\n  moveEndTo(path, offset) {\n    const range = this.setEnd(this.end.moveTo(path, offset))\n    return range\n  }\n\n  /**\n   * Move the range's end point to the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveEndToStartOfNode(node) {\n    const range = this.setEnd(this.end.moveToStartOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the range's end point to the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveEndToEndOfNode(node) {\n    const range = this.setEnd(this.end.moveToEndOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the focus offset backward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveFocusBackward(n) {\n    const range = this.setFocus(this.focus.moveBackward(n))\n    return range\n  }\n\n  /**\n   * Move the focus offset forward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveFocusForward(n) {\n    const range = this.setFocus(this.focus.moveForward(n))\n    return range\n  }\n\n  /**\n   * Move the range's focus point to a new `path` and `offset`.\n   *\n   * Optionally, the `path` can be a key string, or omitted entirely in which\n   * case it would be the offset number.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @return {Range}\n   */\n\n  moveFocusTo(path, offset) {\n    const range = this.setFocus(this.focus.moveTo(path, offset))\n    return range\n  }\n\n  /**\n   * Move the range's focus point to the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveFocusToStartOfNode(node) {\n    const range = this.setFocus(this.focus.moveToStartOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the range's focus point to the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveFocusToEndOfNode(node) {\n    const range = this.setFocus(this.focus.moveToEndOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the start offset backward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveStartBackward(n) {\n    const range = this.setStart(this.start.moveBackward(n))\n    return range\n  }\n\n  /**\n   * Move the start offset forward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveStartForward(n) {\n    const range = this.setStart(this.start.moveForward(n))\n    return range\n  }\n\n  /**\n   * Move the range's start point to a new `path` and `offset`.\n   *\n   * Optionally, the `path` can be a key string, or omitted entirely in which\n   * case it would be the offset number.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @return {Range}\n   */\n\n  moveStartTo(path, offset) {\n    const range = this.setStart(this.start.moveTo(path, offset))\n    return range\n  }\n\n  /**\n   * Move the range's start point to the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveStartToStartOfNode(node) {\n    const range = this.setStart(this.start.moveToStartOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the range's start point to the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveStartToEndOfNode(node) {\n    const range = this.setStart(this.start.moveToEndOfNode(node))\n    return range\n  }\n\n  /**\n   * Move range's points to a new `path` and `offset`.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveTo(path, offset) {\n    return this.updatePoints(point => point.moveTo(path, offset))\n  }\n\n  /**\n   * Move the focus point to the anchor point.\n   *\n   * @return {Range}\n   */\n\n  moveToAnchor() {\n    const range = this.setFocus(this.anchor)\n    return range\n  }\n\n  /**\n   * Move the start point to the end point.\n   *\n   * @return {Range}\n   */\n\n  moveToEnd() {\n    const range = this.setStart(this.end)\n    return range\n  }\n\n  /**\n   * Move the range's points to the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveToEndOfNode(node) {\n    return this.updatePoints(point => point.moveToEndOfNode(node))\n  }\n\n  /**\n   * Move the anchor point to the focus point.\n   *\n   * @return {Range}\n   */\n\n  moveToFocus() {\n    const range = this.setAnchor(this.focus)\n    return range\n  }\n\n  /**\n   * Move to the entire range of `start` and `end` nodes.\n   *\n   * @param {Node} start\n   * @param {Node} end (optional)\n   * @return {Range}\n   */\n\n  moveToRangeOfNode(start, end = start) {\n    const range = this.setPoints([\n      this.anchor.moveToStartOfNode(start),\n      this.focus.moveToEndOfNode(end),\n    ])\n\n    return range\n  }\n\n  /**\n   * Move the end point to the start point.\n   *\n   * @return {Range}\n   */\n\n  moveToStart() {\n    const range = this.setEnd(this.start)\n    return range\n  }\n\n  /**\n   * Move the range's points to the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveToStartOfNode(node) {\n    return this.updatePoints(point => point.moveToStartOfNode(node))\n  }\n\n  /**\n   * Normalize the range, relative to a `node`, ensuring that the anchor\n   * and focus nodes of the range always refer to leaf text nodes.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  normalize(node) {\n    return this.updatePoints(point => point.normalize(node))\n  }\n\n  /**\n   * Set the anchor point to a new `anchor`.\n   *\n   * @param {Point} anchor\n   * @return {Range}\n   */\n\n  setAnchor(anchor) {\n    const range = this.set('anchor', anchor)\n    return range\n  }\n\n  /**\n   * Set the end point to a new `point`.\n   *\n   * @param {Point} point\n   * @return {Range}\n   */\n\n  setEnd(point) {\n    const range = this.isBackward ? this.setAnchor(point) : this.setFocus(point)\n    return range\n  }\n\n  /**\n   * Set the focus point to a new `focus`.\n   *\n   * @param {Point} focus\n   * @return {Range}\n   */\n\n  setFocus(focus) {\n    const range = this.set('focus', focus)\n    return range\n  }\n\n  /**\n   * Set the anchor and focus points to new `values`.\n   *\n   * @param {Array<Point>} values\n   * @return {Range}\n   */\n\n  setPoints(values) {\n    const [anchor, focus] = values\n    const range = this.set('anchor', anchor).set('focus', focus)\n    return range\n  }\n\n  /**\n   * Set the anchor and focus points with `updater` callback\n   *\n   * @param {Function} updater\n   * @return {Range}\n   */\n\n  updatePoints(updater) {\n    let { anchor, focus } = this\n    anchor = updater(anchor)\n    focus = updater(focus)\n    return this.merge({ anchor, focus })\n  }\n\n  /**\n   * Set the start point to a new `point`.\n   *\n   * @param {Point} point\n   * @return {Range}\n   */\n\n  setStart(point) {\n    const range = this.isBackward ? this.setFocus(point) : this.setAnchor(point)\n    return range\n  }\n\n  /**\n   * Set new `properties` on the range.\n   *\n   * @param {Object|Range} properties\n   * @return {Range}\n   */\n\n  setProperties(properties) {\n    properties = Range.createProperties(properties)\n    const { anchor, focus, ...props } = properties\n\n    if (anchor) {\n      props.anchor = Point.create(anchor)\n    }\n\n    if (focus) {\n      props.focus = Point.create(focus)\n    }\n\n    const range = this.merge(props)\n    return range\n  }\n\n  /**\n   * Return a JSON representation of the range.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      anchor: this.anchor.toJSON(options),\n      focus: this.focus.toJSON(options),\n    }\n\n    return object\n  }\n\n  /**\n   * Return a `Range` instance from any range-like instance.\n   *\n   * @return {Range}\n   */\n\n  toRange() {\n    const properties = Range.createProperties(this)\n    const range = Range.create(properties)\n    return range\n  }\n\n  /**\n   * Unset the range.\n   *\n   * @return {Range}\n   */\n\n  unset() {\n    const range = this.updatePoints(p => p.unset())\n    return range\n  }\n}\n\n/**\n * Mix in the range interface.\n *\n * @param {Record}\n */\n\nmixin(RangeInterface, [Decoration, Range, Selection])\n","import './interfaces/object'\nimport './interfaces/model'\nimport './interfaces/node'\nimport './interfaces/element'\nimport './interfaces/range'\n\nimport Block from './models/block'\nimport Change from './models/change'\nimport Data from './models/data'\nimport Decoration from './models/decoration'\nimport Document from './models/document'\nimport Editor from './controllers/editor'\nimport Inline from './models/inline'\nimport KeyUtils from './utils/key-utils'\nimport Leaf from './models/leaf'\nimport Mark from './models/mark'\nimport Node from './models/node'\nimport Operation from './models/operation'\nimport PathUtils from './utils/path-utils'\nimport Point from './models/point'\nimport Range from './models/range'\nimport Selection from './models/selection'\nimport Text from './models/text'\nimport TextUtils from './utils/text-utils'\nimport Value from './models/value'\nimport { resetMemoization, useMemoization } from './utils/memoize'\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport {\n  Block,\n  Change,\n  Data,\n  Decoration,\n  Document,\n  Editor,\n  Inline,\n  KeyUtils,\n  Leaf,\n  Mark,\n  Node,\n  Operation,\n  PathUtils,\n  Point,\n  Range,\n  resetMemoization,\n  Selection,\n  Text,\n  TextUtils,\n  useMemoization,\n  Value,\n}\n\nexport default {\n  Block,\n  Change,\n  Data,\n  Decoration,\n  Document,\n  Editor,\n  Inline,\n  KeyUtils,\n  Leaf,\n  Mark,\n  Node,\n  Operation,\n  PathUtils,\n  Point,\n  Range,\n  resetMemoization,\n  Selection,\n  Text,\n  TextUtils,\n  useMemoization,\n  Value,\n}\n"],"names":["n","generate","create","key","Error","setGenerator","func","resetGenerator","Data","attrs","Map","isMap","isPlainObject","fromJSON","object","fromJS","DEFAULTS","undefined","Document","options","data","toJSON","nodes","toArray","map","preserveKeys","isDocument","List","isList","Array","isArray","KeyUtils","document","Node","createList","Record","Inline","type","isInline","elements","list","inline","any","every","item","Mark","isMark","Set","isSet","marks","props","mark","Leaf","newMark","equals","has","newMarks","withMutations","remove","add","set","union","offset","string","text","next","slice","m","isLeaf","leaves","size","invalid","result","findLast","leaf","index","firstLeaf","cache","first","unshift","endOffset","left","right","find","startOffset","length","of","take","skip","push","ENABLED","LEAF","Symbol","STORE_KEY","UNDEFINED","NULL","UNSET","memoizeStore","WeakMap","memoize","properties","property","original","args","apply","get","noArgs","hasArgs","takesArguments","cachedValue","keys","getIn","value","v","setIn","child","newChild","resetMemoization","useMemoization","enabled","Text","l","addMarks","newFirst","splitLeaves","before","bundle","middle","after","concat","x","setLeaves","decorations","d","forEach","start","dec","end","hasStart","hasEnd","addMark","createLeaves","getActiveMarks","leafEnd","leafStart","intersect","toOrderedSet","c","getMarks","array","getMarksAsArray","OrderedSet","prototype","searchLeafAtOffset","delta","beforeText","afterText","nextLeaves","splice","removeMark","getLeaves","r","merge","updateMark","splitted","one","two","regenerateKey","isText","ranges","node","isNode","kind","Block","isBlock","block","compare","path","target","min","i","pv","tv","crop","a","b","ca","cb","decrement","increment","getAncestors","ancestors","newValue","newPath","isAbove","p","t","isAfter","isBefore","isEqual","isOlder","pl","tl","isSibling","butLast","isYounger","lift","parent","max","Math","relate","av","bv","transform","operation","position","pIndex","pEqual","pYounger","pAbove","np","npIndex","npEqual","npYounger","npAbove","paths","Point","point","isUnset","is","PathUtils","range","isAfterPoint","isBeforePoint","last","getLastText","getFirstText","hasNode","moveForward","setOffset","moveBackward","moveTo","getNode","getPath","getTextAtOffset","getOffset","isPoint","Decoration","createProperties","anchor","focus","decoration","isDecoration","Range","isRange","JSON","stringify","TYPES","isObject","Selection","isSelection","selection","isFocused","createSet","Value","insertNode","mapRanges","updatePoints","setPath","assertNode","insertText","newDocument","mergeNode","resolvePath","withPath","moveAnchorTo","moveFocusTo","newIndex","moveNode","prev","getPreviousText","getNextText","removeNode","moveStartTo","unset","moveEndTo","removeText","setNode","setMark","resolveDecoration","setProperties","resolveSelection","splitNode","iterator","sel","createSelection","decs","createDecoration","filter","preserveData","preserveDecorations","preserveSelection","getClosestBlock","getClosestInline","getDescendant","getNextBlock","getPreviousBlock","getNextInline","getPreviousInline","getMarksAtRange","getActiveMarksAtRange","getLeafBlocksAtRange","getFragmentAtRange","getLeafInlinesAtRange","getTextsAtRange","isValue","moveToStartOfNode","debug","Debug","applyOperation","op","Operation","setSelection","invertOperation","inverse","inversePath","inverseNewPath","pathLast","newPathLast","e","inverseNode","inverseProperties","pick","Object","inverseMark","inverseSelection","inverseProps","inverseValue","OPERATION_ATTRIBUTES","inverted","invert","json","ATTRIBUTES","toJS","isOperation","Change","operations","o","isChange","change","CommandsPlugin","commands","onCommand","command","editor","fn","onConstruct","registerCommand","SURROGATE_START","SURROGATE_END","SPACE","CHAMELEON","PUNCTUATION","isSurrogate","code","isWord","char","remaining","test","charAt","getCharLength","rest","charCodeAt","getCharOffset","getCharOffsetBackward","reverse","getCharOffsetForward","getWordOffset","started","getWordOffsetBackward","getWordOffsetForward","deleteExpandedAtRange","isExpanded","deleteAtRange","hasDescendant","moveToStart","normalize","Commands","addMarkAtRange","isCollapsed","texts","withoutNormalizing","addMarkByKey","addMarksAtRange","snapshotSelection","startKey","endKey","isStartVoid","hasVoidParent","isEndVoid","startBlock","endBlock","isHanging","prevText","startVoid","getClosestVoid","nextText","removeNodeByKey","endVoid","removeTextByKey","startText","endText","startLength","endLength","ancestor","getCommonAncestor","startChild","getFurthestAncestor","endChild","startParent","getParent","startParentIndex","indexOf","endParentIndex","afters","startChildIndex","endChildIndex","middles","befores","lonely","getFurthestOnlyChildAncestor","moveNodeByKey","mergeNodeByKey","deleteBackwardAtRange","voidParent","isAtStartOfNode","prevBlock","prevVoid","moveFocusBackward","traversed","deleteCharBackwardAtRange","TextUtils","deleteCharForwardAtRange","deleteForwardAtRange","isVoid","nextBlock","isAtEndOfNode","nextVoid","moveFocusForward","deleteLineBackwardAtRange","deleteLineForwardAtRange","deleteWordBackwardAtRange","deleteWordForwardAtRange","wordOffset","insertBlockAtRange","startInline","extra","insertNodeByKey","atEnd","siblingText","splitRange","moveToEndOfNode","splitDescendantsByKey","insertFragmentAtRange","fragment","mapDescendants","isAtStart","blocks","getBlocks","firstChild","lastChild","firstBlock","lastBlock","insertionNode","findInsertionNode","hasBlockChildren","lonelyParent","getFurthest","lonelyChild","startIndex","excludingLonelyChild","nextChild","getNextSibling","nextNodes","skipUntil","lastIndex","inlineChild","inlineIndex","hasSingleNode","firstNode","fragmentInner","matches","documentNode","documentInner","insertInlineAtRange","assertDescendant","splitNodeByKey","insertTextAtRange","insertTextByKey","removeMarkAtRange","removeMarkByKey","setBlocksAtRange","sets","setNodeByKey","setInlinesAtRange","inlines","splitBlockAtRange","height","h","isBackward","flip","moveAnchorToStartOfNode","setFocus","resolveRange","splitInlineAtRange","Infinity","toggleMarkAtRange","exists","some","unwrapBlockAtRange","wrappers","getClosest","isSuperset","toList","children","firstMatch","lastMatch","takeUntil","firstText","unwrapInlineAtRange","wrapBlockAtRange","clear","firstblock","lastblock","siblings","p1","p2","indexes","reduce","ind","wrapInlineAtRange","inlineParent","wrapInlineByKey","endInline","endIndex","splitText","inlinekey","rng","select","startInner","startInnerIndex","endInner","startInlines","endInlines","startNode","endNode","wrapTextAtRange","prefix","suffix","startRange","endRange","moveToEnd","addMarkByPath","bx","by","ax","ay","insertFragmentByPath","insertNodeByPath","insertTextByPath","getMarksAtIndex","updated","isAtomic","setDecorations","mergeNodeByPath","previous","getPreviousSibling","moveNodeByPath","removeMarkByPath","removeAllMarksByPath","state","getTextsAsArray","removeNodeByPath","removeTextByPath","from","to","removals","replaceNodeByPath","newNode","parentPath","replaceTextByPath","createRange","activeMarks","activeMark","setMarkByPath","setNodeByPath","setTextByPath","splitNodeByPath","splitDescendantsByPath","textPath","textOffset","prevIndex","unwrapInlineByPath","moveToRangeOfNode","unwrapBlockByPath","unwrapNodeByPath","parentIndex","grandPath","isFirst","isLast","updatedPath","unwrapChildrenByPath","childIndex","childPath","wrapBlockByPath","wrapInlineByPath","wrapNodeByPath","COMMANDS","method","assertPath","newKey","textKey","save","tmp","undos","lastBatch","lastOperation","shouldMerge","batch","pop","takeLast","withoutSaving","redos","newData","setData","redo","omit","undo","withoutMerging","blur","deselect","proxy","moveAnchorBackward","pointBackward","moveAnchorWordBackward","pointWordBackward","moveAnchorForward","pointForward","moveAnchorWordForward","pointWordForward","moveAnchorToEndOfBlock","pointEdgeObject","moveAnchorToEndOfInline","moveAnchorToEndOfDocument","moveAnchorToEndOfNode","moveToAnchor","moveAnchorToEndOfNextBlock","pointEdgeSideObject","moveAnchorToEndOfNextInline","moveAnchorToEndOfNextText","moveAnchorToEndOfPreviousBlock","moveAnchorToEndOfPreviousInline","moveAnchorToEndOfPreviousText","moveAnchorToEndOfText","moveAnchorToStartOfBlock","moveAnchorToStartOfDocument","moveAnchorToStartOfInline","moveAnchorToStartOfNextBlock","moveAnchorToStartOfNextInline","moveAnchorToStartOfNextText","moveAnchorToStartOfPreviousBlock","moveAnchorToStartOfPreviousInline","moveAnchorToStartOfPreviousText","moveAnchorToStartOfText","moveWordBackward","moveFocusWordBackward","moveToFocus","moveEndBackward","moveEndWordBackward","moveEndForward","moveEndWordForward","moveEndToEndOfBlock","moveEndToEndOfDocument","moveEndToEndOfNode","moveEndToEndOfInline","moveEndToEndOfNextBlock","moveEndToEndOfNextInline","moveEndToEndOfNextText","moveEndToEndOfPreviousBlock","moveEndToEndOfPreviousInline","moveEndToEndOfPreviousText","moveEndToEndOfText","moveEndToStartOfBlock","moveEndToStartOfDocument","moveEndToStartOfNode","moveEndToStartOfInline","moveEndToStartOfNextBlock","moveEndToStartOfNextInline","moveEndToStartOfNextText","moveEndToStartOfPreviousBlock","moveEndToStartOfPreviousInline","moveEndToStartOfPreviousText","moveEndToStartOfText","moveFocusWordForward","moveFocusToEndOfBlock","moveFocusToEndOfDocument","moveFocusToEndOfNode","moveFocusToEndOfInline","moveFocusToEndOfNextBlock","moveFocusToEndOfNextInline","moveFocusToEndOfNextText","moveFocusToEndOfPreviousBlock","moveFocusToEndOfPreviousInline","moveFocusToEndOfPreviousText","moveFocusToEndOfText","moveFocusToStartOfBlock","moveFocusToStartOfDocument","moveFocusToStartOfNode","moveFocusToStartOfInline","moveFocusToStartOfNextBlock","moveFocusToStartOfNextInline","moveFocusToStartOfNextText","moveFocusToStartOfPreviousBlock","moveFocusToStartOfPreviousInline","moveFocusToStartOfPreviousText","moveFocusToStartOfText","moveWordForward","moveStartBackward","moveStartWordBackward","moveStartForward","moveStartWordForward","moveStartToEndOfBlock","moveStartToEndOfDocument","moveStartToEndOfNode","moveStartToEndOfInline","moveStartToEndOfNextBlock","moveStartToEndOfNextInline","moveStartToEndOfNextText","moveStartToEndOfPreviousBlock","moveStartToEndOfPreviousInline","moveStartToEndOfPreviousText","moveStartToEndOfText","moveStartToStartOfBlock","moveStartToStartOfDocument","moveStartToStartOfNode","moveStartToStartOfInline","moveStartToStartOfNextBlock","moveStartToStartOfNextInline","moveStartToStartOfNextText","moveStartToStartOfPreviousBlock","moveStartToStartOfPreviousInline","moveStartToStartOfPreviousText","moveStartToStartOfText","moveToEndOfBlock","moveToEndOfDocument","moveToEndOfInline","moveToEndOfNextBlock","moveToEndOfNextInline","moveToEndOfNextText","moveToEndOfPreviousBlock","moveToEndOfPreviousInline","moveToEndOfPreviousText","moveToEndOfText","moveToRangeOfDocument","moveToStartOfBlock","moveToStartOfDocument","moveToStartOfInline","moveToStartOfNextBlock","moveToStartOfNextInline","moveToStartOfNextText","moveToStartOfPreviousBlock","moveToStartOfPreviousInline","moveToStartOfPreviousText","moveToStartOfText","snapshot","k","setAnchor","setEnd","setStart","edge","toUpperCase","Edge","side","Side","getDirectionNode","isInBlock","isPreviousInVoid","isNextInVoid","pointName","QueriesPlugin","queries","query","registerQuery","onQuery","ret","SlateError","captureStackTrace","constructor","stack","SchemaPlugin","schema","rules","schemaRules","rule","testRules","match","normalizeNode","error","validateNode","failure","validateRules","Queries","defaultNormalize","delete","getTexts","validateObject","validateType","validateData","validateMarks","validateText","validateFirst","validateLast","validateNodes","fail","valid","def","replace","defs","count","lastCount","nextDef","shift","rewind","err","validateParent","validatePrevious","validateNext","lastMin","deleteExpanded","deleteBackward","deleteCharBackward","deleteLineBackward","deleteWordBackward","deleteForward","deleteCharForward","deleteLineForward","deleteWordForward","insertBlock","insertFragment","lastText","lastInline","isAppending","isInserting","newTexts","includes","newText","insertInline","getInsertMarksAtRange","replaceMark","oldMark","setBlocks","setInlines","splitBlock","depth","splitInline","toggleMark","unwrapBlock","unwrapInline","wrapBlock","wrapInline","wrapText","isForward","CorePlugin","plugins","AtRange","ByPath","OnHistory","OnSelection","OnValue","WithIntent","Schema","isEmpty","Editor","controller","construct","onChange","readOnly","middleware","core","run","setReadOnly","setValue","newDirtyPaths","getDirtyPaths","dirty","memo","transformed","flushing","resolve","then","flush","obj","__command","__query","table","getKeysToPathsTable","values","fns","overrides","defineProperty","nextPath","previousPath","newParentPath","oldAncestors","newAncestors","normalizeDirtyPaths","normalizeNodeByPath","iterations","found","registerPlugin","plugin","commandsPlugin","queriesPlugin","schemaPlugin","mixin","Interface","Classes","Class","getOwnPropertyNames","name","hasOwnProperty","desc","getOwnPropertyDescriptor","TYPE","camel","ObjectInterface","bind","ModelInterface","NodeInterface","descendant","nested","dict","normalizer","getText","ElementInterface","replaceNode","resolvePoint","forEachDescendant","getMarksAtPosition","toSet","getActiveMarksBetweenOffsets","startMarks","endMarks","current","getBlocksAsArray","isLeafBlock","getLeafBlocksAtRangeAsArray","getBlocksByTypeAsArray","closest","startAt","deep","flatMap","targetPath","targetPosition","mode","furthest","getInlinesAsArray","isLeafInline","getLeafInlinesAtRangeAsArray","getInlinesByTypeAsArray","getTextsAtRangeAsArray","currentMarks","closestBlock","getOrderedMarksAtRange","getMarksByTypeAsArray","sibling","getNextNode","Stack","peek","onStartEdge","onEndEdge","relativeStartPath","relativeEndPath","pushAll","hasChild","getOrderedMarksBetweenPositions","getMarksBetweenOffsets","getTextsBetweenPositionsAsArray","getFurthestBlock","getRootInlinesAtRangeAsArray","getFurthestInline","getPreviousNode","isSelected","dir","direction","getChild","toStart","toEnd","mergeText","deleteIn","ASSERTS","RangeInterface","setPoints","updater"],"mappings":"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"}
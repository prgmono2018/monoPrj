{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\images-gallery-master\\\\src\\\\components\\\\ImageGallery.js\";\nimport React, { Component } from 'react';\nimport * as _ from 'lodash';\nimport axios from 'axios';\nimport config from '../config';\nimport data from '../assets/data';\nimport Image from './Image';\n\nclass ImageGallery extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChangePicture = ({\n      target\n    }, coordinates) => {\n      const fileReader = new FileReader(); //console.log(\"ggggg\");\n\n      fileReader.readAsDataURL(target.files[0]);\n\n      fileReader.onload = e => {\n        this.setState(state => (_.set(state.data, coordinates, e.target.result), state));\n        let data = new FormData();\n        data.append('file', target.files[0]);\n        data.append('delete', this.state.delete);\n        this.bla(data, this).then(returnVal => {\n          this.setState({\n            refresh: true\n          });\n          console.log(\"set refresh to true\");\n        }).catch(err => console.log(\"Axios err: \", err));\n        /*  axios.post('http://localhost:8000/switchFile', data)\r\n         .then(function (response) {\r\n           //handle success\r\n           console.log(\"success:\"+response);\r\n           //this.setState(this.baseState);\r\n           //this.baseState = this.state;\r\n           this.setState({refresh:true});\r\n           console.log(\"set refresh to true\");\r\n        }.bind(this))\r\n        .catch(function (response) {\r\n           //handle error\r\n           console.log(response);\r\n        }.bind(this));*/\n      };\n    };\n\n    this.savePicToDelete = ({\n      target\n    }, coordinates) => {\n      this.setState({\n        delete: target.dataset.name\n      });\n    };\n\n    this.bla = (data, param) => {\n      axios.post('http://localhost:8000/switchFile', data).then(function (response) {\n        //handle success\n        console.log(\"success:\" + response); //this.setState(this.baseState);\n        //this.baseState = this.state;\n        // this.setState({refresh:true});\n        // console.log(\"set refresh to true\");\n      }.bind(param)).catch(function (response) {\n        //handle error\n        console.log(response);\n      }.bind(this));\n    };\n\n    this.componentDidUpdate = () => {\n      console.log(\">> componentDidUpdate=\" + this.state.refresh);\n\n      if (this.state.refresh == true) {\n        console.log(\">> in if componentDidUpdate\");\n        this.getListFromServer();\n        this.setState({\n          refresh: false\n        });\n      }\n    };\n\n    this.getListFromServer = () => {\n      axios.get(\"http://localhost:8000/listFiles\").then(json => {\n        console.log(json);\n        this.setState({\n          data: json\n        });\n        data.append('file', this.state.jsonObj);\n        axios.post('http://localhost:8000/saveImage', data).then(function (response) {\n          //handle success\n          console.log(response);\n        }).catch(function (response) {\n          //handle error\n          console.log(response);\n        });\n      }).catch(error => {});\n    };\n\n    this.componentDidMount = () => {\n      console.log(\">> componentDidMount=\" + this.state.refresh);\n      this.getListFromServer();\n    };\n\n    this.isImage = resource => {\n      return new RegExp(\".(\".concat(config.extensions.join('|'), \")$\")).test(resource) || resource.startsWith('data:image');\n    };\n\n    this.renderImages = (resource, coordinates) => {\n      //console.log(\"resource=\"+resource);\n      if (_.isArray(resource)) {\n        return _.map(resource, (res, index) => this.renderImages(res, [...coordinates, index]));\n      }\n\n      if (_.isObject(resource)) {\n        return _.keys(resource).map(objkey => this.renderImages(resource[objkey], [...coordinates, objkey]));\n      }\n\n      if (_.isString(resource) && this.isImage(resource)) {\n        return React.createElement(Image, {\n          key: coordinates.join(),\n          image: this.server + \"/\" + resource,\n          handleChangePicture: this.handleChangePicture,\n          coordinates: coordinates,\n          savePicToDelete: this.savePicToDelete,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        });\n      }\n    };\n\n    this.renderResource = () => {};\n\n    this.state = {\n      data: null,\n      delete: null,\n      refresh: false\n    };\n    this.server = \"http://localhost:8000/\";\n    this.handleChangePicture = this.handleChangePicture.bind(this);\n    this.baseState = this.state;\n    this.getListFromServer = this.getListFromServer.bind(this);\n  }\n  /**\r\n   * Sets the selected image in the data object, uses the coordinates to find the image path.\r\n   *  \r\n   * @param event The event.\r\n   * @param coordinates The image's path in the data object.\r\n   */\n\n\n  render() {\n    //console.log(\"kk=\"+this.state.data);\n    this.renderResource();\n    return React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, this.state.data ? this.renderImages(this.state.data, []) : React.createElement(\"div\", {\n      className: \"spiner-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"spinner-border\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"Loading...\"))));\n  }\n\n}\n\nexport default ImageGallery;","map":{"version":3,"sources":["C:\\projects\\images-gallery-master\\src\\components\\ImageGallery.js"],"names":["React","Component","_","axios","config","data","Image","ImageGallery","constructor","props","handleChangePicture","target","coordinates","fileReader","FileReader","readAsDataURL","files","onload","e","setState","state","set","result","FormData","append","delete","bla","then","returnVal","refresh","console","log","catch","err","savePicToDelete","dataset","name","param","post","response","bind","componentDidUpdate","getListFromServer","get","json","jsonObj","error","componentDidMount","isImage","resource","RegExp","extensions","join","test","startsWith","renderImages","isArray","map","res","index","isObject","keys","objkey","isString","server","renderResource","baseState","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport * as _ from 'lodash';\r\nimport axios from 'axios';\r\nimport config from '../config';\r\nimport data from '../assets/data';\r\nimport Image from './Image';\r\n\r\n\r\nclass ImageGallery extends Component {\r\n    constructor(props) {\r\n   \r\n        super(props);\r\n        this.state = { data :null, delete:null,refresh:false};\r\n        this.server=\"http://localhost:8000/\";\r\n        this.handleChangePicture=this.handleChangePicture.bind(this);\r\n        this.baseState = this.state;\r\n        this.getListFromServer=this.getListFromServer.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the selected image in the data object, uses the coordinates to find the image path.\r\n     *  \r\n     * @param event The event.\r\n     * @param coordinates The image's path in the data object.\r\n     */\r\n    handleChangePicture = ({ target }, coordinates) => {\r\n        const fileReader = new FileReader();\r\n        //console.log(\"ggggg\");\r\n        fileReader.readAsDataURL(target.files[0]);\r\n        fileReader.onload = (e) => {\r\n            this.setState(state => (_.set(state.data, coordinates, e.target.result), state));\r\n            let data = new FormData();\r\n            data.append('file', target.files[0]);\r\n            data.append('delete', this.state.delete);\r\n            this.bla(data,this).then((returnVal) => {\r\n                this.setState({refresh:true});\r\n                console.log(\"set refresh to true\");\r\n})\r\n.catch(err => console.log(\"Axios err: \", err))\r\n           /*  axios.post('http://localhost:8000/switchFile', data)\r\n            .then(function (response) {\r\n              //handle success\r\n              console.log(\"success:\"+response);\r\n              //this.setState(this.baseState);\r\n              //this.baseState = this.state;\r\n              this.setState({refresh:true});\r\n              console.log(\"set refresh to true\");\r\n          }.bind(this))\r\n          .catch(function (response) {\r\n              //handle error\r\n              console.log(response);\r\n          }.bind(this));*/\r\n         \r\n        };\r\n       \r\n    };\r\n\r\n/* bla=async (data)=>{\r\n  let res=  await axios.post('http://localhost:8000/switchFile', data);\r\n  \r\n      //handle success\r\n      console.log(\"success:\"+res);\r\n      //this.setState(this.baseState);\r\n      //this.baseState = this.state;\r\n      this.setState({refresh:true});\r\n      console.log(\"set refresh to true\");\r\n\r\n\r\n}*/\r\n    savePicToDelete = ({ target }, coordinates) => {\r\n\r\n       this.setState({delete:target.dataset.name})\r\n      \r\n    };\r\n\r\nbla=(data,param)=>{\r\n\r\naxios.post('http://localhost:8000/switchFile', data)\r\n            .then(function (response) {\r\n              //handle success\r\n              console.log(\"success:\"+response);\r\n              //this.setState(this.baseState);\r\n              //this.baseState = this.state;\r\n             // this.setState({refresh:true});\r\n             // console.log(\"set refresh to true\");\r\n          }.bind(param))\r\n          .catch(function (response) {\r\n              //handle error\r\n              console.log(response);\r\n          }.bind(this));\r\n         \r\n\r\n}\r\ncomponentDidUpdate=()=>  { \r\n      console.log(\">> componentDidUpdate=\"+this.state.refresh);\r\n    if (this.state.refresh==true){\r\n        console.log(\">> in if componentDidUpdate\");\r\n        this.getListFromServer();\r\n       this.setState({refresh: false})\r\n      }\r\n}\r\ngetListFromServer=()=>{\r\n    axios.get(\"http://localhost:8000/listFiles\")\r\n    .then(\r\n     \r\n                json => {\r\n                    console.log(json);\r\n                    this.setState({data:json});\r\n                    data.append('file', this.state.jsonObj);\r\n                    axios.post('http://localhost:8000/saveImage', data)\r\n                    .then(function (response) {\r\n                    //handle success\r\n                    console.log(response);\r\n            })\r\n            .catch(function (response) {\r\n                //handle error\r\n                console.log(response);\r\n            });\r\n                \r\n                }\r\n    ).catch(error => {\r\n       \r\n      })\r\n\r\n\r\n}\r\n\r\n    componentDidMount=()=>{\r\n        console.log(\">> componentDidMount=\"+this.state.refresh);\r\n        this.getListFromServer();\r\n     \r\n\r\n    }\r\n    isImage = (resource) => {\r\n        return (new RegExp(`.(${config.extensions.join('|')})$`)).test(resource) || resource.startsWith('data:image');\r\n    };\r\n\r\n    /**\r\n     * A Recoursive function that goes over all the elements in the resource \r\n     * and for each element that represents an image - \r\n     * returns an Image Component with the path of the element in the data object (coordinates).\r\n     * \r\n     * @param resource The resource to generate images from.\r\n     * @param coordinates The resource's path in the data object.\r\n     * @return Returns array of Image components.\r\n     */\r\n    renderImages = (resource, coordinates) => {\r\n        \r\n        //console.log(\"resource=\"+resource);\r\n        if (_.isArray(resource)) {\r\n            return _.map(resource, (res, index) => this.renderImages(res, [...coordinates, index]));\r\n        }\r\n        if (_.isObject(resource)) {\r\n            return _.keys(resource).map((objkey) => this.renderImages(resource[objkey], [...coordinates, objkey]));\r\n        }\r\n        if (_.isString(resource) && (this.isImage(resource))) {\r\n            return <Image\r\n                key={coordinates.join()}\r\n                image={this.server+\"/\"+resource}\r\n                handleChangePicture={this.handleChangePicture}\r\n                coordinates={coordinates} \r\n                savePicToDelete={this.savePicToDelete}\r\n                />;\r\n        }\r\n        \r\n    };\r\nrenderResource=()=>{\r\n\r\n \r\n}\r\n    render() {\r\n        //console.log(\"kk=\"+this.state.data);\r\n        this.renderResource();\r\n        return <div className=\"row\">\r\n            {this.state.data ? this.renderImages(this.state.data, []) :\r\n                <div className=\"spiner-wrapper\">\r\n                    <div className=\"spinner-border\" role=\"status\">\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </div>\r\n                </div>}\r\n        </div>;\r\n    };\r\n}\r\n\r\nexport default ImageGallery;\r\n"]},"metadata":{},"sourceType":"module"}
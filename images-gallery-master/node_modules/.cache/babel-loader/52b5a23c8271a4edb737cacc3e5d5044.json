{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\images-gallery-master\\\\src\\\\components\\\\ImageGallery.js\";\nimport React, { Component } from 'react';\nimport * as _ from 'lodash';\nimport config from '../config';\nimport data from '../assets/data';\nimport Image from './Image';\n\nvar fs = require('fs');\n\nconst path = require('path');\n\nimport listReactFiles from 'list-react-files';\n\nclass ImageGallery extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChangePicture = ({\n      target\n    }, coordinates) => {\n      const fileReader = new FileReader(); //console.log(\"ggggg\");\n\n      fileReader.readAsDataURL(target.files[0]);\n\n      fileReader.onload = e => {\n        this.setState(state => (_.set(state.data, coordinates, e.target.result), state));\n      };\n    };\n\n    this.isImage = resource => {\n      return new RegExp(\".(\".concat(config.extensions.join('|'), \")$\")).test(resource) || resource.startsWith('data:image');\n    };\n\n    this.renderImages = (resource, coordinates) => {\n      this.renderResource(); //console.log(\"resource=\"+resource);\n\n      if (_.isArray(resource)) {\n        return _.map(resource, (res, index) => this.renderImages(res, [...coordinates, index]));\n      }\n\n      if (_.isObject(resource)) {\n        return _.keys(resource).map(objkey => this.renderImages(resource[objkey], [...coordinates, objkey]));\n      }\n\n      if (_.isString(resource) && this.isImage(resource)) {\n        return React.createElement(Image, {\n          key: coordinates.join(),\n          image: resource,\n          handleChangePicture: this.handleChangePicture,\n          coordinates: coordinates,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        });\n      }\n    };\n\n    this.renderResource = () => {\n      const dirname = path.join(__dirname, 'data', 'data.js');\n      listReactFiles(__dirname).then(files => {\n        console.log(\"nnnn=\" + files);\n      });\n      fs.readdir(dirname, function (err, filenames) {\n        if (err) {\n          //onError(err);\n          return;\n        }\n\n        filenames.forEach(function (filename) {\n          fs.readFile(dirname + filename, 'utf-8', function (err, content) {\n            if (err) {\n              //onError(err);\n              return;\n            } //onFileContent(filename, content);\n\n\n            console.log(\"c=\" + content);\n          });\n        });\n      });\n    };\n\n    this.state = {\n      data\n    };\n  }\n  /**\r\n   * Sets the selected image in the data object, uses the coordinates to find the image path.\r\n   *  \r\n   * @param event The event.\r\n   * @param coordinates The image's path in the data object.\r\n   */\n\n\n  render() {\n    console.log(\"kk=\" + this.state.data);\n    return React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, this.state.data ? this.renderImages(this.state.data, []) : React.createElement(\"div\", {\n      className: \"spiner-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"spinner-border\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Loading...\"))));\n  }\n\n}\n\nexport default ImageGallery;","map":{"version":3,"sources":["C:\\projects\\images-gallery-master\\src\\components\\ImageGallery.js"],"names":["React","Component","_","config","data","Image","fs","require","path","listReactFiles","ImageGallery","constructor","props","handleChangePicture","target","coordinates","fileReader","FileReader","readAsDataURL","files","onload","e","setState","state","set","result","isImage","resource","RegExp","extensions","join","test","startsWith","renderImages","renderResource","isArray","map","res","index","isObject","keys","objkey","isString","dirname","__dirname","then","console","log","readdir","err","filenames","forEach","filename","readFile","content","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport * as _ from 'lodash';\r\n\r\nimport config from '../config';\r\nimport data from '../assets/data';\r\nimport Image from './Image';\r\nvar fs = require('fs');\r\nconst path = require('path');\r\nimport listReactFiles from 'list-react-files'\r\n\r\nclass ImageGallery extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { data }\r\n    }\r\n\r\n    /**\r\n     * Sets the selected image in the data object, uses the coordinates to find the image path.\r\n     *  \r\n     * @param event The event.\r\n     * @param coordinates The image's path in the data object.\r\n     */\r\n    handleChangePicture = ({ target }, coordinates) => {\r\n        const fileReader = new FileReader();\r\n        //console.log(\"ggggg\");\r\n        fileReader.readAsDataURL(target.files[0]);\r\n        fileReader.onload = (e) => {\r\n            this.setState(state => (_.set(state.data, coordinates, e.target.result), state));\r\n        };\r\n    };\r\n\r\n    isImage = (resource) => {\r\n        return (new RegExp(`.(${config.extensions.join('|')})$`)).test(resource) || resource.startsWith('data:image');\r\n    };\r\n\r\n    /**\r\n     * A Recoursive function that goes over all the elements in the resource \r\n     * and for each element that represents an image - \r\n     * returns an Image Component with the path of the element in the data object (coordinates).\r\n     * \r\n     * @param resource The resource to generate images from.\r\n     * @param coordinates The resource's path in the data object.\r\n     * @return Returns array of Image components.\r\n     */\r\n    renderImages = (resource, coordinates) => {\r\n        this.renderResource();\r\n        //console.log(\"resource=\"+resource);\r\n        if (_.isArray(resource)) {\r\n            return _.map(resource, (res, index) => this.renderImages(res, [...coordinates, index]));\r\n        }\r\n        if (_.isObject(resource)) {\r\n            return _.keys(resource).map((objkey) => this.renderImages(resource[objkey], [...coordinates, objkey]));\r\n        }\r\n        if (_.isString(resource) && (this.isImage(resource))) {\r\n            return <Image\r\n                key={coordinates.join()}\r\n                image={resource}\r\n                handleChangePicture={this.handleChangePicture}\r\n                coordinates={coordinates} />;\r\n        }\r\n    };\r\nrenderResource=()=>{\r\n    const dirname=path.join(__dirname, 'data','data.js');\r\n    listReactFiles(__dirname).then(files => {\r\n        \r\n        \r\n        \r\n        \r\n        console.log(\"nnnn=\"+files)\r\n        \r\n    }\r\n        )\r\n    fs.readdir(dirname, function(err, filenames) {\r\n        if (err) {\r\n          //onError(err);\r\n          return;\r\n        }\r\n        filenames.forEach(function(filename) {\r\n          fs.readFile(dirname + filename, 'utf-8', function(err, content) {\r\n            if (err) {\r\n              //onError(err);\r\n              return;\r\n            }\r\n            //onFileContent(filename, content);\r\n            console.log(\"c=\"+content);\r\n          });\r\n        });\r\n      });\r\n}\r\n    render() {\r\n        console.log(\"kk=\"+this.state.data);\r\n        return <div className=\"row\">\r\n            {this.state.data ? this.renderImages(this.state.data, []) :\r\n                <div className=\"spiner-wrapper\">\r\n                    <div className=\"spinner-border\" role=\"status\">\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </div>\r\n                </div>}\r\n        </div>;\r\n    };\r\n}\r\n\r\nexport default ImageGallery;\r\n"]},"metadata":{},"sourceType":"module"}
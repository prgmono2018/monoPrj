{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\images-gallery-master\\\\src\\\\components\\\\ImageGallery.js\";\nimport React, { Component } from 'react';\nimport * as _ from 'lodash';\nimport axios from 'axios';\nimport config from '../config';\nimport data from '../assets/data';\nimport Image from './Image';\n\nclass ImageGallery extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChangePicture = ({\n      target\n    }, coordinates) => {\n      const fileReader = new FileReader(); //console.log(\"ggggg\");\n\n      fileReader.readAsDataURL(target.files[0]);\n\n      fileReader.onload = e => {\n        this.setState(state => (_.set(state.data, coordinates, e.target.result), state));\n        let data = new FormData();\n      };\n    };\n\n    this.componentDidMount = () => {\n      axios.get(\"http://localhost:8000/listFiles\").then(json => {\n        console.log(json);\n        this.setState({\n          data: json\n        });\n        data.append('file', this.state.jsonObj);\n        axios.post('http://localhost:8000/saveImage', data).then(function (response) {\n          //handle success\n          console.log(response);\n        }).catch(function (response) {\n          //handle error\n          console.log(response);\n        });\n      }).catch(error => {});\n    };\n\n    this.isImage = resource => {\n      return new RegExp(\".(\".concat(config.extensions.join('|'), \")$\")).test(resource) || resource.startsWith('data:image');\n    };\n\n    this.renderImages = (resource, coordinates) => {\n      //console.log(\"resource=\"+resource);\n      if (_.isArray(resource)) {\n        return _.map(resource, (res, index) => this.renderImages(res, [...coordinates, index]));\n      }\n\n      if (_.isObject(resource)) {\n        return _.keys(resource).map(objkey => this.renderImages(resource[objkey], [...coordinates, objkey]));\n      }\n\n      if (_.isString(resource) && this.isImage(resource)) {\n        return React.createElement(Image, {\n          key: coordinates.join(),\n          image: this.server + \"/\" + resource,\n          handleChangePicture: this.handleChangePicture,\n          coordinates: coordinates,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        });\n      }\n    };\n\n    this.renderResource = () => {};\n\n    this.state = {\n      data: null\n    };\n    this.server = \"http://localhost:8000/\";\n  }\n  /**\r\n   * Sets the selected image in the data object, uses the coordinates to find the image path.\r\n   *  \r\n   * @param event The event.\r\n   * @param coordinates The image's path in the data object.\r\n   */\n\n\n  render() {\n    //console.log(\"kk=\"+this.state.data);\n    this.renderResource();\n    return React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, this.state.data ? this.renderImages(this.state.data, []) : React.createElement(\"div\", {\n      className: \"spiner-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"spinner-border\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Loading...\"))));\n  }\n\n}\n\nexport default ImageGallery;","map":{"version":3,"sources":["C:\\projects\\images-gallery-master\\src\\components\\ImageGallery.js"],"names":["React","Component","_","axios","config","data","Image","ImageGallery","constructor","props","handleChangePicture","target","coordinates","fileReader","FileReader","readAsDataURL","files","onload","e","setState","state","set","result","FormData","componentDidMount","get","then","json","console","log","append","jsonObj","post","response","catch","error","isImage","resource","RegExp","extensions","join","test","startsWith","renderImages","isArray","map","res","index","isObject","keys","objkey","isString","server","renderResource","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport * as _ from 'lodash';\r\nimport axios from 'axios';\r\nimport config from '../config';\r\nimport data from '../assets/data';\r\nimport Image from './Image';\r\n\r\n\r\nclass ImageGallery extends Component {\r\n    constructor(props) {\r\n   \r\n        super(props);\r\n        this.state = { data :null};\r\n        this.server=\"http://localhost:8000/\";\r\n    }\r\n\r\n    /**\r\n     * Sets the selected image in the data object, uses the coordinates to find the image path.\r\n     *  \r\n     * @param event The event.\r\n     * @param coordinates The image's path in the data object.\r\n     */\r\n    handleChangePicture = ({ target }, coordinates) => {\r\n        const fileReader = new FileReader();\r\n        //console.log(\"ggggg\");\r\n        fileReader.readAsDataURL(target.files[0]);\r\n        fileReader.onload = (e) => {\r\n            this.setState(state => (_.set(state.data, coordinates, e.target.result), state));\r\n            let data = new FormData();\r\n\r\n        };\r\n    };\r\n\r\n    componentDidMount=()=>{\r\n        axios.get(\"http://localhost:8000/listFiles\")\r\n        .then(\r\n         \r\n                    json => {\r\n                    \r\n                        console.log(json);\r\n                        this.setState({data:json});\r\n                        data.append('file', this.state.jsonObj);\r\n                        axios.post('http://localhost:8000/saveImage', data)\r\n                        .then(function (response) {\r\n                        //handle success\r\n                        console.log(response);\r\n                })\r\n                .catch(function (response) {\r\n                    //handle error\r\n                    console.log(response);\r\n                });\r\n                    \r\n                    }\r\n        ).catch(error => {\r\n           \r\n          })\r\n     \r\n\r\n    }\r\n    isImage = (resource) => {\r\n        return (new RegExp(`.(${config.extensions.join('|')})$`)).test(resource) || resource.startsWith('data:image');\r\n    };\r\n\r\n    /**\r\n     * A Recoursive function that goes over all the elements in the resource \r\n     * and for each element that represents an image - \r\n     * returns an Image Component with the path of the element in the data object (coordinates).\r\n     * \r\n     * @param resource The resource to generate images from.\r\n     * @param coordinates The resource's path in the data object.\r\n     * @return Returns array of Image components.\r\n     */\r\n    renderImages = (resource, coordinates) => {\r\n        \r\n        //console.log(\"resource=\"+resource);\r\n        if (_.isArray(resource)) {\r\n            return _.map(resource, (res, index) => this.renderImages(res, [...coordinates, index]));\r\n        }\r\n        if (_.isObject(resource)) {\r\n            return _.keys(resource).map((objkey) => this.renderImages(resource[objkey], [...coordinates, objkey]));\r\n        }\r\n        if (_.isString(resource) && (this.isImage(resource))) {\r\n            return <Image\r\n                key={coordinates.join()}\r\n                image={this.server+\"/\"+resource}\r\n                handleChangePicture={this.handleChangePicture}\r\n                coordinates={coordinates} />;\r\n        }\r\n        \r\n    };\r\nrenderResource=()=>{\r\n\r\n \r\n}\r\n    render() {\r\n        //console.log(\"kk=\"+this.state.data);\r\n        this.renderResource();\r\n        return <div className=\"row\">\r\n            {this.state.data ? this.renderImages(this.state.data, []) :\r\n                <div className=\"spiner-wrapper\">\r\n                    <div className=\"spinner-border\" role=\"status\">\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </div>\r\n                </div>}\r\n        </div>;\r\n    };\r\n}\r\n\r\nexport default ImageGallery;\r\n"]},"metadata":{},"sourceType":"module"}